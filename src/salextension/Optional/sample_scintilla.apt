Application Description: Centura SQLWindows Standard Application Template
	Outline Version - 4.0.28
	Design-time Settings
.data VIEWINFO
0000: 6F00000001000000 FFFF01000D004347 5458566965775374 6174650400010000
0020: 0000000000EC0000 002C000000020000 0003000000FFFFFF FFFFFFFFFFFCFFFF
0040: FFE9FFFFFFFFFFFF FF000000007C0200 004D010000010000 0001000000010000
0060: 000F4170706C6963 6174696F6E497465 6D00000000
.enddata
		Outline Window State: Normal
		Outline Window Location and Size
.data VIEWINFO
0000: 6600040003002D00 0000000000000000 0000B71E5D0E0500 1D00FFFF4D61696E
0020: 0000000000000000 0000000000000000 0000003B00010000 00000000000000E9
0040: 1E800A00008600FF FF496E7465726E61 6C2046756E637469 6F6E730000000000
0060: 0000000000000000 0000000000003200 0100000000000000 0000E91E800A0000
0080: DF00FFFF56617269 61626C6573000000 0000000000000000 0000000000000000
00A0: 3000010000000000 00000000F51E100D 0000F400FFFF436C 6173736573000000
00C0: 0000000000000000 0000000000000000
.enddata
.data VIEWSIZE
0000: D000
.enddata
			Left: -0.013"
			Top: 0.0"
			Width:  8.013"
			Height: 4.969"
		Options Box Location
.data VIEWINFO
0000: D4180909B80B1A00
.enddata
.data VIEWSIZE
0000: 0800
.enddata
			Visible? No
			Left: 4.15"
			Top: 1.885"
			Width:  3.8"
			Height: 2.073"
		Class Editor Location
			Visible? No
			Left: 0.575"
			Top: 0.094"
			Width:  5.063"
			Height: 2.719"
		Tool Palette Location
			Visible? No
			Left: 6.388"
			Top: 0.729"
		Fully Qualified External References? Yes
		Reject Multiple Window Instances? No
		Enable Runtime Checks Of External References? Yes
		Use Release 4.0 Scope Rules? No
	Libraries
		File Include: qcktabs.apl
		File Include: Scintilla.apl
	Global Declarations
		Window Defaults
			Tool Bar
				Display Style? Etched
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: System Default
				Text Color: System Default
				Background Color: System Default
			Form Window
				Display Style? Etched
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: System Default
				Text Color: System Default
				Background Color: System Default
			Dialog Box
				Display Style? Etched
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: System Default
				Text Color: System Default
				Background Color: System Default
			Top Level Table Window
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: System Default
				Text Color: System Default
				Background Color: System Default
			Data Field
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Multiline Field
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Spin Field
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Background Text
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Pushbutton
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
			Radio Button
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Check Box
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Option Button
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
			Group Box
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Child Table Window
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			List Box
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Combo Box
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Line
				Line Color: Use Parent
			Frame
				Border Color: Use Parent
				Background Color: 3D Face Color
			Picture
				Border Color: Use Parent
				Background Color: Use Parent
		Formats
			Number: 0'%'
			Number: #0
			Number: ###000
			Number: ###000;'($'###000')'
			Date/Time: hh:mm:ss AMPM
			Date/Time: M/d/yy
			Date/Time: MM-dd-yy
			Date/Time: dd-MMM-yyyy
			Date/Time: MMM d, yyyy
			Date/Time: MMM d, yyyy hh:mm AMPM
			Date/Time: MMMM d, yyyy hh:mm AMPM
		External Functions
			Library name: USER32.DLL
				ThreadSafe: No
				Function: GetCursorPos
					Description: The GetCursorPos function retrieves the cursor’s position, in screen coordinates.
							
							Parameters:
								lpPoint 		Points to a POINT structure that receives the screen coordinates of the cursor.
							
							Return Values:
								If the function succeeds, the return value is nonzero.
								If the function fails, the return value is zero. To get extended error information, call GetLastError.
							
							Remarks:
							The cursor position is always given in screen coordinates and is not affected by the mapping mode of the window that contains the cursor.
							
							The calling process must have WINSTA_READATTRIBUTES access to the window station.
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						structPointer
							Receive Number: LONG
							Receive Number: LONG
				Function: AppendMenuA
					Description: The AppendMenu function appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu.
							You can use this function to specify the content, appearance, and behavior of the menu item.
							The AppendMenu function has been superseded by the InsertMenuItem function.
							You can still use AppendMenu, however, if you do not need any of the extended features of InsertMenuItem.
							
							Parameters:
								hMenu 		Identifies the menu bar, drop-down menu, submenu, or shortcut menu to be changed.
								uFlags 		Specifies flags to control the appearance and behavior of the new menu item.
										This parameter can be a combination of the values listed in the following Remarks section.
								uIDNewItem 	Specifies either the identifier of the new menu item or, if the uFlags parameter is set to MF_POPUP,
										the handle to the drop-down menu or submenu.
								lpNewItem 	Specifies the content of the new menu item. The interpretation of lpNewItem depends on whether
										the uFlags parameter includes the MF_BITMAP, MF_OWNERDRAW, or MF_STRING flag, as follows:
										Value 			Description
										MF_BITMAP 		Contains a bitmap handle.
										MF_OWNERDRAW 	Contains a 32-bit value supplied by the application that can be used to maintain
													additional data related to the menu item. The value is in the itemData member of
													the structure pointed to by the lparam parameter of the WM_MEASURE or
													WM_DRAWITEM message sent when the menu is created or its appearance is updated.
										MF_STRING 		Contains a pointer to a null-terminated string.
							 
							Return Values:
								If the function succeeds, the return value is nonzero.
								If the function fails, the return value is zero. To get extended error information, call GetLastError.
							
							Remarks:
							The application must call the DrawMenuBar function whenever a menu changes, whether or not the menu is in a displayed window.
							The following flags can be set in the uFlags parameter:
							Value 			Description
							MF_BITMAP 		Uses a bitmap as the menu item. The lpNewItem parameter contains the handle to the bitmap.
							MF_CHECKED 		Places a check mark next to the menu item. If the application provides check-mark bitmaps (see SetMenuItemBitmaps),
										this flag displays the check mark bitmap next to the menu item.
							MF_DISABLED 		Disables the menu item so it cannot be selected, but the flag does not gray it.
							MF_ENABLED 		Enables the menu item so it can be selected, and restores it from its grayed state.
							MF_GRAYED 		Disables the menu item and grays it so it cannot be selected.
							MF_MENUBARBREAK 	Functions the same as the MF_MENUBREAK flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.
							MF_MENUBREAK 		Places the item on a new line (for a menu bar) or in a new column (for a drop-down menu, submenu, or shortcut menu)
										without separating columns.
							MF_OWNERDRAW 	Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns
										the menu receives a WM_MEASUREITEM message to retrieve the width and height of the menu item.
										The WM_DRAWITEM message is then sent to the window procedure of the owner window whenever the
										appearance of the menu item must be updated.
							MF_POPUP 		Specifies that the menu item opens a drop-down menu or submenu. The uIDNewItem parameter specifies the
										handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar, or a menu item
										that opens a submenu to a drop-down menu, submenu, or shortcut menu.
							MF_SEPARATOR 		Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu.
										The line cannot be grayed, disabled, or highlighted. The lpNewItem and uIDNewItem parameters are ignored.
							MF_STRING 		Specifies that the menu item is a text string; the lpNewItem parameter points to the string.
							MF_UNCHECKED 		Does not place a check mark next to the item (default). If the application supplies check-mark bitmaps
										(see SetMenuItemBitmaps), this flag displays the unchecked bitmap next to the menu item.
							 
							The following groups of flags cannot be used together:
							· MF_DISABLED, MF_ENABLED, and MF_GRAYED
							· MF_BITMAP, MF_STRING, and MF_OWNERDRAW
							· MF_MENUBARBREAK and MF_MENUBREAK
							· MF_CHECKED and MF_UNCHECKED
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: WORD
						Number: WORD
						String: LPSTR
				!
				!
				Function: CreateMenu
					Description: The CreateMenu function creates a menu. The menu is initially empty, but it can be filled with menu items
							by using the InsertMenuItem, AppendMenu, and InsertMenu functions.
							
							Parameters:
								This function has no parameters.
							
							Return Values:
								If the function succeeds, the return value is the handle to the newly created menu.
								If the function fails, the return value is NULL.
							
							Remarks:
							Resources associated with a menu that is assigned to a window are freed automatically.
							If the menu is not assigned to a window, an application must free system resources associated with the menu before closing.
							An application frees menu resources by calling the DestroyMenu function.
							
							Windows 95: The system can support a maximum of 16,364 menu handles.
					Export Ordinal: 0
					Returns
						Window Handle: HWND
					Parameters
				Function: ClientToScreen
					Description: The ClientToScreen function converts the client coordinates of a specified point to screen coordinates.
							
							Parameters:
								hWnd 		Identifies the window whose client area is used for the conversion.
								lpPoint 		Points to a POINT structure that contains the client coordinates to be converted.
										The new screen coordinates are copied into this structure if the function succeeds.
							
							Return Values:
								If the function succeeds, the return value is nonzero.
								If the function fails, the return value is zero.
							
							Remarks:
							The ClientToScreen function replaces the client coordinates in the POINT structure with the screen coordinates.
							The screen coordinates are relative to the upper-left corner of the screen.
					Export Ordinal: 0
					Returns
					Parameters
						Window Handle: HWND
						structPointer
							Receive Number: LONG
							Receive Number: LONG
				Function: CreatePopupMenu
					Description: The CreatePopupMenu function creates a drop-down menu, submenu, or shortcut menu.
							The menu is initially empty. You can insert or append menu items by using the InsertMenuItem function.
							You can also use the InsertMenu function to insert menu items and the AppendMenu function to append menu items.
							
							Parameters:
								This function has no parameters.
							
							Return Values:
								If the function succeeds, the return value is the handle to the newly created menu.
								If the function fails, the return value is NULL.
							
							Remarks:
							The application can add the new menu to an existing menu, or it can display a shortcut menu by calling the
							TrackPopupMenuEx or TrackPopupMenu functions.
							
							Resources associated with a menu that is assigned to a window are freed automatically.
							If the menu is not assigned to a window, an application must free system resources associated with the menu before closing.
							An application frees menu resources by calling the DestroyMenu function.
							
							Windows 95: The system can support a maximum of 16,364 menu handles.
					Export Ordinal: 0
					Returns
						Window Handle: HWND
					Parameters
				Function: CreateWindowExA
					Description: The CreateWindowEx function creates an overlapped, pop-up, or child window with an extended style;
							otherwise, this function is identical to the CreateWindow function.
							For more information about creating a window and for full descriptions of the other parameters of CreateWindowEx, see CreateWindow.
							
							Parameters:
								dwExStyle 	Specifies the extended style of the window. This parameter can be one of the following values:
										Style  Meaning
										WS_EX_ACCEPTFILES 		Specifies that a window created with this style accepts drag-drop files.
										WS_EX_APPWINDOW 		Forces a top-level window onto the taskbar when the window is minimized.
										WS_EX_CLIENTEDGE 		Specifies that a window has a border with a sunken edge.
										WS_EX_CONTEXTHELP 		Includes a question mark in the title bar of the window. When the user clicks the question mark, the cursor changes to a question mark with a pointer.
														If the user then clicks a child window, the child receives a WM_HELP message. The child window should pass the message to the parent window procedure,
														which should call the WinHelp function using the HELP_WM_HELP command. The Help application displays a pop-up window that typically
														contains help for the child window.
														WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
										WS_EX_CONTROLPARENT 		Allows the user to navigate among the child windows of the window by using the TAB key.
										WS_EX_DLGMODALFRAME 	Creates a window that has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the dwStyle parameter.
							 			WS_EX_LEFT 			Window has generic “left-aligned” properties. This is the default.
										WS_EX_LEFTSCROLLBAR 		If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the vertical scroll bar (if present) is to the left of the client area.
														For other languages, the style is ignored and not treated as an error.
										WS_EX_LTRREADING 		The window text is displayed using Left to Right reading-order properties. This is the default.
										WS_EX_MDICHILD 		Creates an MDI child window.
										WS_EX_NOPARENTNOTIFY 	Specifies that a child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed.
										WS_EX_OVERLAPPEDWINDOW 	Combines the WS_EX_CLIENTEDGE and WS_EX_WINDOWEDGE styles.
										WS_EX_PALETTEWINDOW 	Combines the WS_EX_WINDOWEDGE, WS_EX_TOOLWINDOW, and WS_EX_TOPMOST styles.
										WS_EX_RIGHT 			Window has generic "right-aligned" properties. This depends on the window class. This style has an effect only if the shell language is Hebrew,
														Arabic, or another language that supports reading order alignment; otherwise, the style is ignored and not treated as an error.
										WS_EX_RIGHTSCROLLBAR 	Vertical scroll bar (if present) is to the right of the client area. This is the default.
										WS_EX_RTLREADING 		 If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the window text is displayed using Right
														to Left reading-order properties. For other languages, the style is ignored and not treated as an error.
							 			WS_EX_STATICEDGE 		Creates a window with a three-dimensional border style intended to be used for items that do not accept user input.
										WS_EX_TOOLWINDOW 		Creates a tool window; that is, a window intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar,
														and the window title is drawn using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB.
														If a tool window has a system menu, its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE.
										WS_EX_TOPMOST 		Specifies that a window created with this style should be placed above all non-topmost windows and should stay above them, even when the window is deactivated.
														To add or remove this style, use the SetWindowPos function.
										WS_EX_TRANSPARENT 		Specifies that a window created with this style is to be transparent. That is, any windows that are beneath the window are not obscured by the window.
														A window created with this style receives WM_PAINT messages only after all sibling windows beneath it have been updated.
										WS_EX_WINDOWEDGE 		Specifies that a window has a border with a raised edge.
							 
										Using the WS_EX_RIGHT style for static or edit controls has the same effect as using the SS_RIGHT or ES_RIGHT style, respectively.
										Using this style with button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON styles.
							
								lpClassName 	Points to a null-terminated string or is an integer atom. If lpClassName is an atom, it must be a global atom created by a previous call to GlobalAddAtom.
										The atom, a 16-bit value less than 0xC000, must be in the low-order word of lpClassName; the high-order word must be zero.
										If lpClassName is a string, it specifies the window class name. The class name can be any name registered with the RegisterClass function or any of the predefined control-class names.
								lpWindowName 	Points to a null-terminated string that specifies the window name.
								dwStyle 		Specifies the style of the window being created. For a list of the window styles that can be specified in dwStyle, see CreateWindow.
								x 		Specifies the initial horizontal position of the window. For an overlapped or pop-up window, the x parameter is the initial x-coordinate of the window’s upper-left corner, in screen coordinates.
										For a child window, x is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window’s client area.
										If x is set to CW_USEDEFAULT, Windows selects the default position for the window’s upper-left corner and ignores the y parameter. CW_USEDEFAULT is valid only for overlapped windows;
										if it is specified for a pop-up or child window, the x and y parameters are set to zero.
								y 		Specifies the initial vertical position of the window. For an overlapped or pop-up window, the y parameter is the initial y-coordinate of the window’s upper-left corner, in screen coordinates.
										For a child window, y is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window’s client area.
										For a list box, y is the initial y-coordinate of the upper-left corner of the list box’s client area relative to the upper-left corner of the parent window’s client area.
										If an overlapped window is created with the WS_VISIBLE style bit set and the x parameter is set to CW_USEDEFAULT, Windows ignores the y parameter.
								nWidth 		Specifies the width, in device units, of the window. For overlapped windows, nWidth is the window’s width, in screen coordinates, or CW_USEDEFAULT. If nWidth is CW_USEDEFAULT,
										Windows selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from
										the initial y-coordinate to the top of the icon area. CW_USEDEFAULT is valid only for overlapped windows; if CW_USEDEFAULT is specified for a pop-up or child window, the nWidth and
										nHeight parameter are set to zero.
								nHeight 		Specifies the height, in device units, of the window. For overlapped windows, nHeight is the window’s height, in screen coordinates. If the nWidth parameter is set to CW_USEDEFAULT, Windows ignores nHeight.
								hWndParent 	Identifies the parent or owner window of the window being created. A valid window handle must be supplied when a child window or an owned window is created. A child window is confined to the client
										area of its parent window. An owned window is an overlapped window that is destroyed when its owner window is destroyed or hidden when its owner is minimized; it is always displayed on top of its owner window.
										Although this parameter must specify a valid handle if the dwStyle parameter includes the WS_CHILD style, it is optional if dwStyle includes the WS_POPUP style.
								hMenu 		Identifies a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, hMenu identifies the menu to be used with the window;
										it can be NULL if the class menu is to be used. For a child window, hMenu specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events.
										The application determines the child-window identifier; it must be unique for all child windows with the same parent window.
								hInstance 	Identifies the instance of the module to be associated with the window.
								lpParam 		Points to a value passed to the window through the CREATESTRUCT structure referenced by the lParam parameter of the WM_CREATE message. If an application calls CreateWindow
										to create a multiple document interface client window, lpParam must point to a CLIENTCREATESTRUCT structure.
							
							Return Values:
								If the function succeeds, the return value is the handle to the new window.
								If the function fails, the return value is NULL.
							
							Remarks:
							The CreateWindowEx function sends WM_NCCREATE, WM_NCCALCSIZE, and WM_CREATE messages to the window being created.
							
							For information about the window control classes, window styles, and control styles used with this function, see the description of the CreateWindow function.
							
							Windows 95: The system can support a maximum of 16,364 window handles.
					Export Ordinal: 0
					Returns
						Window Handle: HWND
					Parameters
						Number: DWORD
						String: LPSTR
						String: LPSTR
						Number: DWORD
						Number: INT
						Number: INT
						Number: INT
						Number: INT
						Window Handle: HWND
						Number: HANDLE
						Number: HANDLE
						Number: DWORD
				!
				Function: GetMenu
					Description: The GetMenu function retrieves the handle of the menu assigned to the given window.
							
							Parameters
								hWnd 		Identifies the window whose menu handle is retrieved.
							
							Return Values:
								If the function succeeds, the return value is the handle of the menu. If the given window has no menu, the return value is NULL.
								If the window is a child window, the return value is undefined.
					Export Ordinal: 0
					Returns
						Window Handle: HWND
					Parameters
						Window Handle: HWND
				Function: ReleaseDC
					Description: The ReleaseDC function releases a device context (DC), freeing it for use by other applications.
							The effect of the ReleaseDC function depends on the type of device context. It frees only common and window device contexts.
							It has no effect on class or private device contexts.
							
							Parameters:
								hWnd 		Identifies the window whose device context is to be released.
								hDC 		Identifies the device context to be released.
							
							Return Values:
								The return value specifies whether the device context is released. If the device context is released, the return value is 1.
								If the device context is not released, the return value is zero.
							
							Remarks:
							The application must call the ReleaseDC function for each call to the GetWindowDC function and for each call to the GetDC function that retrieves a common device context.
							
							An application cannot use the ReleaseDC function to release a device context that was created by calling the CreateDC function; instead, it must use the DeleteDC function.
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: HANDLE
				Function: ScreenToClient
					Description: The ScreenToClient function converts the screen coordinates of a specified point on the screen to client coordinates.
							
							Parameters:
								hWnd 		Identifies the window whose client area will be used for the conversion.
								lpPoint 		Points to a POINT structure that contains the screen coordinates to be converted.
							
							Return Values:
								If the function succeeds, the return value is nonzero.
								If the function fails, the return value is zero.
							
							Remarks:
							The function uses the window identified by the hWnd parameter and the screen coordinates given in the POINT structure to compute client coordinates.
							It then replaces the screen coordinates with the client coordinates. The new coordinates are relative to the upper-left corner of the specified window’s client area.
							
							The ScreenToClient function assumes the specified point is in screen coordinates.
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						structPointer
							Receive Number: LONG
							Receive Number: LONG
				!
				Function: TrackPopupMenu
					Description: The TrackPopupMenu function displays a shortcut menu at the specified location and tracks the selection of items on the menu.
							The shortcut menu can appear anywhere on the screen.
							
							Parameters:
								hMenu 			Identifies the shortcut menu to be displayed. The handle can be obtained by calling CreatePopupMenu to create
											a new shortcut menu, or by calling GetSubMenu to retrieve the handle of a submenu associated with an existing menu item.
								uFlags 			A set of bit flags that specify function options.
											Use one of the following bit flag constants to specify how the function positions the shortcut menu horizontally.
											Value 			Meaning
							 				TPM_CENTERALIGN 	If this flag is set, the function centers the shortcut menu horizontally relative to the coordinate specified by the x parameter.
											TPM_LEFTALIGN 		If this flag is set, the function positions the shortcut menu so that its left side is aligned with the coordinate specified by the x parameter.
											TPM_RIGHTALIGN 	Positions the shortcut menu so that its right side is aligned with the coordinate specified by the x parameter.
							 
											Use one of the following bit flag constants to specify how the function positions the shortcut menu vertically.
											Value 			Meaning
											TPM_BOTTOMALIGN 	If this flag is set, the function positions the shortcut menu so that its bottom side is aligned with the coordinate specified by the y parameter.
											TPM_TOPALIGN 		If this flag is set, the function positions the shortcut menu so that its top side is aligned with the coordinate specified by the y parameter.
											TPM_VCENTERALIGN 	If this flag is set, the function centers the shortcut menu vertically relative to the coordinate specified by the y parameter.
							 
											Use the following bit flag constants to determine the user selection without having to set up a parent window for the menu.
											Value 			Meaning
											TPM_NONOTIFY 		If this flag is set, the function does not send notification messages when the user clicks on a menu item.
											TPM_RETURNCMD 	If this flag is set, the function returns the menu item identifier of the user's selection in the return value.
							 
											Use one of the following bit flag constants to specify which mouse button the shortcut menu tracks.
											Value 			Meaning
											TPM_LEFTBUTTON 	If this flag is set, the shortcut menu tracks the left mouse button.
											TPM_RIGHTBUTTON 	If this flag is set, the shortcut menu tracks the right mouse button
								x 			Specifies the horizontal location of the shortcut menu, in screen coordinates.
								y 			Specifies the vertical location of the shortcut menu, in screen coordinates.
								nReserved 		Reserved; must be zero.
								hWnd 			Identifies the window that owns the shortcut menu. This window receives all messages from the menu.
											The window does not receive a WM_COMMAND message from the menu until the function returns.
											If you specify TPM_NONOTIFY in the uFlags parameter, the function does not send messages to the window identified by hWnd.
											However, you must still pass a window handle in hWnd. It can be any window handle from your application.
								prcRect 			Points to a RECT structure that specifies the portion of the screen in which the user can select without dismissing the shortcut menu.
											If this parameter is NULL, the shortcut menu is dismissed if the user clicks outside the shortcut menu.
							
							Return Values:
								If the function succeeds, the return value is nonzero.
								If the function fails, the return value is zero. To get extended error information, call GetLastError.
							
								If you specify TPM_RETURNCMD in the uFlags parameter, the return value is the menu-item identifier of the item selected.
								If no item is selected, the return value is zero.
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: UINT
						Number: INT
						Number: INT
						Number: INT
						Window Handle: HWND
						String: LPVOID
				!
				!
				Function: WindowFromDC
					Description:
					Export Ordinal: 0
					Returns
						Window Handle: HWND
					Parameters
						Number: HANDLE
				Function: SetFocus
					Description:
					Export Ordinal: 0
					Returns
						Window Handle: HWND
					Parameters
						Window Handle: HWND
			Library name: vti21.dll
				ThreadSafe: No
				!
				! ***** Visual Toolchest - VTARRAY.APL
				!
				! ***** Array functions
				Function: VisArrayAppend
					Description: nNumItems VisArrayAppend( hArySource[*], hAryTarget[*] )
					Export Ordinal: 165
					Returns
						Number: LONG
					Parameters
						String: HARRAY
						String: HARRAY
						Number: INT
				Function: VisArrayCopy
					Description: nNumItems VisArrayCopy( hArySource[*], hAryTarget[*] )
					Export Ordinal: 166
					Returns
						Number: LONG
					Parameters
						String: HARRAY
						String: HARRAY
						Number: INT
				Function: VisArrayDeleteItem
					Description: nNumItems VisArrayDeleteItem( harray, nIndex, nDataType )
					Export Ordinal: 167
					Returns
						Number: LONG
					Parameters
						String: HARRAY
						Number: LONG
						Number: INT
				Function: VisArrayFillDateTime
					Description: bOk VisArrayFillDateTime( dtArray[*], dtValue, nCount )
					Export Ordinal: 168
					Returns
						Boolean: BOOL
					Parameters
						Date/Time: HARRAY
						Date/Time: DATETIME
						Number: LONG
				Function: VisArrayFillNumber
					Description: bOk VisArrayFillNumber( nArray[*], nValue, nCount )
					Export Ordinal: 169
					Returns
						Boolean: BOOL
					Parameters
						Number: HARRAY
						Number: NUMBER
						Number: LONG
				Function: VisArrayFillString
					Description: bOk VisArrayFillString( sArray[*], sValue, nCount )
					Export Ordinal: 170
					Returns
						Boolean: BOOL
					Parameters
						String: HARRAY
						String: LPSTR
						Number: LONG
				Function: VisArrayFindDateTime
					Description: nIndex VisArrayFindDateTime( dtDateTime[*], dtSearchFor )
					Export Ordinal: 171
					Returns
						Number: LONG
					Parameters
						Date/Time: HARRAY
						Date/Time: DATETIME
				Function: VisArrayFindNumber
					Description: nIndex VisArrayFindNumber( nNumbers[*], nSearchFor )
					Export Ordinal: 172
					Returns
						Number: LONG
					Parameters
						Number: HARRAY
						Number: NUMBER
				Function: VisArrayFindString
					Description: nIndex VisArrayFindString( sStrings[*], sSearchFor )
					Export Ordinal: 149
					Returns
						Number: LONG
					Parameters
						String: HARRAY
						String: LPSTR
				Function: VisArrayInsertItem
					Description: nNumItems VisArrayInsertItem( harray, nIndex, nDataType )
					Export Ordinal: 173
					Returns
						Number: LONG
					Parameters
						String: HARRAY
						Number: LONG
						Number: INT
				Function: VisArraySort
					Description: nNumItems VisArraySort( harray, nSortOrder, nDataType )
					Export Ordinal: 150
					Returns
						Number: LONG
					Parameters
						String: HARRAY
						Number: INT
						Number: INT
			Library name: vti21.dll
				ThreadSafe: No
				!
				! *** Visual Toolchest - VTCAL.APL
				!
				! *** cCalendar Exports
				Function: VisCalClearMarked
					Description:
					Export Ordinal: 272
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
				Function: VisCalClearSpecials
					Description:
					Export Ordinal: 323
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
				Function: VisCalGetColor
					Description:
					Export Ordinal: 273
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
						Number: INT
				Function: VisCalGetFocusDate
					Description:
					Export Ordinal: 274
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Receive Date/Time: LPDATETIME
				Function: VisCalGetMarked
					Description:
					Export Ordinal: 275
					Returns
						Number: LONG
					Parameters
						Number: DWORD
						Date/Time: HARRAY
				Function: VisCalGetSpecials
					Description:
					Export Ordinal: 276
					Returns
						Number: LONG
					Parameters
						Number: DWORD
						Date/Time: HARRAY
						Date/Time: HARRAY
						Date/Time: HARRAY
						Date/Time: HARRAY
				! Function: VisCalGetStartWD
					Description: Retrieves weekday for first column of calendar.
					Export Ordinal: 277
					Returns 
						Number: INT
					Parameters 
						Number: DWORD
				Function: VisCalGetStyle
					Description:
					Export Ordinal: 278
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
				Function: VisCalIsDateMarked
					Description:
					Export Ordinal: 279
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Date/Time: DATETIME
				Function: VisCalIsDateSpecial
					Description:
					Export Ordinal: 324
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
						Date/Time: DATETIME
						Number: INT
						Number: INT
				Function: VisCalMarkDate
					Description:
					Export Ordinal: 280
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Date/Time: DATETIME
						Boolean: BOOL
				Function: VisCalMarkDates
					Description:
					Export Ordinal: 281
					Returns
						Number: LONG
					Parameters
						Number: DWORD
						Date/Time: HARRAY
						Boolean: BOOL
				Function: VisCalSetColor
					Description:
					Export Ordinal: 282
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
						Number: INT
						Number: DWORD
				Function: VisCalSetFocusDate
					Description:
					Export Ordinal: 283
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Date/Time: DATETIME
				Function: VisCalSetMonths
					Description: Assigns text to be used for month names.
					Export Ordinal: 284
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						String: HARRAY
				Function: VisCalSpecialDate
					Description: Adds/removes specified date from calendar's special rule list;
							returns whether any work was actually done.
					Export Ordinal: 285
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
						Date/Time: DATETIME
						Number: INT
						Number: INT
						Number: DWORD
						Number: DWORD
						Boolean: BOOL
				! Function: VisCalSetStartWD
					Description: Assigns weekday for first column of calendar.
					Export Ordinal: 286
					Returns 
						Number: INT
					Parameters 
						Number: DWORD
						Number: INT
				Function: VisCalSetStyle
					Description:
					Export Ordinal: 287
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
						Number: DWORD
						Boolean: BOOL
				Function: VisCalSetWeekDays
					Description:
					Export Ordinal: 288
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						String: HARRAY
				Function: VisCalWeekStartSet
					Description: Sets the starting weekday for the calendar
					Export Ordinal: 377
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
				Function: VisCalWeekStartGet
					Description: Gets the starting weekday for the calendar
					Export Ordinal: 378
					Returns
						Number: INT
					Parameters
						Number: DWORD
				!
				! *** cCalendarDropDown Exports
				Function: VisCalCmbGetCalendar
					Description:
					Export Ordinal: 292
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
				Function: VisCalCmbGetEditable
					Description:
					Export Ordinal: 295
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
				Function: VisCalCmbGetPicture
					Description:
					Export Ordinal: 296
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Receive String: LPSTR
						Number: INT
				Function: VisCalCmbGetStyle
					Description:
					Export Ordinal: 293
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
				Function: VisCalCmbSetEditable
					Description:
					Export Ordinal: 297
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Boolean: BOOL
				Function: VisCalCmbSetPicture
					Description:
					Export Ordinal: 298
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						String: LPSTR
				Function: VisCalCmbSetStyle
					Description:
					Export Ordinal: 294
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
						Number: DWORD
						Boolean: BOOL
			Library name: vti21.dll
				ThreadSafe: No
				!
				! *** Visual Toolchest - VTCOMDLG.APL
				!
				Function: VisPopulateDrives
					Description: lDriveCount VisPopulateDrives(hWndList)
							Adds all available drives to a listbox or combobox.
					Export Ordinal: 265
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
				Function: VisPopulateCommonDir
					Description: lOK VisPopulateCommonDir(hWndList, sCurDir)
							Adds all directories to a listbox or combobox.
					Export Ordinal: 267
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						String: LPSTR
				Function: VisPopulateDirTree
					Description: lOK VisPopulateDirTree(hWndList, sDrive)
							Adds directory tree to a listbox or combobox.
					Export Ordinal: 268
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						String: LPSTR
				Function: VisGetCommonDir
					Description: sCurDir VisGetCommonDir(hWndList, nIndex)
							Retrieves the current directory of a common dialog listbox or combobox.
					Export Ordinal: 269
					Returns
						String: HSTRING
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisSetCommonDir
					Description: bOk VisSetCommonDir(hWndList, nIndex)
							Assigns the current directory of a common dialog listbox or combobox.
					Export Ordinal: 270
					Returns
						String: HSTRING
					Parameters
						Window Handle: HWND
						Number: INT
			Library name: vti21.dll
				ThreadSafe: No
				!
				! ***** Visual Toolchest - VTCOMM.APL
				!
				! ***** Miscellaneous Functions
				Function: VisErrorRecovery
					Description: nAction VisErrorRecovery( sCaption )
							
							Displays an error message and allows user to
							retry the operation or halt the application.
					Export Ordinal: 135
					Returns
						Number: INT
					Parameters
						String: LPSTR
				Function: VisGetCopyright
					Description: sCopyright VisGetCopyright()
							
							Retrieves a copyright string to display in
							About boxes that use the Visual Toolchest library.
					Export Ordinal: 90
					Returns
						String: HSTRING
					Parameters
				Function: VisGetKeyState
					Description: nState VisGetKeyState( nVirtualKey )
							
							Retrieves the state of a specified key.  The state specifies
							whether the key is up, down, or toggled.
					Export Ordinal: 60
					Returns
						Number: WORD
					Parameters
						Number: INT
				!
				! ***** Picture Functions
				Function: VisPicLoad
					Description: hPic VisPicLoad( nFlags, sString1, sString2 )
							
							Loads a picture into memory from a resource DLL/EXE,
							image file (.BMP or .ICO), Centura resource or
							Centura string.
							
							TIP: Bitmaps default to original size unless you add
							one of the PIC_Load* flags.  Then, the bitmap will be
							resized to either large or small icon size.  Icons
							default to large size, unless you add one of the
							PIC_Load* flags.  Then, the icon will be resized to
							match your request.
							
							NOTE: Under Win32, small icon sizes are not a fixed size.
							However, VT always uses 16x16 pixels as the size for small
							icons.  For further information, search the MSDN CD's
							technical articles for 'Icons in Win32'.
					Export Ordinal: 111
					Returns
						Number: INT
					Parameters
						Number: WORD
						String: LPSTR
						String: LPSTR
				Function: VisPicFree
					Description: nErrCode VisPicFree( hPic )
							
							Removes a picture and frees it's memory.
							
							TIP: Do not free a picture twice.  Doing this _will_
							generate a GPF, but NULL picture handles passed to
							this function are safely ignored.
					Export Ordinal: 112
					Returns
						Number: INT
					Parameters
						Number: INT
			Library name: vti21.dll
				ThreadSafe: No
				!
				! ***** Visual Toolchest - VTDEBUG.APL
				!
				! ***** Debug functions
				Function: VisDebugAssert
					Description: bOk VisDebugAssert( bExpression, sDebugString )
					Export Ordinal: 180
					Returns
						Boolean: BOOL
					Parameters
						Boolean: BOOL
						String: LPSTR
				Function: VisDebugBeginTime
					Description: bOk VisDebugBeginTime()
					Export Ordinal: 181
					Returns
						Boolean: BOOL
					Parameters
				Function: VisDebugEndTime
					Description: bOk VisDebugEndTime( sContext, nDebugLevel )
					Export Ordinal: 182
					Returns
						Boolean: BOOL
					Parameters
						String: LPSTR
						Number: WORD
				Function: VisDebugGetFlags
					Description: nDebugFlags VisDebugGetFlags()
					Export Ordinal: 183
					Returns
						Number: DWORD
					Parameters
				Function: VisDebugSetFlags
					Description: nNewFlags VisDebugSetFlags( nFlags, bMode )
					Export Ordinal: 106
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
						Boolean: BOOL
				Function: VisDebugSetLevel
					Description: bOK VisDebugSetLevel( nDebugLevel )
					Export Ordinal: 184
					Returns
						Boolean: BOOL
					Parameters
						Number: WORD
				Function: VisDebugSetTime
					Description: bOk VisDebugSetTime( sContext )
					Export Ordinal: 185
					Returns
						Boolean: BOOL
					Parameters
						String: LPSTR
				Function: VisDebugString
					Description: bOk VisDebugString( sDebugString, nDebugLevel )
					Export Ordinal: 107
					Returns
						Boolean: BOOL
					Parameters
						String: LPSTR
						Number: WORD
			Library name: vti21.dll
				ThreadSafe: No
				!
				! ***** Visual Toolchest - VTDOS.APL
				!
				! ***** DOS functions
				Function: VisDosBuildFullName
					Description: sFullName VisDosBuildFullName( sModuleName, sFileName )
					Export Ordinal: 186
					Returns
						String: HSTRING
					Parameters
						String: LPSTR
						String: LPSTR
				Function: VisDosEnumDirInfo
					Description: nNumDirs VisDosEnumDirInfo( sDirSpec, sDirs[*], dtDateTimes[*], nAttributes[*] )
					Export Ordinal: 206
					Returns
						Number: INT
					Parameters
						String: LPSTR
						String: HARRAY
						Date/Time: HARRAY
						Number: HARRAY
				Function: VisDosEnumDirs
					Description:
					Export Ordinal: 32
					Returns
						Number: INT
					Parameters
						String: LPSTR
						String: HARRAY
				Function: VisDosEnumDrives
					Description:
					Export Ordinal: 29
					Returns
						Number: INT
					Parameters
						String: HARRAY
				Function: VisDosEnumFileInfo
					Description: nNumFiles VisDosEnumFileInfo( sFileSpec, nAttributes, sFiles[*], nSizes[*], dtDateTimes[*], nAttributes[*] )
					Export Ordinal: 207
					Returns
						Number: INT
					Parameters
						String: LPSTR
						Number: WORD
						String: HARRAY
						Number: HARRAY
						Date/Time: HARRAY
						Number: HARRAY
				Function: VisDosEnumFiles
					Description:
					Export Ordinal: 34
					Returns
						Number: INT
					Parameters
						String: LPSTR
						Number: WORD
						String: HARRAY
				Function: VisDosEnumNetConnections
					Description: nNumLinks VisDosEnumNetConnections( sDevices, sNetNames )
					Export Ordinal: 105
					Returns
						Number: INT
					Parameters
						String: HARRAY
						String: HARRAY
				Function: VisDosEnumPath
					Description:
					Export Ordinal: 35
					Returns
						Number: INT
					Parameters
						String: HARRAY
				Function: VisDosExist
					Description:
					Export Ordinal: 22
					Returns
						Boolean: BOOL
					Parameters
						String: LPSTR
				Function: VisDosIsParent
					Description:
					Export Ordinal: 325
					Returns
						Boolean: BOOL
					Parameters
						String: LPSTR
				Function: VisDosGetCurDir
					Description:
					Export Ordinal: 18
					Returns
						String: HSTRING
					Parameters
						String: LPSTR
				Function: VisDosGetDriveSize
					Description:
					Export Ordinal: 26
					Returns
						Number: INT
					Parameters
						String: LPSTR
						Receive Number: LPDWORD
						Receive Number: LPDWORD
				Function: VisDosGetDriveType
					Description:
					Export Ordinal: 45
					Returns
						Number: INT
					Parameters
						String: LPSTR
				Function: VisDosGetEnvString
					Description:
					Export Ordinal: 25
					Returns
						String: HSTRING
					Parameters
						String: LPSTR
				Function: VisDosGetFlags
					Description:
					Export Ordinal: 46
					Returns
						Number: WORD
					Parameters
				Function: VisDosGetNetName
					Description: sNetName VisDosGetNetName( sDevice )
					Export Ordinal: 134
					Returns
						String: HSTRING
					Parameters
						String: LPSTR
				Function: VisDosGetVersion
					Description: bVersionNumber VisDosGetVersion( )
					Export Ordinal: 24
					Returns
						Number: NUMBER
					Parameters
				Function: VisDosGetVolumeLabel
					Description:
					Export Ordinal: 31
					Returns
						String: HSTRING
					Parameters
						String: LPSTR
				Function: VisDosMakeAllDir
					Description: nErrCode VisDosMakeAllDir( sDir )
					Export Ordinal: 241
					Returns
						Number: INT
					Parameters
						String: LPSTR
				Function: VisDosMakePath
					Description:
					Export Ordinal: 30
					Returns
						String: HSTRING
					Parameters
						String: LPSTR
						String: LPSTR
						String: LPSTR
						String: LPSTR
				Function: VisDosNetConnect
					Description: nErrCode VisDosNetConnect( sDevice, sNetName, sPassword )
					Export Ordinal: 103
					Returns
						Number: INT
					Parameters
						String: LPSTR
						String: LPSTR
						String: LPSTR
				Function: VisDosNetDisconnect
					Description: nErrCode VisDosNetDisconnect( sDevice, bForce )
					Export Ordinal: 104
					Returns
						Number: INT
					Parameters
						String: LPSTR
						Boolean: BOOL
				Function: VisDosSetFlags
					Description:
					Export Ordinal: 47
					Returns
						Number: INT
					Parameters
						Number: WORD
						Boolean: BOOL
				Function: VisDosSplitPath
					Description:
					Export Ordinal: 28
					Returns
					Parameters
						String: LPSTR
						Receive String: LPHSTRING
						Receive String: LPHSTRING
						Receive String: LPHSTRING
						Receive String: LPHSTRING
				Function: VisDosSetVolumeLabel
					Description:
					Export Ordinal: 43
					Returns
						Number: INT
					Parameters
						String: LPSTR
						String: LPSTR
			Library name: vti21.dll
				ThreadSafe: No
				!
				! ***** Visual Toolchest - VTFILE.APL
				!
				! ***** File functions
				Function: VisFileAppend
					Description: nErrCode VisFileAppend( sSourceFile, sTargetFile )
					Export Ordinal: 51
					Returns
						Number: INT
					Parameters
						String: LPSTR
						String: LPSTR
				Function: VisFileClose
					Description: nErrCode VisFileClose( hFile )
					Export Ordinal: 188
					Returns
						Number: INT
					Parameters
						File Handle: HFILE
				Function: VisFileCopy
					Description: nErrCode VisFileCopy( sSourceFile, sTargetFile )
					Export Ordinal: 37
					Returns
						Number: INT
					Parameters
						String: LPSTR
						String: LPSTR
				Function: VisFileCreateTemp
					Description: sTempName VisDosGetTempFileName( sPrefix )
					Export Ordinal: 23
					Returns
						String: HSTRING
					Parameters
						String: LPSTR
				Function: VisFileDelete
					Description: nNumDeleted VisFileDelete( sFileName )
					Export Ordinal: 39
					Returns
						Number: INT
					Parameters
						String: LPSTR
				Function: VisFileExpand
					Description: nErrCode VisFileExpand( sSourceFile, sTargetFile )
					Export Ordinal: 53
					Returns
						Number: INT
					Parameters
						String: LPSTR
						String: LPSTR
				Function: VisFileFind
					Description:
					Export Ordinal: 36
					Returns
						String: HSTRING
					Parameters
						String: LPSTR
				Function: VisFileGetAttribute
					Description: nAttribute VisFileGetAttribute( sFileName )
					Export Ordinal: 48
					Returns
						Number: INT
					Parameters
						String: LPSTR
				Function: VisFileGetSize
					Description: nFileSize VisFileGetSize( sFileName )
					Export Ordinal: 49
					Returns
						Number: LONG
					Parameters
						String: LPSTR
				Function: VisFileGetType
					Description: nFileType VisFileGetType( sFileName )
					Export Ordinal: 189
					Returns
						Number: INT
					Parameters
						String: LPSTR
				Function: VisFileOpen
					Description: nErrCode VisFileOpen( hFile, sFileName, nFlags )
					Export Ordinal: 190
					Returns
						Number: INT
					Parameters
						Receive File Handle: LPHFILE
						String: LPSTR
						Number: WORD
				Function: VisFileRead
					Description: nBytesRead VisFileRead( hFile, sBuffer, nSize )
					Export Ordinal: 191
					Returns
						Number: LONG
					Parameters
						File Handle: HFILE
						Receive String: LPHSTRING
						Number: DWORD
				Function: VisFileReadString
					Description: nErrCode VisFileReadString( hFile, sLine )
					Export Ordinal: 192
					Returns
						Number: INT
					Parameters
						File Handle: HFILE
						Receive String: LPHSTRING
				Function: VisFileRename
					Description: nErrCode VisFileRename( sSourceFile, sTargetFile )
					Export Ordinal: 52
					Returns
						Number: INT
					Parameters
						String: LPSTR
						String: LPSTR
				Function: VisFileSetAttribute
					Description: nErrCode VisFileSetAttribute( sFileName, nAttributes, bState )
					Export Ordinal: 50
					Returns
						Number: INT
					Parameters
						String: LPSTR
						Number: WORD
						Boolean: BOOL
				Function: VisFileSetDateTime
					Description: nErrCode VisFileSetDateTime( sFileName, dtDateTime )
					Export Ordinal: 27
					Returns
						Number: INT
					Parameters
						String: LPSTR
						Date/Time: DATETIME
				Function: VisFileSeek
					Description: nErrCode VisFileSeek( hFile, nOffset, nOrigin )
					Export Ordinal: 193
					Returns
						Number: LONG
					Parameters
						File Handle: HFILE
						Number: LONG
						Number: INT
				Function: VisFileTell
					Description: nOffset VisFileTell( hFile )
					Export Ordinal: 194
					Returns
						Number: LONG
					Parameters
						File Handle: HFILE
				Function: VisFileWrite
					Description: nErrCode VisFileWrite( hFile, sBuffer, sSize )
					Export Ordinal: 195
					Returns
						Number: INT
					Parameters
						File Handle: HFILE
						String: HSTRING
						Number: DWORD
				Function: VisFileWriteString
					Description: nErrCode VisFileWriteString( hFile, sLine )
					Export Ordinal: 196
					Returns
						Number: INT
					Parameters
						File Handle: HFILE
						String: LPSTR
			Library name: vti21.dll
				ThreadSafe: No
				!
				! *** Visual Toolchest - VTFONTNM.APL
				!
				Function: VisPopulateFontNames
					Description: lNumFonts VisPopulateFontNames( hWndList, nGetFlag )
					Export Ordinal: 266
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: INT
			Library name: vti21.dll
				ThreadSafe: No
				!
				! ***** Visual Toolchest - VTLBX.APL
				!
				! ***** Design-time setting population
				Function: VisPopulatePictureFromProperty
					Description:
					Export Ordinal: 271
					Returns
						String: HSTRING
					Parameters
						Window Handle: HWND
						Window Handle: HWND
				!
				! ***** Font Functions
				Function: VisFontEnum
					Description: nNumFonts VisFontEnum( nGetFlags, sFaceNames[*], nFontTypes[*] )
					Export Ordinal: 202
					Returns
						Number: LONG
					Parameters
						Number: WORD
						String: HARRAY
						Number: HARRAY
				Function: VisFontFree
					Description: bOk VisFontFree( hFont )
					Export Ordinal: 200
					Returns
						Number: INT
					Parameters
						Number: INT
				Function: VisFontGet
					Description: bOk VisFontGet( hFont, sFaceName, nPointSize, nFontFlags )
					Export Ordinal: 201
					Returns
						Boolean: BOOL
					Parameters
						Number: INT
						Receive String: LPHSTRING
						Receive Number: LPINT
						Receive Number: LPWORD
				Function: VisFontLoad
					Description: hFont VisFontLoad( sFaceName, nPointSize, nEnhFlags )
					Export Ordinal: 199
					Returns
						Number: INT
					Parameters
						String: LPSTR
						Number: INT
						Number: WORD
				!
				! ***** List Functions
				Function: VisListAddValue
					Description: nIndex  VisListAddValue (hWnd, sText, nValue )
					Export Ordinal: 78
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						String: LPSTR
						Number: LONG
				Function: VisListArrayPopulate
					Description: nNumItems  VisListArrayPopulate( hWnd, hAryText )
					Export Ordinal: 88
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						String: HARRAY
				Function: VisListArrayPopulateValue
					Description: nNumItems  VisListArrayPopulateValue( hWnd, hAryText, hAryValues )
					Export Ordinal: 89
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						String: HARRAY
						Number: HARRAY
				Function: VisListClearSelection
					Description: bOk  VisListClearSelection( hWnd )
					Export Ordinal: 250
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
				Function: VisListDeleteSelected
					Description: nNumDeleted VisListDeleteSelected( hWnd )
					Export Ordinal: 92
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
				Function: VisListFindString
					Description: nIndex  VisListFindString( hWnd, nIndex, sText )
					Export Ordinal: 86
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: INT
						String: LPSTR
				Function: VisListFindValue
					Description: nIndex VisListFindValue( hWnd, nStartIndex, nValue )
					Export Ordinal: 257
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: LONG
						Number: LONG
				Function: VisListGetDropdownState
					Description: bState  VisListGetDropdownState( hWnd )
					Export Ordinal: 84
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
				Function: VisListGetFocusIndex
					Description: nIndex  VisListGetCaretIndex( hWnd )
					Export Ordinal: 94
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
				Function: VisListGetIndexFromPoint
					Description: nIndex VisListGetIndexFromPoint( hWndList, nXPos, nYPos )
					Export Ordinal: 248
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: INT
						Number: INT
				Function: VisListGetText
					Description: sText  VisListGetText( hWnd, nIndex )
					Export Ordinal: 87
					Returns
						String: HSTRING
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisListGetValue
					Description: nValue  VisListGetValue( hWnd, nIndex )
					Export Ordinal: 80
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisListGetVisibleRange
					Description: nIndex  VisListGetVisibleRange( hWnd, nTop, nBottom )
					Export Ordinal: 82
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Receive Number: LPINT
						Receive Number: LPINT
				Function: VisListInsertValue
					Description: nIndex  VisListInsertValue (hWnd, nIndex, sText, nValue )
					Export Ordinal: 79
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: INT
						String: LPSTR
						Number: LONG
				Function: VisListIsMultiSelect
					Description: bSelect VisListIsMultiSelect( hWnd )
					Export Ordinal: 205
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
				Function: VisListScroll
					Description: nErrCode  VisListScroll( hWnd, nIndex )
					Export Ordinal: 83
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisListSetFocusIndex
					Description: nErrCode  VisListSetCaretIndex( hWnd, nIndex )
					Export Ordinal: 95
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisListSetDropdownState
					Description: bState  VisListSetDropdownState( hWnd, bState )
					Export Ordinal: 85
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Boolean: BOOL
				Function: VisListSetScrollWidth
					Description: nErrCode  VisListSetScrollWidth( hWnd )
					Export Ordinal: 93
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisListSetText
					Description: nErrCode VisListSetText( hWnd, nIndex, sText )
					Export Ordinal: 208
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: INT
						String: LPSTR
				Function: VisListSetValue
					Description: nErrCode  VisListSetValue( hWnd, nIndex, nValue )
					Export Ordinal: 81
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: INT
						Number: LONG
				!
				! ***** List Box Extensions
				Function: VisListDisableItem
					Description: nIndex VisListDisableItem( hWnd, nIndex, nColor )
					Export Ordinal: 108
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: INT
						Number: DWORD
				Function: VisListEnableItem
					Description: nIndex VisListEnableItem( hWnd, nIndex, nColor )
					Export Ordinal: 109
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: INT
						Number: DWORD
				Function: VisListGetFlags
					Description: nItemFlags VisListGetFlags( hWnd, nIndex )
					Export Ordinal: 118
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisListGetStyle
					Description: nStyle VisListGetStyle( hWndList )
					Export Ordinal: 110
					Returns
						Number: DWORD
					Parameters
						Window Handle: HWND
				Function: VisListSetFlags
					Description: nReturn VisListSetFlags( hWnd, nIndex, nItemFlags, bState )
					Export Ordinal: 119
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: INT
						Number: DWORD
						Boolean: BOOL
				Function: VisListSetStyle
					Description:
					Export Ordinal: 96
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: DWORD
						Number: DWORD
				!
				! ***** Color List Box Functions
				Function: VisListAddColor
					Description:
					Export Ordinal: 98
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						String: LPSTR
						Number: DWORD
				Function: VisListAddColorValue
					Description:
					Export Ordinal: 100
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						String: LPSTR
						Number: DWORD
						Number: LONG
				Function: VisListGetColor
					Description:
					Export Ordinal: 102
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisListInsertColor
					Description:
					Export Ordinal: 99
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: INT
						String: LPSTR
						Number: DWORD
				Function: VisListInsertColorValue
					Description:
					Export Ordinal: 101
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: INT
						String: LPSTR
						Number: DWORD
						Number: LONG
				Function: VisListSetColor
					Description:
					Export Ordinal: 97
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
						Number: DWORD
				!
				! ***** Font List Box Functions
				Function: VisListAddFont
					Description:
					Export Ordinal: 174
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						String: LPSTR
						Number: INT
				Function: VisListAddFontValue
					Description:
					Export Ordinal: 175
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						String: LPSTR
						Number: INT
						Number: LONG
				Function: VisListGetFont
					Description: hFont VisListGetFont( hWndList, nIndex )
					Export Ordinal: 176
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisListInsertFont
					Description:
					Export Ordinal: 177
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: INT
						String: LPSTR
						Number: INT
				Function: VisListInsertFontValue
					Description:
					Export Ordinal: 178
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: INT
						String: LPSTR
						Number: INT
						Number: LONG
				Function: VisListSetFont
					Description:
					Export Ordinal: 179
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
						Number: INT
				!
				! ***** Picture List Box Functions
				Function: VisListAddPicture
					Description: lReturn VisListAddPicture( hWnd, sText, hPicNormal, hPicSelect )
					Export Ordinal: 113
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						String: LPSTR
						Number: INT
						Number: INT
				Function: VisListAddPictureValue
					Description: lReturn VisListAddPictureValue( hWnd, sText, hPicNormal, hPicSelect, nValue )
					Export Ordinal: 115
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						String: LPSTR
						Number: INT
						Number: INT
						Number: LONG
				Function: VisListGetPicture
					Description: nErrCode VisListGetPicture( hWnd, nIndex, hPicNormal, hPicSelect )
					Export Ordinal: 151
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: INT
						Receive Number: LPINT
						Receive Number: LPINT
				Function: VisListInsertPicture
					Description: lReturn VisListInsertPicture( hWnd, nIndex, sText, hPicNormal, hPicSelect )
					Export Ordinal: 114
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: INT
						String: LPSTR
						Number: INT
						Number: INT
				Function: VisListInsertPictureValue
					Description: lReturn VisListInsertPictureValue( hWnd, nIndex, sText, hPicNormal, hPicSelect, nValue )
					Export Ordinal: 116
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: INT
						String: LPSTR
						Number: INT
						Number: INT
						Number: LONG
				Function: VisListSetPicture
					Description: lReturn VisListSetPicture( hWnd, nIndex, hPicNormal, hPicSelect )
					Export Ordinal: 117
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
						Number: INT
						Number: INT
				!
				! ***** Outline List Box Functions
				Function: VisListCollapse
					Description: bOk VisListCollapse( hWnd, nIndex )
					Export Ordinal: 143
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisListDeleteChild
					Description: nNumLeft VisListDeleteChild( hWnd, nIndex )
					Export Ordinal: 159
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisListDeleteDescendents
					Description: nNumLeft VisListDeleteDescendents( hWnd, nIndex )
					Export Ordinal: 160
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisListDemote
					Description: bOk VisListDemote( hWnd, nIndex, hpicNormal, hpicSelect )
					Export Ordinal: 161
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
						Number: INT
						Number: INT
				Function: VisListDragDrop
					Description: bOk  VisListDragDrop( hWndSource, nSourceIndex, hWndTarget, nTargetIndex, nDropFlags )
					Export Ordinal: 249
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
						Window Handle: HWND
						Number: INT
						Number: WORD
				Function: VisListEnumChildren
					Description: nNumItems VisListEnumChildren( hItem, hItems[*] )
					Export Ordinal: 155
					Returns
						Number: LONG
					Parameters
						Number: DWORD
						Number: HARRAY
				Function: VisListEnumDescendents
					Description: nNumItems VisListEnumDescendents( hItem, hItems[*] )
					Export Ordinal: 156
					Returns
						Number: LONG
					Parameters
						Number: DWORD
						Number: HARRAY
				Function: VisListExpand
					Description: bOk VisListExpand( hWnd, nIndex )
					Export Ordinal: 144
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisListExpandDescendents
					Description: bOk VisListExpandDescendents( hWnd, nIndex )
					Export Ordinal: 152
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisListFindItemValue
					Description: hItem VisListFindItemValue( hItem, nValue )
					Export Ordinal: 258
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
						Number: LONG
				Function: VisListFreeChild
					Description: bOk  VisListFreeChild( hItemChild )
					Export Ordinal: 146
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
				Function: VisListFreeDescendents
					Description: bOk  VisListFreeDescendents( hItemParent )
					Export Ordinal: 147
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
				Function: VisListGetItemColor
					Description: nColor VisListGetItemColor( hItem )
					Export Ordinal: 251
					Returns
						Number: LONG
					Parameters
						Number: DWORD
				Function: VisListGetItemData
					Description: bOk VisListGetItemData( hItem, sText, nValue, nItemFlags )
					Export Ordinal: 142
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Receive String: LPHSTRING
						Receive Number: LPLONG
						Receive Number: LPDWORD
				Function: VisListGetItemFlags
					Description: nItemFlags VisListGetItemFlags( hItem )
					Export Ordinal: 263
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
				Function: VisListGetItemFont
					Description: hFont VisListGetItemFont( hItem )
					Export Ordinal: 252
					Returns
						Number: INT
					Parameters
						Number: DWORD
				Function: VisListGetItemHandle
					Description: hItem VisListGetItemHandle( hWnd, nIndex )
					Export Ordinal: 141
					Returns
						Number: DWORD
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisListGetItemIndex
					Description: nIndex VisListGetItemIndex( hItem )
					Export Ordinal: 255
					Returns
						Number: INT
					Parameters
						Number: DWORD
				Function: VisListGetItemPicture
					Description: bOk  VisListGetPicture( hItem, hPicNormal, hPicSelect )
					Export Ordinal: 253
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Receive Number: LPINT
						Receive Number: LPINT
				Function: VisListGetItemText
					Description: sText VisListGetItemText( hItem )
					Export Ordinal: 260
					Returns
						String: HSTRING
					Parameters
						Number: DWORD
				Function: VisListGetItemValue
					Description: nValue VisListGetItemValue( hItem )
					Export Ordinal: 259
					Returns
						Number: LONG
					Parameters
						Number: DWORD
				Function: VisListGetLevel
					Description: nLevel VisListGetLevel( hItem )
					Export Ordinal: 203
					Returns
						Number: INT
					Parameters
						Number: DWORD
				Function: VisListGetNextSibling
					Description: hItem VisListGetNextSibling( hItem )
					Export Ordinal: 153
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
				Function: VisListGetParent
					Description: hItem VisListGetParent( hItem )
					Export Ordinal: 140
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
				Function: VisListGetPrevSibling
					Description: hItem VisListGetPrevSibling( hItem )
					Export Ordinal: 154
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
				Function: VisListGetRoot
					Description: hItem VisListGetRoot( hWnd )
					Export Ordinal: 138
					Returns
						Number: DWORD
					Parameters
						Window Handle: HWND
				Function: VisListGetTextRectangle
					Description: bOk VisListGetTextRectangle( hWndTable, nIndex, nTop, nLeft, nBottom, nRight )
					Export Ordinal: 256
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
						Receive Number: LPINT
						Receive Number: LPINT
						Receive Number: LPINT
						Receive Number: LPINT
				Function: VisListLoadChild
					Description: hItem VisListLoadChild( hWnd, hItemParent, hPicNormal, hPicSelect, sText, nValue, nItemFlags )
					Export Ordinal: 137
					Returns
						Number: DWORD
					Parameters
						Window Handle: HWND
						Number: DWORD
						Number: INT
						Number: INT
						String: LPSTR
						Number: LONG
						Number: DWORD
				Function: VisListLoadChildren
					Description: hItem VisListLoadChildren( hWnd, hItemParent, hPicNormal, hPicSelect, sText[*], nValue[*], nItemFlags[*] )
					Export Ordinal: 136
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: DWORD
						Number: INT
						Number: INT
						String: HARRAY
						Number: HARRAY
						Number: HARRAY
				Function: VisListLoadOutline
					Description: hItem VisListLoadOutline( hWnd, sBlob )
					Export Ordinal: 289
					Returns
						Number: DWORD
					Parameters
						Window Handle: HWND
						String: HSTRING
				Function: VisListLoadOutlineFile
					Description: hItem VisListLoadOutlineFile( hWnd, sFileName, hPicParentNormal, hPicParentSelect, hPicChildNormal, hPicChildSelect )
					Export Ordinal: 290
					Returns
						Number: DWORD
					Parameters
						Window Handle: HWND
						String: LPSTR
						Number: INT
						Number: INT
						Number: INT
						Number: INT
				Function: VisListLoadSibling
					Description: hItem VisListLoadSibling( hWnd, hItemBefore, hPicNormal, hPicSelect, sText, nValue, nItemFlags )
					Export Ordinal: 157
					Returns
						Number: DWORD
					Parameters
						Window Handle: HWND
						Number: DWORD
						Number: INT
						Number: INT
						String: LPSTR
						Number: LONG
						Number: DWORD
				Function: VisListMoveDown
					Description: bOk VisListMoveDown( hWnd, nIndex )
					Export Ordinal: 163
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisListMoveUp
					Description: bOk VisListMoveUp( hWnd, nIndex )
					Export Ordinal: 164
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisListPromote
					Description: bOk VisListPromote( hWnd, nIndex, hpicNormal, hpicSelect )
					Export Ordinal: 162
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
						Number: INT
						Number: INT
				Function: VisListSaveOutline
					Description: nErrCode VisListSaveOutline( hWnd, sBlob )
					Export Ordinal: 291
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Receive String: LPHSTRING
				Function: VisListSetIndent
					Description: bOk VisListSetIndent( hWnd, nIndent )
					Export Ordinal: 145
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
				Function: VisListSetItemColor
					Description: bOk VisListSetItemColor( hItem, nColor )
					Export Ordinal: 197
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: DWORD
				Function: VisListSetItemData
					Description: hItem VisListSetItemData( hWnd, hItem, sText, nValue, nItemFlags )
					Export Ordinal: 158
					Returns
						Number: DWORD
					Parameters
						Window Handle: HWND
						Number: DWORD
						String: LPSTR
						Number: LONG
						Number: DWORD
				Function: VisListSetItemFlags
					Description: bOk VisListSetItemFlags( hItem, nItemFlags, bState )
					Export Ordinal: 264
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: DWORD
						Boolean: BOOL
				Function: VisListSetItemFont
					Description: bOk VisListSetItemFont( hItem, hFont )
					Export Ordinal: 198
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
				Function: VisListSetItemPicture
					Description: bOk VisListSetItemPicture( hItem, hPicNormal, hPicSelect )
					Export Ordinal: 148
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
						Number: INT
				Function: VisListSetItemText
					Description: bOk VisListSetItemText( hItem, sText )
					Export Ordinal: 262
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						String: LPSTR
				Function: VisListSetItemValue
					Description: bOk VisListSetItemValue( hItem, nValue )
					Export Ordinal: 261
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: LONG
				Function: VisListSetOutlineRedraw
					Description: bOk  VisListSetOutlineRedraw
					Export Ordinal: 254
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Boolean: BOOL
				Function: VisListShowOutline
					Description: bOk VisListShowOutline( hWnd, nLevel )
					Export Ordinal: 139
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
			Library name: vti21.dll
				ThreadSafe: No
				!
				! *** Visual Toolchest - VTLSTVW.APL
				!
				! *** Do not call these functions directly, use the member functions.
				Function: VisLVGetListView
					Description:
					Export Ordinal: 331
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
				Function: VisLVGetStyle
					Description:
					Export Ordinal: 332
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
				Function: VisLVSetStyle
					Description:
					Export Ordinal: 333
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
						Number: DWORD
						Boolean: BOOL
				Function: VisLVGetBkColor
					Description:
					Export Ordinal: 334
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
				Function: VisLVSetBkColor
					Description:
					Export Ordinal: 335
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: DWORD
				Function: VisLVGetItemCount
					Description:
					Export Ordinal: 336
					Returns
						Number: INT
					Parameters
						Number: DWORD
				Function: VisLVGetNextItem
					Description:
					Export Ordinal: 337
					Returns
						Number: INT
					Parameters
						Number: DWORD
						Number: INT
						Number: INT
				Function: VisLVGetItemRect
					Description:
					Export Ordinal: 338
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
						structPointer
							Receive Number: INT
							Receive Number: INT
							Receive Number: INT
							Receive Number: INT
						Number: DWORD
				Function: VisLVSetItemPosition
					Description:
					Export Ordinal: 339
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
						Number: LONG
						Number: LONG
				Function: VisLVGetItemPosition
					Description:
					Export Ordinal: 340
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
						structPointer
							Receive Number: INT
							Receive Number: INT
				Function: VisLVGetStringWidth
					Description:
					Export Ordinal: 341
					Returns
						Number: INT
					Parameters
						Number: DWORD
						String: LPSTR
				Function: VisLVGetColumn
					Description:
					Export Ordinal: 342
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
						Receive String: LPHSTRING
						Receive Number: LPINT
						Receive Number: LPINT
				Function: VisLVSetColumn
					Description:
					Export Ordinal: 343
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
						Number: DWORD
						String: LPSTR
						Number: INT
						Number: INT
				Function: VisLVGetViewRect
					Description:
					Export Ordinal: 344
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						structPointer
							Receive Number: INT
							Receive Number: INT
							Receive Number: INT
							Receive Number: INT
				Function: VisLVGetTextColor
					Description:
					Export Ordinal: 345
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
				Function: VisLVSetTextColor
					Description:
					Export Ordinal: 346
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: DWORD
				Function: VisLVGetTextBkColor
					Description:
					Export Ordinal: 347
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
				Function: VisLVSetTextBkColor
					Description:
					Export Ordinal: 348
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: DWORD
				Function: VisLVGetTopIndex
					Description:
					Export Ordinal: 349
					Returns
						Number: INT
					Parameters
						Number: DWORD
				Function: VisLVGetCountPerPage
					Description:
					Export Ordinal: 350
					Returns
						Number: INT
					Parameters
						Number: DWORD
				Function: VisLVGetOrigin
					Description:
					Export Ordinal: 351
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						structPointer
							Receive Number: INT
							Receive Number: INT
				Function: VisLVGetItemState
					Description:
					Export Ordinal: 352
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
						Number: INT
						Number: DWORD
				Function: VisLVSetItemState
					Description:
					Export Ordinal: 353
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
						Number: DWORD
						Number: DWORD
				Function: VisLVGetItem
					Description:
					Export Ordinal: 354
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
						Number: INT
						Receive String: LPHSTRING
						Receive Number: LPINT
						Receive Number: LPDWORD
				Function: VisLVSetItem
					Description:
					Export Ordinal: 355
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
						Number: INT
						Number: DWORD
						String: LPSTR
						Number: INT
						Number: DWORD
				Function: VisLVGetSelectedCount
					Description:
					Export Ordinal: 356
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
				Function: VisLVInsertItem
					Description:
					Export Ordinal: 357
					Returns
						Number: INT
					Parameters
						Number: DWORD
						Number: INT
						String: LPSTR
						Number: LONG
						Number: INT
				Function: VisLVDeleteItem
					Description:
					Export Ordinal: 358
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
				Function: VisLVDeleteAllItems
					Description:
					Export Ordinal: 359
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
				Function: VisLVFindItem
					Description:
					Export Ordinal: 360
					Returns
						Number: INT
					Parameters
						Number: DWORD
						Number: DWORD
						String: LPSTR
						Number: INT
				Function: VisLVHitTest
					Description:
					Export Ordinal: 361
					Returns
						Number: INT
					Parameters
						Number: DWORD
						Number: LONG
						Number: LONG
						Receive Number: LPDWORD
				Function: VisLVEnsureVisible
					Description:
					Export Ordinal: 362
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
						Boolean: BOOL
				Function: VisLVScroll
					Description:
					Export Ordinal: 363
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						structPointer
							Number: INT
							Number: INT
				Function: VisLVArrange
					Description:
					Export Ordinal: 364
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: DWORD
				Function: VisLVColumnsAssign
					Description:
					Export Ordinal: 365
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						String: HARRAY
						Number: HARRAY
						Number: HARRAY
						Number: INT
				Function: VisLVGetSortColumn
					Description:
					Export Ordinal: 366
					Returns
						Number: INT
					Parameters
						Number: DWORD
				Function: VisLVGetSortOrder
					Description:
					Export Ordinal: 370
					Returns
						Number: INT
					Parameters
						Number: DWORD
				Function: VisLVSetSortColumn
					Description:
					Export Ordinal: 367
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
				Function: VisLVSetSortOrder
					Description:
					Export Ordinal: 376
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
				Function: VisLVSortItems
					Description:
					Export Ordinal: 368
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
				Function: VisLVImageAdd
					Description:
					Export Ordinal: 371
					Returns
						Number: INT
					Parameters
						Number: DWORD
						Number: DWORD
						Number: DWORD
				Function: VisLVImageCountGet
					Description:
					Export Ordinal: 372
					Returns
						Number: INT
					Parameters
						Number: DWORD
				Function: VisLVImageRemove
					Description:
					Export Ordinal: 373
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
				Function: VisLVImageRemoveAll
					Description:
					Export Ordinal: 374
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
				Function: VisLVImageReplace
					Description:
					Export Ordinal: 375
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
						Number: DWORD
						Number: DWORD
				!
				! *** cListViewDropDown Exports
				Function: VisLVCmbGetListView
					Description:
					Export Ordinal: 369
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
				Function: VisLVCmbGetEditable
					Description:
					Export Ordinal: 379
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
				Function: VisLVCmbSetEditable
					Description:
					Export Ordinal: 380
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Boolean: BOOL
				Function: VisLVCmbSetListSize
					Description:
					Export Ordinal: 381
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: DWORD
						Number: DWORD
			Library name: vti21.dll
				ThreadSafe: No
				!
				! ***** Visual Toolchest - VTMENU.APL
				!
				! ***** Menu functions
				Function: VisMenuCheck
					Description: bOk VisMenuCheck( hMenu, nPos )
					Export Ordinal: 129
					Returns
						Boolean: BOOL
					Parameters
						Number: INT
						Number: INT
				Function: VisMenuDelete
					Description: bOk VisMenuDelete( hWnd, hMenu, nPos )
					Export Ordinal: 209
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
						Number: INT
				Function: VisMenuDisable
					Description: bOk VisMenuDisable( hMenu, nPos )
					Export Ordinal: 240
					Returns
						Boolean: BOOL
					Parameters
						Number: INT
						Number: INT
				Function: VisMenuEnable
					Description: bOk VisMenuSetEnable( hMenu, nPos )
					Export Ordinal: 132
					Returns
						Boolean: BOOL
					Parameters
						Number: INT
						Number: INT
				Function: VisMenuGetCount
					Description: nCount VisMenuGetCount( hMenu )
					Export Ordinal: 239
					Returns
						Number: LONG
					Parameters
						Number: INT
				Function: VisMenuGetHandle
					Description: hMenu VisMenuGetHandle( hWnd )
					Export Ordinal: 127
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
				Function: VisMenuGetPopupHandle
					Description: hMenu VisMenuGetPopupHandle( hMenu )
					Export Ordinal: 128
					Returns
						Number: INT
					Parameters
						Number: INT
						Number: INT
				Function: VisMenuGetSystemHandle
					Description: hMenu VisMenuGetSystemHandle( hWnd )
					Export Ordinal: 130
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
				Function: VisMenuGetText
					Description: sMenuText VisMenuGetText( hWnd, hMenu, nPos )
					Export Ordinal: 210
					Returns
						String: HSTRING
					Parameters
						Window Handle: HWND
						Number: INT
						Number: INT
				Function: VisMenuIsChecked
					Description: bOk VisMenuIsChecked( hMenu, nPos )
					Export Ordinal: 131
					Returns
						Boolean: BOOL
					Parameters
						Number: INT
						Number: INT
				Function: VisMenuIsEnabled
					Description: bOk VisMenuIsEnabled( hMenu, nPos )
					Export Ordinal: 133
					Returns
						Boolean: BOOL
					Parameters
						Number: INT
						Number: INT
				Function: VisMenuInsert
					Description: nMenuID VisMenuInsert( hWnd, hMenu, nPos, sMenuText, nMenuFlags )
					Export Ordinal: 211
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: INT
						Number: INT
						String: LPSTR
						Number: WORD
				Function: VisMenuInsertFont
					Description: nMenuID VisMenuInsertFont( hWnd, hMenu, nPos, hFont, sText )
					Export Ordinal: 247
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: INT
						Number: INT
						Number: INT
						String: LPSTR
				Function: VisMenuInsertPicture
					Description: nMenuID VisMenuInsertPicture( hWnd, hMenu, nPos, hPicNormal, hPicSelect, sText )
					Export Ordinal: 244
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: INT
						Number: INT
						Number: INT
						Number: INT
						String: LPSTR
				Function: VisMenuSetFont
					Description: bOk VisMenuSetFont( hWnd, hMenu, nPos, hFont, sText )
					Export Ordinal: 246
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
						Number: INT
						Number: INT
						String: LPSTR
				Function: VisMenuSetPicture
					Description: bOk VisMenuSetPicture( hWnd, hMenu, nPos, hPicNormal, hPicSelect, sText )
					Export Ordinal: 245
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
						Number: INT
						Number: INT
						Number: INT
						String: LPSTR
				Function: VisMenuSetText
					Description: bOk VisMenuSetText( hWnd, hMenu, nPos, sMenuText )
					Export Ordinal: 212
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
						Number: INT
						String: LPSTR
				Function: VisMenuUncheck
					Description: bOk VisMenuUncheck( hMenu, nPos )
					Export Ordinal: 238
					Returns
						Boolean: BOOL
					Parameters
						Number: INT
						Number: INT
			Library name: vti21.dll
				ThreadSafe: No
				!
				! ***** Visual Toolchest - VTMETER.APL
				!
				! ***** Meter functions
				Function: VisWinSetMeter
					Description: nErrCode VisWinSetMeter( hWnd, nPercent )
					Export Ordinal: 44
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: INT
			Library name: vti21.dll
				ThreadSafe: No
				!
				! ***** Visual Toolchest - VTMISC.APL
				!
				! ***** Miscellaneous functions
				Function: VisGetSystemMetrics
					Description: nValue VisGetSystemMetrics( nIndex )
					Export Ordinal: 57
					Returns
						Number: INT
					Parameters
						Number: INT
				Function: VisGetVersion
					Description: sVersion VisGetVersion( )
					Export Ordinal: 122
					Returns
						String: HSTRING
					Parameters
				Function: VisGetWinFlags
					Description: nFlags VisGetWinFlags()
					Export Ordinal: 58
					Returns
						Number: DWORD
					Parameters
				Function: VisGetWinVersion
					Description: nVersion VisGetWinVersion( )
					Export Ordinal: 59
					Returns
						Number: NUMBER
					Parameters
				Function: VisSendMsgString
					Description: nResult VisSendMsgString( hWnd, nMessage, wParam, lParam )
					Export Ordinal: 216
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: INT
						Number: WORD
						String: LPSTR
				Function: VisWaitCursor
					Description: VisWaitCursor( bState )
					Export Ordinal: 11
					Returns
					Parameters
						Number: INT
				!
				! ***** Number Functions
				Function: VisNumberChoose
					Description: nReturn VisNumberChoose( bExpression, nTrue, nFalse )
					Export Ordinal: 242
					Returns
						Number: NUMBER
					Parameters
						Boolean: BOOL
						Number: NUMBER
						Number: NUMBER
				Function: VisNumberBitClear
					Description: nResult VisNumberBitClear( nValue, nBitMask )
					Export Ordinal: 120
					Returns
						Number: DWORD
					Parameters
						Receive Number: LPDWORD
						Number: DWORD
				Function: VisNumberBitSet
					Description: nResult VisNumberBitSet( nValue, nBitMask )
					Export Ordinal: 121
					Returns
						Number: DWORD
					Parameters
						Receive Number: LPDWORD
						Number: DWORD
				Function: VisNumberHighByte
					Description: nHighByte  VisNumberHighByte( nNumber )
					Export Ordinal: 54
					Returns
						Number: BYTE
					Parameters
						Number: WORD
				Function: VisNumberLowByte
					Description: nLowByte  VisNumberLowByte( nNumber )
					Export Ordinal: 55
					Returns
						Number: BYTE
					Parameters
						Number: WORD
				Function: VisNumberMakeLong
					Description: nLong  VisNumberMakeLong( nLowWord, nHighWord )
					Export Ordinal: 56
					Returns
						Number: DWORD
					Parameters
						Number: WORD
						Number: WORD
				!
				! ***** Profile Functions
				Function: VisProfileEnumStrings
					Description:
					Export Ordinal: 14
					Returns
						Number: LONG
					Parameters
						String: LPSTR
						String: LPSTR
						String: HARRAY
				Function: VisProfileDelete
					Description:
					Export Ordinal: 15
					Returns
						Boolean: BOOL
					Parameters
						String: LPSTR
						String: LPSTR
						String: LPSTR
			Library name: vti21.dll
				ThreadSafe: No
				!
				! ***** Visual Toolchest - VTMSGBOX.APL
				!
				! ***** MessageBox functions
				Function: VisMessageFreeButton
					Description: bOk VisFreeButton( hBtn )
					Export Ordinal: 237
					Returns
						Boolean: BOOL
					Parameters
						Number: INT
				Function: VisMessageLoadButton
					Description: hBtn VisLoadButton( sLabel, nReturn )
					Export Ordinal: 215
					Returns
						Number: INT
					Parameters
						String: LPSTR
						Number: INT
				Function: VisMessageBox
					Description: nReturn VisMessageBox( sMsgText, sCaption, hPicIcon, hBtnHandles[*], nNumButtons )
					Export Ordinal: 214
					Returns
						Number: INT
					Parameters
						String: LPSTR
						String: LPSTR
						Number: DWORD
						Number: HARRAY
						Number: INT
				Function: VisMessageSetBkgdColor
					Description: bOk VisSetMessageBkgdColor( nColor )
					Export Ordinal: 217
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
			Library name: vti21.dll
				ThreadSafe: No
				!
				! *** Visual Toolchest - VTPAL.APL
				!
				! *** cColorPalette Exports
				Function: VisPalColorGet
					Description:
					Export Ordinal: 299
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
						Number: INT
				Function: VisPalColorSet
					Description:
					Export Ordinal: 300
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
						Number: INT
						Number: DWORD
				Function: VisPalColorMainSet
					Description:
					Export Ordinal: 301
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
						Number: INT
						Number: DWORD
				Function: VisPalColorMainSetAll
					Description:
					Export Ordinal: 302
					Returns
						Number: INT
					Parameters
						Number: DWORD
						Number: HARRAY
				Function: VisPalColorPaletteGet
					Description:
					Export Ordinal: 303
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
						Number: INT
						Number: INT
				Function: VisPalColorPaletteGetAll
					Description:
					Export Ordinal: 304
					Returns
						Number: INT
					Parameters
						Number: DWORD
						Number: INT
						Number: HARRAY
				Function: VisPalFocusGet
					Description:
					Export Ordinal: 305
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Receive Number: LPINT
						Receive Number: LPINT
				Function: VisPalFocusSet
					Description:
					Export Ordinal: 306
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
						Number: INT
				Function: VisPalMenuAdd
					Description:
					Export Ordinal: 307
					Returns
						Number: INT
					Parameters
						Number: DWORD
						String: LPSTR
						Number: WORD
				Function: VisPalMenuClear
					Description:
					Export Ordinal: 308
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
				Function: VisPalMenuGet
					Description:
					Export Ordinal: 309
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
						Receive String: LPHSTRING
						Receive Number: LPWORD
				Function: VisPalMenuGetAll
					Description:
					Export Ordinal: 310
					Returns
						Number: INT
					Parameters
						Number: DWORD
						String: HARRAY
						Number: HARRAY
				Function: VisPalMenuInsert
					Description:
					Export Ordinal: 311
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
						String: LPSTR
						Number: WORD
				Function: VisPalMenuRemove
					Description:
					Export Ordinal: 312
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
				Function: VisPalMenuSet
					Description:
					Export Ordinal: 313
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Number: INT
						String: LPSTR
						Number: WORD
				Function: VisPalMenuSetAll
					Description:
					Export Ordinal: 314
					Returns
						Number: INT
					Parameters
						Number: DWORD
						String: HARRAY
						Number: HARRAY
				Function: VisPalMRUClear
					Description:
					Export Ordinal: 315
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
				Function: VisPalMRUMaxGet
					Description:
					Export Ordinal: 316
					Returns
						Number: INT
					Parameters
						Number: DWORD
				Function: VisPalMRUMaxSet
					Description:
					Export Ordinal: 317
					Returns
						Number: INT
					Parameters
						Number: DWORD
						Number: INT
				Function: VisPalStyleGet
					Description:
					Export Ordinal: 318
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
				Function: VisPalStyleSet
					Description:
					Export Ordinal: 319
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
						Number: DWORD
						Boolean: BOOL
				!
				! *** cColorPaletteDropDown Exports
				Function: VisPalCmbPaletteGet
					Description:
					Export Ordinal: 320
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
				Function: VisPalCmbStyleGet
					Description:
					Export Ordinal: 321
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
				Function: VisPalCmbStyleSet
					Description:
					Export Ordinal: 322
					Returns
						Number: DWORD
					Parameters
						Number: DWORD
						Number: DWORD
						Boolean: BOOL
			Library name: vti21.dll
				ThreadSafe: No
			Library name: vti21.dll
				ThreadSafe: No
				!
				! *** Visual Toolchest - VTSPLIT.APL
				!
				! *** cSplitter functions
						NOTE: Do not call these directly, use the member functions.
				Function: VisSplitGetOrientation
					Description:
					Export Ordinal: 326
					Returns
						Number: INT
					Parameters
						Number: DWORD
				Function: VisSplitMoveToDragPos
					Description:
					Export Ordinal: 327
					Returns
						Number: INT
					Parameters
						Number: DWORD
				Function: VisSplitResizeObjects
					Description:
					Export Ordinal: 328
					Returns
					Parameters
						Number: DWORD
				Function: VisSplitSetChild
					Description:
					Export Ordinal: 329
					Returns
						Window Handle: HWND
					Parameters
						Number: DWORD
						Boolean: BOOL
						Window Handle: HWND
				Function: VisSplitTileToParent
					Description:
					Export Ordinal: 330
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
			Library name: vti21.dll
				ThreadSafe: No
				!
				! ***** Visual Toolchest - VTSTR.APL
				!
				! ***** String functions
				Function: VisStrChoose
					Description: sReturn VisStrChoose( bExpression, sTrue, sFalse )
					Export Ordinal: 243
					Returns
						String: HSTRING
					Parameters
						Boolean: BOOL
						String: HSTRING
						String: HSTRING
				Function: VisStrExpand
					Description: sReturn VisStrExpand( sTemplate, hAryStrings )
					Export Ordinal: 91
					Returns
						String: HSTRING
					Parameters
						String: LPSTR
						String: HARRAY
				Function: VisStrFind
					Description: sString VisStrFind( hStrTable, sContext )
					Export Ordinal: 218
					Returns
						String: HSTRING
					Parameters
						Number: INT
						String: LPSTR
				Function: VisStrFreeTable
					Description: bOk VisStrFreeTable( hStrTable )
					Export Ordinal: 219
					Returns
						Boolean: BOOL
					Parameters
						Number: INT
				Function: VisStrLeftTrim
					Description: sReturn VisStrLeftTrim( sSource )
					Export Ordinal: 123
					Returns
						String: HSTRING
					Parameters
						String: LPSTR
				Function: VisStrLoadTable
					Description: hStrTable VisStrLoadTable( sFileName )
					Export Ordinal: 220
					Returns
						Number: INT
					Parameters
						String: LPSTR
				Function: VisStrPad
					Description: sReturn VisStrPad( sSource, nSize )
					Export Ordinal: 8
					Returns
						String: HSTRING
					Parameters
						String: LPSTR
						Number: INT
				Function: VisStrProper
					Description: sReturn VisStrProper( sSource )
					Export Ordinal: 63
					Returns
						String: HSTRING
					Parameters
						String: LPSTR
				Function: VisStrRightTrim
					Description: sReturn VisStrRightTrim( sSource )
					Export Ordinal: 124
					Returns
						String: HSTRING
					Parameters
						String: LPSTR
				Function: VisStrScanReverse
					Description: nPos VisStrScanReverse( sSource, nPos, sSearch )
					Export Ordinal: 10
					Returns
						Number: INT
					Parameters
						String: LPSTR
						Number: INT
						String: LPSTR
				Function: VisStrSubstitute
					Description: sReturn VisStrSubstitute( sSource, sSearch, sReplace )
					Export Ordinal: 62
					Returns
						String: HSTRING
					Parameters
						String: LPSTR
						String: LPSTR
						String: LPSTR
				Function: VisStrTrim
					Description: sReturn VisStrTrim( sSource )
					Export Ordinal: 6
					Returns
						String: HSTRING
					Parameters
						String: LPSTR
			Library name: vti21.dll
				ThreadSafe: No
				!
				! ***** Visual Toolchest - VTTBLWIN.APL
				!
				! ***** Table Window functions
				Function: VisTblAllRows
					Description: bOk VisTblAllRows( hWndTable, nFlagsOn, nFlagsOff )
					Export Ordinal: 221
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: WORD
						Number: WORD
				Function: VisTblAutoSizeColumn
					Description: bOk VisTblFitColumn( hWndTable, hWndColumn )
					Export Ordinal: 222
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Window Handle: HWND
				Function: VisTblClearColumnSelection
					Description: bOk VisTblClearColumnSelection
					Export Ordinal: 228
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
				Function: VisTblFindDateTime
					Description: nRow VisTblFindDateTime( hWndTable, nStartRow, hWndColumn, dtDateTime )
					Export Ordinal: 223
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: LONG
						Window Handle: HWND
						Date/Time: DATETIME
				Function: VisTblFindNumber
					Description: nRow VisTblFindNumber( hWndTable, nStartRow, hWndColumn, nNumber )
					Export Ordinal: 224
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: LONG
						Window Handle: HWND
						Number: NUMBER
				Function: VisTblFindString
					Description: nRow VisTblFindString( hWndTable, nStartRow, hWndColumn, sString )
					Export Ordinal: 225
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: LONG
						Window Handle: HWND
						String: LPSTR
				Function: VisTblGetCell
					Description: sText VisTblGetCell( hWndTable, nRow, hWndColumn )
					Export Ordinal: 226
					Returns
						String: HSTRING
					Parameters
						Window Handle: HWND
						Number: LONG
						Window Handle: HWND
				Function: VisTblGetColumnTitle
					Description: sTitle VisTblGetColumnTitle
					Export Ordinal: 227
					Returns
						String: HSTRING
					Parameters
						Window Handle: HWND
				Function: VisTblSetRowColor
					Description: bOk VisTblSetRowColor( hWndTable, nRow, nColor )
					Export Ordinal: 230
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: LONG
						Number: DWORD
				Function: VisTblSetRowPicture
					Description: bOk VisTblSetRowPicture( hWndTable, nRowFlag, hPic )
					Export Ordinal: 229
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: WORD
						Number: INT
			Library name: vti21.dll
				ThreadSafe: No
				!
				! ***** Visual Toolchest - VTWIN.APL
				!
				! ***** Window functions
				Function: VisWinClearAllFields
					Description: nNumCleared VisWinClearAllFields( hWndParent )
					Export Ordinal: 75
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
				Function: VisWinClearAllEditFlags
					Description: nNumCleared VisWinClearAllEditFlags( hWndParent )
					Export Ordinal: 76
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
				Function: VisWinEnumProps
					Description:
					Export Ordinal: 72
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						String: HARRAY
						Number: HARRAY
				Function: VisWinFreeAccelerator
					Description: bOk VisWinFreeAccelerator( hAcc )
					Export Ordinal: 213
					Returns
						Boolean: BOOL
					Parameters
						Number: INT
				Function: VisWinGetFlags
					Description: nWinFlags VisWinGetFlags( hWnd )
					Export Ordinal: 231
					Returns
						Number: DWORD
					Parameters
						Window Handle: HWND
				Function: VisWinGetHandle
					Description: hWnd VisWinGetHandle( hWndParent, sContext, nType )
					Export Ordinal: 77
					Returns
						Window Handle: HWND
					Parameters
						Window Handle: HWND
						String: LPSTR
						Number: DWORD
				Function: VisWinGetProp
					Description:
					Export Ordinal: 69
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						String: LPSTR
				Function: VisWinGetStyle
					Description:
					Export Ordinal: 68
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
				Function: VisWinGetText
					Description: sText VisWinGetText( hWnd )
					Export Ordinal: 204
					Returns
						String: HSTRING
					Parameters
						Window Handle: HWND
				Function: VisWinIsChild
					Description:
					Export Ordinal: 64
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Window Handle: HWND
				Function: VisWinIsMaximized
					Description:
					Export Ordinal: 65
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
				Function: VisWinIsMinimized
					Description:
					Export Ordinal: 66
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
				Function: VisWinIsRequiredFieldNull
					Description: hWnd VisWinIsRequiredFieldNull( hWndParent )
					Export Ordinal: 232
					Returns
						Window Handle: HWND
					Parameters
						Window Handle: HWND
				Function: VisWinIsRestored
					Description:
					Export Ordinal: 125
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
				Function: VisWinIsWindow
					Description:
					Export Ordinal: 67
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
				Function: VisWinLoadAccelerator
					Description: hAcc VisWinLoadAccelerator( hWndNotify, uMsg, nKeyDownState, wVirtualKey, lValue )
					Export Ordinal: 234
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: INT
						Number: INT
						Number: WORD
						Number: LONG
				Function: VisWinMove
					Description: bOk VisWinMove( hWnd, nLeft, nTop, nWidth, nHeight )
					Export Ordinal: 233
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
						Number: INT
						Number: INT
						Number: INT
				Function: VisWinRemoveProp
					Description:
					Export Ordinal: 71
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						String: LPSTR
				Function: VisWinSetFlags
					Description: bOk VisWinSetFlags( hWnd, nWinFlags, bState )
					Export Ordinal: 235
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: DWORD
						Boolean: BOOL
				Function: VisWinSetProp
					Description:
					Export Ordinal: 70
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						String: LPSTR
						Number: WORD
				Function: VisWinSetStyle
					Description: bOk VisWinSetStyle( hWnd, nStyle, bState )
					Export Ordinal: 12
					Returns
						Number: INT
					Parameters
						Window Handle: HWND
						Number: DWORD
						Boolean: BOOL
				Function: VisWinSetTabOrder
					Description: bOk VisWinSetTabOrder( hWnd, hWndInsertAfter )
					Export Ordinal: 74
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Window Handle: HWND
				Function: VisWinShow
					Description: bOk VisWinShow( hWnd, nShowCmd )
					Export Ordinal: 126
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: INT
		Constants
.data CCDATA
0000: 3000000000000000 0000000000000000 00000000
.enddata
.data CCSIZE
0000: 1400
.enddata
			System
				! Low level Tab frame messages.  Processing these messages may change the default behavior of 
						the tab frame.
				!
				!
				! ***** Visual Toolchest - VTARRAY.APL 
				!
				! ***** Data Types
				Number: DT_Handle       = 0x0100
				!
				! ***** Sort Flags
				Number: SORT_Ascending  = 0
				Number: SORT_Descending = 1
				!
				! *** Visual Toolchest - VTCAL.APL
				!
				! *** Notification messages
				Number: CALN_ErrSpace      = -1
				Number: CALN_DateChanged   = 1
				Number: CALN_DateFinished  = 2
				Number: CALN_Scroll        = 3
				!
				! *** Styles
				Number: CAL_AlternateButtons = 0x00001000
				Number: CAL_EnableButtons    = 0x00000004
				Number: CAL_EnableKeyboard   = 0x00000008
				Number: CAL_EtchedLook       = 0x00000010
				Number: CAL_MultiSelect      = 0x00000020
				Number: CAL_SelectExtra      = 0x00000040
				Number: CAL_SelectSpecial    = 0x00000080
				Number: CAL_ShowExtra        = 0x00000100
				Number: CAL_ShowFocus        = 0x00000200
				Number: CAL_ShowGrid         = 0x00000400
				Number: CAL_ShowSpecial      = 0x00000800
				!
				! *** Color Roles
				Number: COLOR_CAL_BackExtra = 2
				Number: COLOR_CAL_BackLabel = 3
				Number: COLOR_CAL_ForeDays  = 10
				Number: COLOR_CAL_ForeExtra = 11
				Number: COLOR_CAL_ForeMonth = 13
				!
				! *** Special Rule Types
				Number: SPECIAL_Unset      = 0
				Number: SPECIAL_OneTime    = 1
				Number: SPECIAL_Weekly     = 2
				Number: SPECIAL_MonthlyDOM = 3
				Number: SPECIAL_MonthlyDOW = 4
				Number: SPECIAL_Yearly     = 5
				Number: SPECIAL_YearlyDOW  = 6
				!
				! *** Special Rule WeekDays
				Number: DAY_Unset     = 0
				Number: DAY_Sunday    = 1
				Number: DAY_Monday    = 2
				Number: DAY_Tuesday   = 3
				Number: DAY_Wednesday = 4
				Number: DAY_Thursday  = 5
				Number: DAY_Friday    = 6
				Number: DAY_Saturday  = 7
				!
				! *** Special Day Sequences
				Number: SEQ_Unset  = 0
				Number: SEQ_First  = 1
				Number: SEQ_Second = 2
				Number: SEQ_Third  = 3
				Number: SEQ_Fourth = 4
				Number: SEQ_Last   = 5
				!
				! *** Visual Toolchest - VTCOMDLG.APL
				!
				! *** Desktop constants
				Number: DESKTOP_Root                = -1
				Number: DESKTOP_MyComputer          = -2
				Number: DESKTOP_NetworkNeighborhood = -3
				!
				! ***** Visual Toolchest - VTCOMM.APL
				!
				! ***** General constants
				String: CAPTION_ErrorHandler      = 'Visual Toolchest'
				! *** Removed VTSTRING_Null; use Centura's STRING_Null instead.  BLG (5/1/96)
				Number: hPicNull                  = 0
				String: VT_DLLName                = 'vti21.dll'
				!
				! ***** Error action codes
				Number: ACTION_Retry              = 1
				Number: ACTION_Abort              = 2
				!
				! ***** Keystate flags
				Number: KS_Down                   = 0x8000  ! *** Extended to WORD size to fix.  BLG (12/7/95)
				Number: KS_LockOn                 = 0x01
				!
				!
				! ***** Messages
				Number: VTM_Base                  = 0x6000
				Number: VTM_Click                 = VTM_Base + 3
				Number: VTM_Destroy               = VTM_Base + 4
				Number: VTM_Populate              = VTM_Base + 5
				Number: VTM_Accelerator           = VTM_Base + 6
				Number: VTM_MenuSelect            = VTM_Base + 7
				Number: VTM_ControlCreate         = VTM_Base + 8
				Number: VTM_OutlineCornerClick    = VTM_Base + 9
				Number: VTM_CreateComplete        = VTM_Base + 10
				! ! ***Message returning Column header clicked
				Number: VTM_LVColumnClick        = VTM_Base + 14
				!
				! ***** Remaps of WM_* messages
				Number: VTM_Create                = 0x0081
				Number: VTM_Char                  = 0x0102
				Number: VTM_Enable                = 0x000a
				Number: VTM_EraseBkgnd            = 0x0014
				Number: VTM_KeyDown               = 0x0100
				Number: VTM_KeyUp                 = 0x0101
				Number: VTM_LeftClick             = 0x0202
				Number: VTM_LeftDoubleClick       = 0x0203
				Number: VTM_RightClick            = 0x0205
				Number: VTM_RightDoubleClick      = 0x0206
				Number: VTM_MiddleClick           = 0x0208
				Number: VTM_MiddleDoubleClick     = 0x0209
				Number: VTM_Size                  = 0x0005
				!
				! ***** Edit control messages
				Number: EM_SetReadOnly            = 0x00cf  ! *** Note the NEW value under Win32.
				!
				! ***** Generic Notification Messages
				Number: NM_First                  = 0xffff  ! *** NOTE: This should be 0xffffffff, when Centura supports 32-bit wParams.  BLG (2/14/96)
				Number: NM_OutOfMemory            = NM_First - 0
				Number: NM_Click                  = NM_First - 1
				Number: NM_DoubleClick            = NM_First - 2
				Number: NM_Return                 = NM_First - 3
				Number: NM_RightClick             = NM_First - 4
				Number: NM_RightDoubleClick       = NM_First - 5
				Number: NM_SetFocus               = NM_First - 6
				Number: NM_KillFocus              = NM_First - 7
				!
				! ***** Picture flags (see VisPicLoad())
				Number: PIC_LoadSWinStr           = 0x0100
				Number: PIC_LoadResource          = 0x0200
				Number: PIC_LoadFile              = 0x0400
				Number: PIC_LoadSWinRes           = 0x0800
				Number: PIC_LoadSmallIcon         = 0x1000
				Number: PIC_LoadLargeIcon         = 0x2000
				!
				! ***** Picture names (these pictures are in the VT DLL)
				String: VTPIC_BookClosed          = 'bkclosed'
				String: VTPIC_BookOpen            = 'bkopen'
				String: VTPIC_BookShelf2          = 'bkshelf2'
				String: VTPIC_BookShelf3          = 'bkshelf3'
				String: VTPIC_CheckBlack          = 'chkblk'
				String: VTPIC_CheckWhite          = 'chkwht'
				String: VTPIC_Desktop             = 'desktop'
				String: VTPIC_DiamondBlackClosed  = 'diablkc'
				String: VTPIC_DiamondBlackOpen    = 'diablko'
				String: VTPIC_DiamondWhiteClosed  = 'diawhtc'
				String: VTPIC_DiamondWhiteOpen    = 'diawhto'
				String: VTPIC_DriveCDROM          = 'drvcd2'
				String: VTPIC_DriveCDROM2         = 'drvcd3'
				String: VTPIC_DriveFloppy         = 'drvflop2'
				String: VTPIC_DriveFixed          = 'drvhard2'
				String: VTPIC_DriveNetwork        = 'drvnet2'
				String: VTPIC_DriveNetworkX       = 'drvnetx'
				String: VTPIC_DriveRAM            = 'drvram2'
				String: VTPIC_Empty               = 'empty'
				String: VTPIC_FileAllOther        = 'fileall'
				String: VTPIC_FileDocuments       = 'filedoc'
				String: VTPIC_FilePrograms        = 'fileprog'
				String: VTPIC_FileSystem          = 'filesys'
				String: VTPIC_Folder              = 'fdr'
				String: VTPIC_Folder2             = 'fdr'
				String: VTPIC_FolderCur           = 'fdrcur'
				String: VTPIC_FolderCurMinus      = 'fdrcurm'
				String: VTPIC_FolderCurPlus       = 'fdrcurp'
				String: VTPIC_FolderMinus         = 'fdrmnus'
				String: VTPIC_FolderOpen          = 'fdropen'
				String: VTPIC_FolderOpen2         = 'fdropen'
				String: VTPIC_FolderPlus          = 'fdrplus'
				String: VTPIC_FontPrinter         = 'fonprtr'
				String: VTPIC_FontTrueType        = 'fontrtyp'
				String: VTPIC_MinusDark           = 'minusdk'
				String: VTPIC_MinusLight          = 'minuslt'
				String: VTPIC_MinusWhite          = 'minuswht'
				String: VTPIC_MyComputer          = 'mycomp'
				String: VTPIC_NetworkNeighborhood = 'netneigh'
				String: VTPIC_PlusDark            = 'plusdk'
				String: VTPIC_PlusLight           = 'pluslt'
				String: VTPIC_PlusWhite           = 'pluswht'
				String: VTPIC_PrevDirectory       = 'prevdir'
				String: VTPIC_RadioOn             = 'radon2'
				String: VTPIC_RadioOff            = 'radoff2'
				String: VTPIC_CheckBoxOn          = 'ckbxon2'
				String: VTPIC_CheckBoxOff         = 'ckbxoff2'
				!
				! ***** Virtual keycodes
				Number: VK_LeftButton   = 0x01
				Number: VK_RightButton  = 0x02
				Number: VK_Cancel       = 0x03
				Number: VK_MiddleButton = 0x04
				Number: VK_Backspace    = 0x08
				Number: VK_Tab          = 0x09
				Number: VK_Clear        = 0x0c
				Number: VK_Enter        = 0x0d
				Number: VK_Shift        = 0x10
				Number: VK_Control      = 0x11
				Number: VK_Alt          = 0x12
				Number: VK_Pause        = 0x13
				Number: VK_CapsLock     = 0x14
				Number: VK_Escape       = 0x1b
				Number: VK_Space        = 0x20
				Number: VK_PageUp       = 0x21
				Number: VK_PageDown     = 0x22
				Number: VK_End          = 0x23
				Number: VK_Home         = 0x24
				Number: VK_Left         = 0x25
				Number: VK_Up           = 0x26
				Number: VK_Right        = 0x27
				Number: VK_Down         = 0x28
				Number: VK_Select       = 0x29
				Number: VK_Execute      = 0x2b
				Number: VK_PrintScreen  = 0x2c
				Number: VK_Insert       = 0x2d
				Number: VK_Delete       = 0x2e
				Number: VK_Help         = 0x2f
				Number: VK_0            = 0x30
				Number: VK_1            = 0x31
				Number: VK_2            = 0x32
				Number: VK_3            = 0x33
				Number: VK_4            = 0x34
				Number: VK_5            = 0x35
				Number: VK_6            = 0x36
				Number: VK_7            = 0x37
				Number: VK_8            = 0x38
				Number: VK_9            = 0x39
				Number: VK_A            = 0x41
				Number: VK_B            = 0x42
				Number: VK_C            = 0x43
				Number: VK_D            = 0x44
				Number: VK_E            = 0x45
				Number: VK_F            = 0x46
				Number: VK_G            = 0x47
				Number: VK_H            = 0x48
				Number: VK_I            = 0x49
				Number: VK_J            = 0x4a
				Number: VK_K            = 0x4b
				Number: VK_L            = 0x4c
				Number: VK_M            = 0x4d
				Number: VK_N            = 0x4e
				Number: VK_O            = 0x4f
				Number: VK_P            = 0x50
				Number: VK_Q            = 0x51
				Number: VK_R            = 0x52
				Number: VK_S            = 0x53
				Number: VK_T            = 0x54
				Number: VK_U            = 0x55
				Number: VK_V            = 0x56
				Number: VK_W            = 0x57
				Number: VK_X            = 0x58
				Number: VK_Y            = 0x59
				Number: VK_Z            = 0x5a
				Number: VK_Multiply     = 0x6a
				Number: VK_Add          = 0x6b
				Number: VK_Separator    = 0x6c
				Number: VK_Subtract     = 0x6d
				Number: VK_Decimal      = 0x6e
				Number: VK_Divide       = 0x6f
				Number: VK_F1           = 0x70
				Number: VK_F2           = 0x71
				Number: VK_F3           = 0x72
				Number: VK_F4           = 0x73
				Number: VK_F5           = 0x74
				Number: VK_F6           = 0x75
				Number: VK_F7           = 0x76
				Number: VK_F8           = 0x77
				Number: VK_F9           = 0x78
				Number: VK_F10          = 0x79
				Number: VK_F11          = 0x7a
				Number: VK_F12          = 0x7b
				Number: VK_NumLock      = 0x90
				Number: VK_ScrollLock   = 0x91
				!
				! ***** Visual Toolchest - VTDEBUG.APL
				!
				! ***** Debug flags
				Number: DBF_IncrementalTime = 0x00010000
				Number: DBF_RealTime        = 0x00020000
				Number: DBF_MessageBox      = 0x00080000
				!
				! ***** Visual Toolchest - VTDOS.APL
				!
				! ***** DOS Flags
				Number: DOS_VerifyFlag = 0x0001
				Number: DOS_BreakFlag  = 0x0002
				Number: DOS_ErrorMode  = 0x0004
				!
				! ***** Drive type flags
				Number: DRIVE_Floppy   = 2
				Number: DRIVE_Fixed    = 3
				Number: DRIVE_Network  = 4
				Number: DRIVE_CDROM    = 5
				Number: DRIVE_RAM      = 6
				!
				! ***** Visual Toolchest - VTFILE.APL
				!
				! ***** File types
				Number: FILETYPE_Program  = 1
				Number: FILETYPE_Document = 2
				Number: FILETYPE_System   = 3
				Number: FILETYPE_Other    = 4
				!
				! ***** File attribute flags
				Number: FA_Volume         = 0x0008
				!
				! ***** Seek origins
				Number: SEEK_Begin        = 0
				Number: SEEK_Current      = 1
				Number: SEEK_End          = 2
				!
				! ***** Visual Toolchest - VTLBX.APL
				!
				! ***** Show All Levels
				Number: SHOW_AllLevels            = 32767
				!
				! ***** Drop Flags
				Number: DROP_Child                = 0x0001
				Number: DROP_Sibling              = 0x0002
				!
				! ***** Font Types
				Number: FONTTYPE_Device           = 0x0001
				Number: FONTTYPE_Raster           = 0x0002
				Number: FONTTYPE_TrueType         = 0x0004
				!
				! ***** List Box Item Flags
				Number: ITEM_IsDisabled           = 0x01000000
				Number: ITEM_IsHidden             = 0x02000000
				Number: ITEM_IsSelected           = 0x04000000
				Number: ITEM_IsFocus              = 0x08000000
				Number: ITEM_IsFrame              = 0x10000000
				Number: ITEM_IsDeleted            = 0x20000000
				Number: ITEM_IsParent             = 0x40000000
				Number: ITEM_IsExpanded           = 0x80000000
				Number: ITEM_CanPromote           = 0x00010000
				Number: ITEM_CanDemote            = 0x00020000
				Number: ITEM_CanMoveUp            = 0x00040000
				Number: ITEM_CanMoveDown          = 0x00080000
				Number: ITEM_CanExpand            = 0x00100000
				Number: ITEM_CanCollapse          = 0x00200000
				!
				! ***** List Box Extended styles
				Number: LBS_VisExtensions         = 0x00000001
				Number: LBS_FmtUppercase          = 0x00000002
				Number: LBS_FmtLowercase          = 0x00000004
				Number: LBS_ShowSelectColor       = 0x00000008
				Number: LBS_ShowSelectBkgd        = 0x00008000
				Number: LBS_ShowSelectText        = 0x00000010
				Number: LBS_ShowPicCenter         = 0x00000020
				Number: LBS_ShowNoTree            = 0x00000040
				Number: LBS_ShowNoEditSelect      = 0x00000080
				Number: LBS_ShowNoEditText        = 0x00000100
				Number: LBS_KillFocusNoSelect     = 0x00000200
				Number: LBS_KillFocusFrameSelect  = 0x00000400
				Number: LBS_SetWidthEachInsert    = 0x00001000
				Number: LBS_ShowNoSelect          = 0x00002000
				Number: LBS_ShowSelectTextPicture = 0x00004000
				Number: LBS_ShowHorzScrollBar     = 0x00010000
				Number: LBS_Explorer              = 0x00020000
				Number: LBS_FmtMixedcase          = 0x00040000
				Number: LBS_Editable              = 0x00080000
				!
				Number: LBS_DragSelect            = 0x01000000
				Number: LBS_DisableNoScroll       = 0x02000000
				Number: LBS_NoAutoResize          = 0x04000000
				Number: LBS_ExtendedCombo         = 0x08000001
				!
				! *** Visual Toolchest - VTLSTVW.APL
				!
				! *** Styles (see cListView.SetStyle())
				Number: LVS_Icon             = 0x0000
				Number: LVS_Report           = 0x0001
				Number: LVS_SmallIcon        = 0x0002
				Number: LVS_List             = 0x0003
				Number: LVS_TypeMask         = 0x0003
				Number: LVS_SingleSel        = 0x0004
				Number: LVS_ShowSelAlways    = 0x0008
				Number: LVS_NoLabelWrap      = 0x0080
				Number: LVS_AutoArrange      = 0x0100
				Number: LVS_EditLabels       = 0x0200
				Number: LVS_NoScroll         = 0x2000
				Number: LVS_TypeStyleMask    = 0xfc00
				Number: LVS_AlignTop         = 0x0000
				Number: LVS_AlignLeft        = 0x0800
				Number: LVS_AlignMask        = 0x0c00
				Number: LVS_NoColumnHeader   = 0x4000
				Number: LVS_NoSortHeader     = 0x8000
				!
				! *** Sort Order Flags (see cListView.SetSortOrder())
				Number: LVSORT_Ascending     = 0
				Number: LVSORT_Descending    = 1
				!
				! *** Item Masks (see cListView.SetItem())
				Number: LVIF_Text            = 0x0001
				Number: LVIF_Image           = 0x0002
				Number: LVIF_Param           = 0x0004
				Number: LVIF_State           = 0x0008
				!
				! *** Item States (see cListView.SetItemState())
				Number: LVIS_Focused         = 0x0001
				Number: LVIS_Selected        = 0x0002
				Number: LVIS_Cut             = 0x0004
				Number: LVIS_DropHilited     = 0x0008
				Number: LVIS_StateImageMask  = 0xf000
				!
				! *** NextItem Flags (see cListView.GetNextItem())
				Number: LVNI_All             = 0x0000
				Number: LVNI_Focused         = 0x0001
				Number: LVNI_Selected        = 0x0002
				Number: LVNI_Cut             = 0x0004
				Number: LVNI_DropHilited     = 0x0008
				Number: LVNI_Above           = 0x0100
				Number: LVNI_Below           = 0x0200
				Number: LVNI_ToLeft          = 0x0400
				Number: LVNI_ToRight         = 0x0800
				!
				! *** FindItem Flags (see cListView.FindItem())
				Number: LVFI_String          = 0x0002
				Number: LVFI_Partial         = 0x0008
				Number: LVFI_Wrap            = 0x0020
				Number: LVFI_NearestXY       = 0x0040
				!
				! *** ItemRect Codes (see cListView.GetItemRect())
				Number: LVIR_Bounds          = 0
				Number: LVIR_Icon            = 1
				Number: LVIR_Label           = 2
				Number: LVIR_SelectBounds    = 3
				!
				! *** HitTest Flags (see cListView.HitTest())
				Number: LVHT_Nowhere         = 0x0001
				Number: LVHT_OnItemIcon      = 0x0002
				Number: LVHT_OnItemLabel     = 0x0004
				Number: LVHT_OnItemStateIcon = 0x0008
				Number: LVHT_OnItem          = LVHT_OnItemIcon | LVHT_OnItemLabel | LVHT_OnItemStateIcon
				Number: LVHT_Above           = 0x0008
				Number: LVHT_Below           = 0x0010
				Number: LVHT_ToRight         = 0x0020
				Number: LVHT_ToLeft          = 0x0040
				!
				! *** Arrange Codes (see cListView.Arrange())
				Number: LVA_Default          = 0x0000
				Number: LVA_AlignLeft        = 0x0001
				Number: LVA_AlignTop         = 0x0002
				Number: LVA_SnapToGrid       = 0x0005
				!
				! *** Column Masks (see cListView.SetColumn())
				Number: LVCF_Fmt             = 0x0001
				Number: LVCF_Width           = 0x0002
				Number: LVCF_Text            = 0x0004
				!
				! *** Column Alignments (see cListView.AssignColumns())
				Number: LVCFMT_Left          = 0x0000
				Number: LVCFMT_Right         = 0x0001
				Number: LVCFMT_Center        = 0x0002
				Number: LVCFMT_JustifyMask   = 0x0003
				!
				! *** Notification Messages (sent to SAM_CustControlCmd handler)
						head 4 -  Number: LVN_First            = 0xff9c  ! *** NOTE: This should be 0xffffff9c once Centura supports 32-bit wParams.  BLG (2/26/96)
				Number: LVN_First            = 0xff9c
				Number: LVN_ItemChanging     = LVN_First - 0
				Number: LVN_ItemChanged      = LVN_First - 1
				Number: LVN_InsertItem       = LVN_First - 2
				Number: LVN_DeleteItem       = LVN_First - 3
				Number: LVN_DeleteAllItems   = LVN_First - 4
				Number: LVN_ColumnClick      = LVN_First - 8
				Number: LVN_BeginDrag        = LVN_First - 9
				Number: LVN_BeginRDrag       = LVN_First - 11
				!
				! ***** Visual Toolchest - VTMENU.APL
				!
				! ***** Menu flags
				Number: MF_Disable   = 0x0003
				Number: MF_Check     = 0x0008
				Number: MF_Separator = 0x0800
				!
				! ***** Visual Toolchest - VTMISC.APL
				!
				! ***** System metrics constants
				Number: SM_XScreen           = 0
				Number: SM_YScreen           = 1
				Number: SM_XVScroll          = 2
				Number: SM_YHScroll          = 3
				Number: SM_YCaption          = 4
				Number: SM_XBorder           = 5
				Number: SM_YBorder           = 6
				Number: SM_XDlgFrame         = 7
				Number: SM_YDlgFrame         = 8
				Number: SM_YVThumb           = 9
				Number: SM_XHThumb           = 10
				Number: SM_XIcon             = 11
				Number: SM_YIcon             = 12
				Number: SM_XCursor           = 13
				Number: SM_YCursor           = 14
				Number: SM_YMenu             = 15
				Number: SM_XFullScreen       = 16
				Number: SM_YFullScreen       = 17
				Number: SM_YKanjiWindow      = 18
				Number: SM_MousePresent      = 19
				Number: SM_YVScroll          = 20
				Number: SM_XHScroll          = 21
				Number: SM_Debug             = 22
				Number: SM_SwapButton        = 23
				Number: SM_XMin              = 28
				Number: SM_YMin              = 29
				Number: SM_XSize             = 30
				Number: SM_YSize             = 31
				Number: SM_XFrame            = 32
				Number: SM_YFrame            = 33
				Number: SM_XMinTrack         = 34
				Number: SM_YMinTrack         = 35
				Number: SM_XDoubleClick      = 36
				Number: SM_YDoubleClick      = 37
				Number: SM_XIconSpacing      = 38
				Number: SM_YIconSpacing      = 39
				Number: SM_MenuDropAlignment = 40
				Number: SM_PenWindows        = 41
				Number: SM_DBCSEnabled       = 42
				!
				! ***** Wait cursor flags
				Number: WAIT_TempOn          = 2
				Number: WAIT_TempOff         = 3
				Number: WAIT_SysModalOn      = 4
				Number: WAIT_SysModalOff     = 5
				!
				! ***** Windows flags
				Number: WF_PMode             = 0x0001
				Number: WF_CPU286            = 0x0002
				Number: WF_CPU386            = 0x0004
				Number: WF_CPU486            = 0x0008
				Number: WF_Standard          = 0x0010
				Number: WF_Enhanced          = 0x0020
				Number: WF_80x87             = 0x0400
				Number: WF_Paging            = 0x0800
				Number: WF_WLO               = 0x8000
				!
				! ***** Visual Toolchest - VTMSGBOX.APL
				!
				! ***** MessageBox constants
				Number: MBF_IconAsterisk    = 0x00010000
				Number: MBF_IconHand        = 0x00020000
				Number: MBF_IconQuestion    = 0x00040000
				Number: MBF_IconExclamation = 0x00080000
				Number: MBF_DefButton       = 0x00000001
				Number: MBF_IconInformation = MBF_IconAsterisk
				Number: MBF_IconError       = MBF_IconHand
				Number: MBF_IconStop        = MBF_IconHand
				Number: MBF_IconWarning     = MBF_IconExclamation
				!
				! *** Visual Toolchest - VTPAL.APL
				!
				! *** Notification messages
				Number: PALN_ErrSpace       = -1
				Number: PALN_Changed        = 1
				Number: PALN_Finished       = 2
				Number: PALN_Menu           = 3
				!
				! *** Styles
				Number: PAL_EnableMRUColors = 0x00000004
				Number: PAL_NoHideSelects   = 0x00000008
				!
				! *** Color roles
				Number: COLOR_PAL_BackColor = 0
				Number: COLOR_PAL_BackMenu  = 2
				!
				! *** Misc. Constants
				Number: REGION_Main         = 0
				Number: REGION_Menu         = 1
				Number: REGION_MRU          = 2
				!
				Number: PALETTE_Main        = 0
				Number: PALETTE_MRU         = 1
				!
				! ***** Visual Toolchest - VTSPIN.APL
				!
				! ***** Messages
				Number: VTM_SpinSetMin       = 0x400 + 1
				Number: VTM_SpinSetMax       = 0x400 + 2
				Number: VTM_SpinSetIncrement = 0x400 + 3
				Number: VTM_SpinSetValue     = 0x400 + 4
				Number: VTM_SpinScrollUp     = 0x400 + 5
				Number: VTM_SpinScrollDown   = 0x400 + 6
				Number: VTM_SpinGetValue     = 0x400 + 7
				!
				! *** Visual Toolchest - VTSPLIT.APL
				!
				! *** Orientation values
				Number: ORIENT_SPLIT_Unset      = -1
				Number: ORIENT_SPLIT_Horizontal = 0
				Number: ORIENT_SPLIT_Vertical   = 1
				!
				! ***** Visual Toolchest - VTTBLWIN.APL
				!
				! ***** Row flags
				Number: ROW_UserFlag1 = 0x0080
				Number: ROW_UserFlag2 = 0x0100
				Number: ROW_UserFlag3 = 0x0200
				Number: ROW_UserFlag4 = 0x0400
				Number: ROW_UserFlag5 = 0x0800
				!
				! ***** Visual Toolchest - VTWIN.APL
				!
				! ***** Key Down States
				Number: KDS_None             = 0
				Number: KDS_Shift            = 1
				Number: KDS_Ctrl             = 2
				Number: KDS_ShiftCtrl        = 3
				Number: KDS_Alt              = 4
				Number: KDS_AltShift         = 5
				Number: KDS_AltCtrl          = 6
				Number: KDS_ShiftAltCtrl     = 7
				!
				! ***** Show Window Flags
				Number: SHOW_Hidden          = 0
				Number: SHOW_Normal          = 1
				Number: SHOW_Minimized       = 2
				Number: SHOW_Maximized       = 3
				!
				! ***** Window Flags
				Number: WF_Required          = 0x00000001
				Number: WF_NoClear           = 0x00000002
				Number: WF_NoClearEditFlag   = 0x00000004
				Number: WF_FitPath           = 0x00000008
				Number: WF_DisplayOnly       = 0x00000010
				Number: WF_EnableWhenNotNull = 0x00010000
				!
				! ***** Show Window Flags
				Number: VT_SWP_NoZOrder      = 0x0004
				Number: WM_VSCROLL			= 0x0115
					! Description: 	Sent to a window when a user clicks on the windows vertical scrollbar
							wParam:		Low word: SB_ENDSCROLL/SB_TOP/SB_LINELEFT/SB_LINERIGHT/SBPAGELEFT/SBPAGERIGHT/SB_BOTTOM/SB_THUMBTRACK
									High word: SB_THUMBPOSITION/SB_THUMBTRACK/
							lParam:		Handle of the control if scrollbar is a control. Zero otherwise.
			User
				! ! !
				Number: WM_COMMAND		= 0x0111
				! ! !				Menu
				Number: MF_BYPOSITION	= 0x00000400
				Number: MF_STRING	= 0x00000000
				! ! !		The bwlow message is not needed. You can remove it
				Number: PM_ChildClose =SAM_User+10
				! !
				String: SH_SPACE=' '
				String: SH_DOT='.'
				String: SH_SEMICOLON=';'
				String: SH_COLON=':'
				String: SH_FORWARDSLASH='/'
				! !
				String: SH_TAB ='	'
				String: SH_COMMA=','
				String: SH_NEWLINE='
						'
			Enumerations
		Resources
		Variables
		Internal Functions
			Function: SalStrReplaceCRLF
				Description: author: 	Petra Zamburek
						date:  	1995
						version 	1.0
						
						desc:
						this function replaces all carriage-return and line-feeds with a given character,
						the default string is a blank
						
						example:
						
						Call SalStrReplaceCRLF('fdsdfssfdfdfs', ' ')
				Returns
				Parameters
					Receive String: sRPString
					String: psReplacedby
.data INHERITPROPS
0000: 0100
.enddata
				Static Variables
				Local variables
				Actions
					If psReplacedby = STRING_Null
						Set psReplacedby = ' '
					Set sRPString = VisStrSubstitute (sRPString, SalNumberToChar (0x0D) || SalNumberToChar (0x0A), psReplacedby)
					Set sRPString = VisStrSubstitute (sRPString, SalNumberToChar (0x0D), psReplacedby)
					Set sRPString = VisStrSubstitute (sRPString, SalNumberToChar (0x0A), psReplacedby)
		Named Menus
		Class Definitions
.data RESOURCE 0 0 1 1810756991
0000: AF0400001F020000 0000000000000000 0200000600FFFF01 00160000436C6173
0020: 73566172004F7574 6C696E6552006567 496E666F08003C00 000F6300636D6246
0040: 696E64520065706C 6163655000C00000 0200000003040000 000102FA00007F80
0060: F0010000006F0400 E6040001FE009F80 01FC000083018013 0100240100000F44
0080: 6500736B746F704C 69738074426F784E 0100F00B000000D0 1900000001FE00FF
00A0: 9B190019B5000100 FFFF603200000019 00ED0100FF3F4B00 580000190001FB00
00C0: FF0F64000000D619 0001FE00FF837D00 000019B5000100FF FF60960000001900
00E0: ED0100FF3FAF0058 0000190001FB00FF 0FC8000000D61900 01FE00FF83E10000
0100: 0019B5000100FFFF 60FA0000001900ED 0100FF3F01806464 00000200800B6344
0120: 69724C690F7C0000 00F6040096190001 00FE00FF9B190019 B5000100FFFF6632
0140: 001900ED0100FFBF 4B5900190001FB00 FF0F01804B008100 030000000F075472
0160: 65654C3E695E00D8 000003005B190001 FA0000FF6F1900D6 190001FE00FF9B32
0180: 0019B5000100FFFF 900180AF00000401 000C6346696C657E 4CD6800000000700
01A0: 0000B71900F40100 00FFDF19AC001900 01FD00FF37320019 6B000100FFFFCD4B
01C0: 0019DA000100FF7F 64B3001900F60100 FFDF7DAC00190001 FD00FF379600196B
01E0: 000100FFFF210180 7D00000500000000 0D63526164F0696F 4C69C19A00000005
0200: DE0019D200010000 FF7F19B3001900F6 0100FFDF32AC0019 0001FD00FF374B00
0220: 196B000100FFFFCD 640019DA000100FF 7F
.enddata
			Pushbutton Class: cpbPushButtonWithMenu
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  1.2"
					Width Editable? Yes
					Height: 0.298"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
				Class Variables
				Instance Variables
					String: m_szMenuEntries[*]
				Functions
					Function: OnClick
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							String: sMenuSelected
							Window Handle: hPopup
							Number: nX
							Number: nY
							Number: nWidth
							Number: nHeight
							Number: nBound
							Number: nCounter
						Actions
							Set hPopup = CreatePopupMenu()
							Call SalArrayGetUpperBound(m_szMenuEntries,1,nBound)
							While nCounter <= nBound
								Call AppendMenuA(hPopup, MF_BYPOSITION|MF_STRING, nCounter, m_szMenuEntries[nCounter])
								Set nCounter=nCounter+1
							Call SalGetWindowLoc( hWndItem, nX, nY )
							Call SalGetWindowSize( hWndItem, nWidth, nHeight )
							Set nY = nY + nHeight
							Set nX = SalFormUnitsToPixels( hWndForm, nX, FALSE )
							Set nY = SalFormUnitsToPixels( hWndForm, nY, TRUE )
							Call ClientToScreen(hWndForm, nX, nY)
							Return TrackPopupMenu( hPopup, TPM_LeftAlign, nX, nY,
										NUMBER_Null, hWndItem, STRING_Null)
				Message Actions
					On SAM_Click
						Call OnClick()
			Combo Box Class: ccmbFindReplace
				Window Location and Size
					Left:
					Top:
					Width:  1.2"
					Width Editable? Class Default
					Height: 1.104"
					Height Editable? Class Default
				Visible? Class Default
				Editable? Yes
				String Type: String
				Maximum Data Length: Class Default
				Sorted? Yes
				Always Show List? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
				Class Variables
					String: __m_szFindString[*]
					String: __m_szReplaceString[*]
				Instance Variables
					Boolean: m_bFind
				Functions
					Function: FnBPopulateListBox
						Description:
						Returns
						Parameters
							Boolean: bFind
						Static Variables
						Local variables
						Actions
							If bFind
								If SalArrayIsEmpty(__m_szFindString) = FALSE
									Call VisListArrayPopulate(hWndItem,__m_szFindString)
							Else
								If SalArrayIsEmpty(__m_szReplaceString) = FALSE
									Call VisListArrayPopulate(hWndItem,__m_szReplaceString)
					Function: FnBAddToList
						Description:
						Returns
						Parameters
							String: m_szArray[*]
						Static Variables
						Local variables
							Number: nIndex
							Number: nBound
						Actions
							Set nIndex= VisArrayFindString( m_szArray,MyValue)
							If nIndex = -1
								If SalArrayIsEmpty(m_szArray)
									Set m_szArray[0] = MyValue
								Else
									Call SalArrayGetUpperBound(m_szArray,1,nBound)
									Set m_szArray[nBound+1] = MyValue
								Call SalListAdd ( hWndItem, MyValue )
				List Initialization
				Message Actions
					On SAM_Create
						If m_bFind
							Call FnBPopulateListBox(TRUE)
						Else
							Call FnBPopulateListBox(FALSE)
					On SAM_Validate
						If VisStrTrim(MyValue) != STRING_Null
							If m_bFind
								Call FnBAddToList(__m_szFindString)
							Else
								Call FnBAddToList(__m_szReplaceString)
						Return VALIDATE_Ok
			! Picture Class: cQuickTabs
.winattr
				Window Location and Size
					Left:
					Top:
					Width:  Default
					Width Editable? Yes
					Height: Default
					Height Editable? Yes
				Visible? Yes
				Editable? No
				File Name:
				Storage: External
				Picture Transparent Color: None
				Fit: Scale
				Scaling
					Width:  100
					Height:  100
				Corners: Square
				Border Style: Solid
				Border Thickness: 1
				Tile To Parent? No
				Border Color: Default
				Background Color: Default
				List in Tool Palette? No
				Property Template:
				Class DLL Name: qtabi21.dll
.end
				Description: Tab frame window class.  Instances of this class
						should be created at children of cQuickTabsForm objects
						or cQuickTabsDialog objects.
				Derived From 
					Class: cSWTabs
					Class: cTabPageList
				Class Variables 
				Instance Variables 
					Number: nTab
					String: sName
					Boolean: m_bTabFrameInitialized
					Boolean: m_bPageListInitialized
				Functions 
					Function: OnSAMCreate
						Description: Process SAM_Create message
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
						Actions 
							! Initialize page list
							Call AttachFormPagesParent( hWndForm )
							! Initialize the tab manager functional class
							Call AttachWindow( hWndItem )
							! Subclass this window
							Call Subclass()
							! Initialize tabs based on property values
							Call InitFromProps( )
							Set m_bTabFrameInitialized = TRUE
							! Initialize the form page list 
							Call __TabSetFormPageSizeThunk()
							Call __InitPageList()
							Set m_bPageListInitialized = TRUE
							! Pass our own create message for backwards compatibility
							Call SalSendMsg( hWndItem, TABSM_Create, wParam, lParam )
							! Call a late bound function so that derived class can know when the tab
									was created
							Call __TabCreateThunk( hWndItem )
							Call __ShowFormPage( GetTop() )
							Return TRUE
					Function: __InitPageList
						Description: Populate the table with tab names and labels
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
							String: sFormArray[*]
							Number: nFormCount
							Number: nNameCount
							Number: nForm
							String: sNameArray[*]
							String: sName
							String: sForms
							String: sNames
						Actions 
							! Use tab as delimiter
							Call SalWindowGetProperty(hWndItem, 'TabFormPages', sForms )
							Set nFormCount = SalStrTokenize( sForms, '', '	', sFormArray )
							If nFormCount
								Call SalWindowGetProperty(hWndItem, 'TabNames', sNames )
								Set nNameCount = SalStrTokenize( sNames, '', '	', sNameArray )
								Set nForm = 0
								While nForm < nFormCount AND nForm < nNameCount
									If sFormArray[nForm] != '' AND sNameArray[nForm] != ''
										Call AddPage( sNameArray[nForm], sFormArray[nForm], hWndNULL )
									Set nForm = nForm + 1
							Return TRUE
					Function: __ShowFormPage
						Description: 
						Returns 
							Boolean: 
						Parameters 
							Number: nTab
						Static Variables 
						Local variables 
							String: sName
						Actions 
							If m_bPageListInitialized
								! Show page
								If nTab >= 0 
									Call GetName( nTab, sName )
								Call SetCurrentPage( sName )
							Return TRUE
					Function: __GetQuickTabsParent
						Description: Get the handle of the parent window.  Return hWndNULL if
								the parent is not of the correct class.
						Returns 
							Window Handle: 
						Parameters 
						Static Variables 
						Local variables 
							Window Handle: hWndParent
						Actions 
							Set hWndParent = SalParentWindow(hWndItem)
							If SalWindowIsDerivedFromClass( hWndParent, cQuickTabsParent )
								Return hWndParent
							Else 
								Return hWndNULL
					Function: __TabActivateStartThunk
						Description: Make late bound call to function in parent
						Returns 
							Boolean: 
						Parameters 
							Number: nTab
						Static Variables 
						Local variables 
							Window Handle: hWndParent
						Actions 
							Set hWndParent = __GetQuickTabsParent()
							If hWndParent != hWndNULL
								Call hWndParent.cQuickTabsParent..TabActivateStart( hWndItem, nTab )
							Return TRUE
					Function: __TabActivateFinishThunk
						Description: Make late bound call to function in parent
						Returns 
							Boolean: 
						Parameters 
							Number: nTab
						Static Variables 
						Local variables 
							Window Handle: hWndParent
						Actions 
							Set hWndParent = __GetQuickTabsParent()
							If hWndParent != hWndNULL
								Call hWndParent.cQuickTabsParent..TabActivateFinish( hWndItem, nTab )
							Return TRUE
					Function: __TabCreateThunk
						Description: Make late bound call to function in parent
						Returns 
							Boolean: 
						Parameters 
							Window Handle: hWnd
						Static Variables 
						Local variables 
							Window Handle: hWndParent
						Actions 
							Set hWndParent = __GetQuickTabsParent()
							If hWndParent != hWndNULL
								Call hWndParent.cQuickTabsParent..TabCreate( hWnd )
							Return TRUE
					Function: __TabUserRequestThunk
						Description: Make late bound call to function in parent
						Returns 
							Boolean: 
						Parameters 
							Number: nTab
						Static Variables 
						Local variables 
							Window Handle: hWndParent
						Actions 
							Set hWndParent = __GetQuickTabsParent()
							If hWndParent != hWndNULL
								Call hWndParent.cQuickTabsParent..TabUserRequest( hWndItem, nTab )
							Return TRUE
					Function: __TabFrameResizeThunk
						Description: Make late bound call to function in parent
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
							Window Handle: hWndParent
						Actions 
							Set hWndParent = __GetQuickTabsParent()
							If hWndParent != hWndNULL
								Call hWndParent.cQuickTabsParent..TabFrameResize( hWndItem )
							Return TRUE
					Function: __TabSetFormPageSizeThunk
						Description: Make late bound call to function in parent
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
							Window Handle: hWndParent
						Actions 
							Set hWndParent = __GetQuickTabsParent()
							If hWndParent != hWndNULL
								Call hWndParent.cQuickTabsParent..TabSetFormPageSize( hWndItem )
							Return TRUE
				Message Actions 
					On SAM_Create
						Call OnSAMCreate(  )
					On __TABSM_TabActivate
						! A tab has been activated
						! Pass our own messages that included the selected tab index
						Set nTab = cQuickTabs.GetClicked(  )
						! Generate message for backward compatibility
						Call SalSendMsg( hWndItem, TABSM_TabActivateStart, nTab, 0 )
						! Call late bound function in parent window
						Call __TabActivateStartThunk( nTab )
						! Hide/Show child windows when a tab is selected
						Call ShowSiblings( )
						! Show page
						Call __ShowFormPage( nTab )
						! Generate message for backward compatibility
						Call SalSendMsg( hWndItem, TABSM_TabActivateFinish, nTab, 0 )
						! Call late bound function in parent window
						Call __TabActivateFinishThunk( nTab )
					On __TABSM_UserRequest
						! The user has requested a tab activatation.
						! Pass our own messages that included the selected tab index
						Set nTab = cQuickTabs.GetClicked(  )
						! Generate message for backward compatibility
						Call SalSendMsg( hWndItem, TABSM_UserRequest, nTab, 0 )
						! Call late bound function in parent window
						Call __TabUserRequestThunk( nTab )
					On 0x0005  ! WM_Size
						If m_bTabFrameInitialized
							Call __TabSetFormPageSizeThunk()
							Call __TabFrameResizeThunk( )
			! General Window Class: cQuickTabsParent
.winattr
.end
				Description: Defines late bound functions in QuickTabs parent Form or Dialog Box that
						will be called when an event occurs in the tab control.
				Derived From 
				Class Variables 
				Instance Variables 
				Functions 
					Function: TabCreate
						Description: Indicates that a tab has been created. 
								This function is called when the tab control receives SAM_Create.
						Returns 
							Boolean: 
						Parameters 
							Window Handle: hWnd
						Static Variables 
						Local variables 
						Actions 
							! Don't add code here.  This is a late bound function call.  Override in the 
									form or dialog box.
							Return TRUE
					Function: TabActivateStart
						Description: Indicates that a tab has been activated.
								This function is called before the child windows have been shown
						Returns 
							Boolean: 
						Parameters 
							Window Handle: hWnd
							Number: nTab
						Static Variables 
						Local variables 
						Actions 
							! Don't add code here.  This is a late bound function call.  Override in the 
									form or dialog box.
							Return TRUE
					Function: TabActivateFinish
						Description: Indicates that a tab has been activated.
								This function is called after the child windows have been shown
						Returns 
							Boolean: 
						Parameters 
							Window Handle: hWnd
							Number: nTab
						Static Variables 
						Local variables 
							Window Handle: hWndParent
						Actions 
							! Don't add code here.  This is a late bound function call.  Override in the 
									form or dialog box.
							Return TRUE
					Function: TabUserRequest
						Description: Indicates that user is attempting to change the current tab by clicking,
								 tabbing or some other user action.
								NOTE: Call CancelMode() to deny the user's request
						Returns 
							Boolean: 
						Parameters 
							Window Handle: hWnd
							Number: nTab
						Static Variables 
						Local variables 
						Actions 
							! Don't add code here.  This is a late bound function call.  Override in the 
									form or dialog box.
							Return TRUE
					Function: TabFrameResize
						Description: Indicates that the size of the tab frame may have changed
						Returns 
							Boolean: 
						Parameters 
							Window Handle: hWnd
						Static Variables 
						Local variables 
						Actions 
							! Don't add code here.  This is a late bound function call.  Override in the 
									form or dialog box.
							Return TRUE
					Function: TabSetFormPageSize
						Description: Define the page size for child forms created on the tab frame.
								This function can be overriden in the tab form or tab dialog box
						Returns 
							Boolean: 
						Parameters 
							Window Handle: hWnd
						Static Variables 
						Local variables 
							Number: nLeft
							Number: nTop
							Number: nRight
							Number: nBottom
						Actions 
							Call hWnd.cQuickTabs.GetContentsRect( nLeft, nTop, nRight, nBottom )
							Call hWnd.cQuickTabs.SetPageSize( nLeft, nTop,  nRight, nBottom, TRUE)
							Return TRUE
				Message Actions 
			! Form Window Class: cQuickTabsForm
.winattr
				Title:
				Icon File:
				Accessories Enabled? No
				Visible? Yes
				Display Settings
					Display Style? Default
					Visible at Design time? Yes
					Automatically Created at Runtime? Yes
					Initial State: Normal
					Maximizable? Yes
					Minimizable? Yes
					System Menu? Yes
					Resizable? Yes
					Window Location and Size
						Left:
						Top:
						Width:  5.12"
						Width Editable? Yes
						Height: 2.5"
						Height Editable? Yes
					Form Size
						Width:  0.1"
						Height: 0.1"
						Number of Pages: Dynamic
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
				Next Class Child Key: 1
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: qtchi21.dll
.end
				Description: Form window with a tab frame.  In addition to 
						containing a built in tab frame.  This class also
						has the smarts to manage other child windows 
						on the form so that they can be associated with
						specific tabs.
				Derived From 
					Class: cQuickTabsParent
				Menu 
				Tool Bar 
.winattr
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Default
.end
					Contents 
				Contents 
					Picture: picTabs
.data INHERITPROPS
0000: 0100
.enddata
.data CLASSPROPSSIZE
0000: DA00
.enddata
.data CLASSPROPS
0000: 5461624C6566744D 617267696E000200 3000005461624375 7272656E74000600
0020: 4E616D6530000054 6162426F74746F6D 4D617267696E0002 0030000054616250
0040: 616765436F756E74 0002003100005461 624C6162656C7300 07004C6162656C30
0060: 00005461624E616D 65730006004E616D 6530000054616252 696768744D617267
0080: 696E000200300000 5461624472617753 74796C65000B0057 696E39355374796C
00A0: 650000546162466F 726D506167657300 0100000054616254 6F704D617267696E
00C0: 0002003000000000 0000000000000000 0000000000000000 0000
.enddata
.winattr class
						Class Child Ref Key: 0
						Class ChildKey: 1
						Class: cQuickTabs
						Property Template:
						Class DLL Name:
						Window Location and Size
							Left: 0.38"
							Top: 0.3"
							Width:  4.3"
							Width Editable? Yes
							Height: 1.692"
							Height Editable? Yes
						Visible? Yes
						Editable? Yes
						File Name:
						Storage: External
						Picture Transparent Color: None
						Fit: Scale
						Scaling
							Width:  100
							Height:  100
						Corners: Square
						Border Style: Solid
						Border Thickness: 1
						Tile To Parent? Yes
						Border Color: Default
						Background Color: 3D Face Color
.end
						Message Actions 
				Class Variables 
				Instance Variables 
				Functions 
				Message Actions 
			! Dialog Box Class: cQuickTabsDialog
.winattr
				Title:
				Accessories Enabled? No
				Visible? Yes
				Display Settings
					Display Style? Default
					Visible at Design time? Yes
					Type of Dialog: Modal
					Window Location and Size
						Left:
						Top:
						Width:  3.92"
						Width Editable? Yes
						Height: 2.533"
						Height Editable? Yes
					Absolute Screen Location? Yes
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
				Next Class Child Key: 1
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: qtchi21.dll
.end
				Description: Dialog Box window parent of a tab frame.  This 
						class allows editing of the properties of child windows
						identifying their associated tab.
				Tool Bar 
.winattr
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Default
.end
					Contents 
				Contents 
					Picture: picTabs
.data INHERITPROPS
0000: 0100
.enddata
.data CLASSPROPSSIZE
0000: DD00
.enddata
.data CLASSPROPS
0000: 5461624C6566744D 617267696E000200 3000005461624375 7272656E74000600
0020: 4E616D6530000054 616252696768744D 617267696E000200 3000005461624E61
0040: 6D65730006004E61 6D65300000546162 4C6162656C730007 004C6162656C3000
0060: 0054616250616765 436F756E74000200 310000546162426F 74746F6D4D617267
0080: 696E000500302E34 3500005461624472 61775374796C6500 0B0057696E393553
00A0: 74796C6500005461 62466F726D506167 6573000100000054 6162546F704D6172
00C0: 67696E0002003000 0000000000000000 0000000000000000 0000000000
.enddata
.winattr class
						Class Child Ref Key: 0
						Class ChildKey: 1
						Class: cQuickTabs
						Property Template:
						Class DLL Name:
						Window Location and Size
							Left: 0.08"
							Top: 0.1"
							Width:  3.64"
							Width Editable? Yes
							Height: 1.542"
							Height Editable? Yes
						Visible? Yes
						Editable? Yes
						File Name:
						Storage: External
						Picture Transparent Color: None
						Fit: Scale
						Scaling
							Width:  100
							Height:  100
						Corners: Square
						Border Style: Solid
						Border Thickness: 1
						Tile To Parent? Yes
						Border Color: Default
						Background Color: 3D Face Color
.end
						Message Actions 
				Derived From 
					Class: cQuickTabsParent
				Class Variables 
				Instance Variables 
				Functions 
				Message Actions 
			! Functional Class: cSWTabs
.winattr
.end
				Description: Class used to manage a tab frame at run time
				Derived From 
				Class Variables 
				Instance Variables 
					Window Handle: m_hWnd
				Functions 
					Function: AttachWindow
						Description: Indicate the window that this class operates
								on.
								The AttachWindow function must be called first
								to associate a tab frame with this object.
						Returns 
							Boolean: 
						Parameters 
							Window Handle: hWnd
						Static Variables 
						Local variables 
						Actions 
							Set m_hWnd = hWnd
							Return TRUE
					Function: Subclass
						Description: Subclass this tab frame so that swtabs.dll can
								take over painting, mouse handling, etc.
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
						Actions 
							Call SWTabsSubclass( m_hWnd )
							Return TRUE
					Function: Add
						Description: Append a tab. Redraw is optional
								Return an index
						Returns 
							Number: 
						Parameters 
							Boolean: bRedraw
						Static Variables 
						Local variables 
							Number: nReturn
						Actions 
							Set nReturn = SWTabsAdd( m_hWnd, bRedraw )
							Return nReturn
					Function: Insert
						Description: Insert a tab at a location.  Redraw is optional.
								Return TRUE or FALSE.
						Returns 
							Boolean: BOOL
						Parameters 
							Number: nIndex
							Boolean: bRedraw
						Static Variables 
						Local variables 
						Actions 
							Return SWTabsInsert( m_hWnd, nIndex, bRedraw )
					Function: Delete
						Description: Delete a tab at a location.  Redraw is optional.
								Return TRUE or FALSE.
						Returns 
							Boolean: BOOL
						Parameters 
							Number: nIndex
							Boolean: bRedraw
						Static Variables 
						Local variables 
						Actions 
							Return SWTabsDelete( m_hWnd, nIndex, bRedraw )
					Function: SetName
						Description: Associate a name with a tab
						Returns 
							Boolean: 
						Parameters 
							Number: nIndex
							String: sName
						Static Variables 
						Local variables 
							Boolean: bReturn
						Actions 
							Set bReturn = SWTabsSetName( m_hWnd, nIndex, sName )
							Return bReturn
					Function: SetLabel
						Description: Set the label displayed on a tab.
								Redraw is optional.
						Returns 
							Boolean: 
						Parameters 
							Number: nIndex
							String: sName
							Boolean: bRedraw
						Static Variables 
						Local variables 
							Boolean: bReturn
						Actions 
							Set bReturn = SWTabsSetLabel( m_hWnd, nIndex, sName, bRedraw )
							Return bReturn
					Function: GetName
						Description: Get the name associated with a tab
						Returns 
							Boolean: 
						Parameters 
							Number: nIndex
							Receive String: sName
						Static Variables 
						Local variables 
							Boolean: bReturn
						Actions 
							Call SalStrSetBufferLength( sName, 100 )
							Set bReturn = SWTabsGetName( m_hWnd, nIndex, sName, 100 )
							Return bReturn
					Function: GetLabel
						Description: Get the label displayed on a tab
						Returns 
							Boolean: 
						Parameters 
							Number: nIndex
							Receive String: sLabel
						Static Variables 
						Local variables 
							Boolean: bReturn
						Actions 
							Call SalStrSetBufferLength( sLabel, 100 )
							Set bReturn = SWTabsGetLabel( m_hWnd, nIndex, sLabel, 100 )
							Return bReturn
					Function: Clear
						Description: Clear all tabs from the frame. 
								Redraw is optional.
						Returns 
							Boolean: 
						Parameters 
							Boolean: bRedraw
						Static Variables 
						Local variables 
							Boolean: bReturn
						Actions 
							Set bReturn = SWTabsClear( m_hWnd, bRedraw )
					Function: BringToTop
						Description: Activate a tab
						Returns 
							Boolean: 
						Parameters 
							Number: nIndex
							Boolean: bRedraw
						Static Variables 
						Local variables 
							Boolean: bReturn
						Actions 
							Set bReturn = SWTabsBringToTop( m_hWnd, nIndex, bRedraw )
					Function: GetTop
						Description: Get the index of the active tab
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturn
						Actions 
							Set nReturn = SWTabsGetTop( m_hWnd )
							Return nReturn
					Function: GetClicked
						Description: Get the index of the tab being clicked.
								This should only be called during a 
								click notification.
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturn
						Actions 
							Set nReturn = SWTabsGetUserEventIndex( m_hWnd )
							Return nReturn
					Function: GetCount
						Description: Get the count of tabs
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturn
						Actions 
							Set nReturn = SWTabsGetCount( m_hWnd )
							Return nReturn
					Function: Next
						Description: Activate the next tab
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturn
						Actions 
							Set nReturn = SWTabsNext( m_hWnd )
							Return nReturn
					Function: Prev
						Description: Activate the previous tab
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturn
						Actions 
							Set nReturn = SWTabsPrev( m_hWnd )
							Return nReturn
					Function: FindName
						Description: Find a tab give a tab name
						Returns 
							Number: 
						Parameters 
							String: sName
						Static Variables 
						Local variables 
							Number: nReturn
						Actions 
							Set nReturn = SWTabsFindName( m_hWnd, sName )
							Return nReturn
					Function: FindLabel
						Description: Find a tab give a tab label
						Returns 
							Number: 
						Parameters 
							String: sLabel
						Static Variables 
						Local variables 
							Number: nReturn
						Actions 
							Set nReturn = SWTabsFindLabel( m_hWnd, sLabel )
							Return nReturn
					Function: CancelMode
						Description: Cancel a user action.  This can
								be called when processing a TABSM_ message.
						Returns 
							Boolean: BOOL
						Parameters 
						Static Variables 
						Local variables 
							Boolean: bReturn
						Actions 
							Set bReturn = SWTabsCancelMode( m_hWnd )
							Return bReturn
					Function: Redraw
						Description: Arranges tabs on the frame and repaints.  
								Call after adding tabs or clearing with a FALSE 
								redraw flag.
						Returns 
							Boolean: BOOL
						Parameters 
						Static Variables 
						Local variables 
							Boolean: bReturn
						Actions 
							Set bReturn = SWTabsRedraw( m_hWnd )
							Return bReturn
					Function: InitFromProps
						Description: Read properties from the outline and reconfigure
								the tab frame.
						Returns 
							Boolean: BOOL
						Parameters 
						Static Variables 
						Local variables 
						Actions 
							Return SWTabsInitWindowFromProps( m_hWnd )
					Function: ShowSiblings
						Description: Show or hide child windows based on the
								top tab
						Returns 
							Boolean: BOOL
						Parameters 
						Static Variables 
						Local variables 
							Number: nTop
							String: sName
						Actions 
							Set nTop = GetTop()
							If nTop >= 0
								Call GetName( nTop, sName )
								! Set focus to the tab frame
								Call SalSetFocus( m_hWnd )
								Return SWTabsShowSiblings( m_hWnd, sName )
							Return FALSE
					Function: Enable
						Description: Enable or disable a tab
						Returns 
							Boolean: BOOL
						Parameters 
							Number: nIndex
							Boolean: bEnable
						Static Variables 
						Local variables 
						Actions 
							Return SWTabsEnable( m_hWnd, nIndex, bEnable )
					Function: IsEnabled
						Description: Indicate whether a tab is enabled
						Returns 
							Boolean: BOOL
						Parameters 
							Number: nIndex
						Static Variables 
						Local variables 
						Actions 
							Return SWTabsIsEnabled( m_hWnd, nIndex )
					Function: GetContentsRect
						Description: Get the area available for child controls.  Coordinates
								are relative to the parent window.
						Returns 
							Boolean: 
						Parameters 
							Receive Number: nLeft
							Receive Number: nTop
							Receive Number: nRight
							Receive Number: nBottom
						Static Variables 
						Local variables 
							Number: nLeftPixels
							Number: nRightPixels
							Number: nBottomPixels
							Number: nTopPixels
							Window Handle: hWndParent
						Actions 
							Call GetContentsRectPixels(  
									nLeftPixels, nTopPixels, nRightPixels, nBottomPixels )
							Set nLeft =SalPixelsToFormUnits( m_hWnd, nLeftPixels, FALSE )
							Set nTop =SalPixelsToFormUnits( m_hWnd, nTopPixels, TRUE )
							Set nRight =SalPixelsToFormUnits( m_hWnd, nRightPixels, FALSE )
							Set nBottom =SalPixelsToFormUnits( m_hWnd, nBottomPixels, TRUE )
							Return TRUE
					Function: GetContentsRectPixels
						Description: Get the area available for child controls.  Coordinates
								are relative to the parent window.
						Returns 
							Boolean: 
						Parameters 
							Receive Number: nLeftPixels
							Receive Number: nTopPixels
							Receive Number: nRightPixels
							Receive Number: nBottomPixels
						Static Variables 
						Local variables 
						Actions 
							Call SWTabsGetContentsRect( m_hWnd, 
									nLeftPixels, nTopPixels, nRightPixels, nBottomPixels )
							Return TRUE
					Function: GetContentsBorderRect
						Description: Get the area between the contents rect and the edge of the tab frame. For 
								example nLeft will indicate the width of the left border, nTop will indicate the 
								combined height of the top border and tab area.
						Returns 
							Boolean: 
						Parameters 
							Receive Number: nLeft
							Receive Number: nTop
							Receive Number: nRight
							Receive Number: nBottom
						Static Variables 
						Local variables 
							Number: nLeftPixels
							Number: nRightPixels
							Number: nBottomPixels
							Number: nTopPixels
							Window Handle: hWndParent
						Actions 
							Call SWTabsGetContentsBorderRect( m_hWnd, 
									nLeftPixels, nTopPixels, nRightPixels, nBottomPixels )
							Set nLeft =SalPixelsToFormUnits( m_hWnd, nLeftPixels, FALSE )
							Set nTop =SalPixelsToFormUnits( m_hWnd, nTopPixels, TRUE )
							Set nRight =SalPixelsToFormUnits( m_hWnd, nRightPixels, FALSE )
							Set nBottom =SalPixelsToFormUnits( m_hWnd, nBottomPixels, TRUE )
							Return TRUE
					Function: GetRowCount
						Description: Retrieve the number rows of tabs
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturn
						Actions 
							Set nReturn = SWTabsGetPageCount( m_hWnd )
							Return nReturn
					Function: SetRowCount
						Description: Set the number rows of tabs
						Returns 
							Number: 
						Parameters 
							Number: nRows
							Boolean: bRedraw
						Static Variables 
						Local variables 
							Boolean: bReturn
						Actions 
							Set bReturn = SWTabsSetPageCount( m_hWnd, nRows, bRedraw )
							Return bReturn
					Function: GetDrawStyle
						Description: Retrieve the draw style
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturn
						Actions 
							Set nReturn = SWTabsGetDrawStyle( m_hWnd )
							Return nReturn
					Function: SetDrawStyle
						Description: Change the draw style
						Returns 
							Number: 
						Parameters 
							Number: nStyle
							Boolean: bRedraw
						Static Variables 
						Local variables 
							Boolean: bReturn
						Actions 
							Set bReturn = SWTabsSetDrawStyle( m_hWnd, nStyle, bRedraw )
							Return bReturn
					Function: ShowWindow
						Description: Use this function instead of SalShowWindow because it works properly
								with the class function HideWindow
						Returns 
							Boolean: BOOL
						Parameters 
							Window Handle: hWnd
						Static Variables 
						Local variables 
							Boolean: bReturn
						Actions 
							Set bReturn = SWTabsShowWindow( m_hWnd, hWnd )
							Return bReturn
					Function: ShowWindowAndLabel
						Description: Use this function instead of SalShowWindowAndLabel because it works properly
								with the class function HideWindowAndLabel.
						Returns 
							Boolean: BOOL
						Parameters 
							Window Handle: hWnd
						Static Variables 
						Local variables 
							Boolean: bReturn
						Actions 
							Set bReturn = SWTabsShowWindowAndLabel( m_hWnd, hWnd )
							Return bReturn
					Function: HideWindow
						Description: Use this function instead of SalHideWindow.  This function will keep the window
								hidden as tabs are selected.  Use the class function ShowWindow to undo the affect
								of this function.
						Returns 
							Boolean: BOOL
						Parameters 
							Window Handle: hWnd
						Static Variables 
						Local variables 
							Boolean: bReturn
						Actions 
							Set bReturn = SWTabsHideWindow( m_hWnd, hWnd )
							Return bReturn
					Function: HideWindowAndLabel
						Description: Use this function instead of SalHideWindowAndLabel.  This function will keep the window
								hidden as tabs are selected.  Use the class function ShowWindowWindowAndLabel to 
								undo the affect of this function.
						Returns 
							Boolean: BOOL
						Parameters 
							Window Handle: hWnd
						Static Variables 
						Local variables 
							Boolean: bReturn
						Actions 
							Set bReturn = SWTabsHideWindowAndLabel( m_hWnd, hWnd )
							Return bReturn
					Function: GetMinimumWidth
						Description: The the minimum tab frame width.  If the tab frame is sized below this
								width, tab text will be clipped.  The returned width is in form units.
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
						Actions 
							Return SalPixelsToFormUnits( m_hWnd, SWTabsGetMinimumWidth( m_hWnd ), FALSE )
					Function: SetMinimumResizeSize
						Description: Define the minimum size of the tiled-to-parent tabbed frame when it is resized.
								Measurements are in form units.
						Returns 
							Boolean: 
						Parameters 
							Number: nWidth
							Number: nHeight
							Boolean: bResize
						Static Variables 
						Local variables 
						Actions 
							Return SWTabsSetMinimumResizeSize( m_hWnd, nWidth, nHeight, bResize )
					Function: GetMarginRect
						Description: Get the margins defined for a tiled-to-parent tabbed frame
						Returns 
							Number: 
						Parameters 
							Receive Number: nLeft
							Receive Number: nTop
							Receive Number: nRight
							Receive Number: nBottom
						Static Variables 
						Local variables 
						Actions 
							Return SWTabsGetMarginRect( m_hWnd, nLeft, nTop, nRight, nBottom )
					Function: SetWorkspaceBoundary
						Description: Define the boundaries of the workspace so that
								a tiled-to-parent tab frame won't be resized smaller than this boundary
						Returns 
							Boolean: 
						Parameters 
							Number: nRightBoundary
							Number: nBottomBoundary
						Static Variables 
						Local variables 
							Number: nMinWidth
							Number: nMinHeight
							Number: nRequiredWidth
							Number: nLeftBorder
							Number: nRightBorder
							Number: nTopBorder
							Number: nBottomBorder
							Number: nLeftMargin
							Number: nRightMargin
							Number: nTopMargin
							Number: nBottomMargin
						Actions 
							! The space between the contents rect and the edge of the tab frame (in pixels)
							Call GetContentsBorderRect( nLeftBorder, nTopBorder, nRightBorder, nBottomBorder )
							! The the margins defined for this tile-to-parent frame
							Call GetMarginRect( nLeftMargin, nTopMargin, nRightMargin, nBottomMargin )
							! Calculate the minimum width and height of the tabframe.  We need to account
									for the following:
									1) The space between the tab frame and the left and top of the form
									2) The space, on right and bottom, between the tab frame contents area and the 
									edge of the tab frame.  This space is used to display the frame border.
							Set nMinWidth = nRightBoundary - nLeftMargin + nRightBorder 
							Set nMinHeight = nBottomBoundary - nTopMargin + nBottomBorder 
							! Make sure this minimum is wide enough to display all of the 
									tabs without clipping them
							Set nRequiredWidth = GetMinimumWidth()
							If nMinWidth < nRequiredWidth
								Set nMinWidth =  nRequiredWidth
							! Indicate the minimum width and height of the tab frame.  TRUE
									means to resize the frame.
							Call SetMinimumResizeSize( nMinWidth, nMinHeight,  TRUE )
							Return TRUE
					Function: FindTabFrame
						Description: Finds the tab frame window on a form or dialog box
						Returns 
							Window Handle: 
						Parameters 
							Window Handle: hWndForm
						Static Variables 
						Local variables 
							Window Handle: hWnd
						Actions 
							Set hWnd = SalGetFirstChild( hWndForm, TYPE_Picture )
							While hWnd != hWndNULL
								If IsTabFrame( hWnd )
									Return hWnd
								Set hWnd = SalGetNextChild( hWnd, TYPE_Picture )
							Return hWndNULL
					Function: IsTabFrame
						Description: Indicate whether a window is a tab frame
						Returns 
							Boolean: BOOL
						Parameters 
							Window Handle: hWnd
						Static Variables 
						Local variables 
						Actions 
							Return SWTabsIsTabControl( hWnd )
					Function: IndexFromPoint
						Description: Get the tab, if any, under a given point (in pixels).  A negative number is returned if the point
								is not over a tab.
						Returns 
							Number: 
						Parameters 
							Number: nX
							Number: nY
						Static Variables 
						Local variables 
						Actions 
							Return SWTabIndexFromChildPoint( m_hWnd, nX, nY )
					Function: AreFormPagesSupported
						Description: Indicate whether child forms are supported by this version of Centura
						Returns 
							Boolean: BOOL
						Parameters 
						Static Variables 
						Local variables 
						Actions 
							Return TRUE
					Function: SendMsgToAssociated
						Description: Send a message to all child windows associated with a tab
						Returns 
							Boolean: 
						Parameters 
							Number: nIndex
							Number: nMsg
							Number: wParam
							Number: lParam
						Static Variables 
						Local variables 
						Actions 
							Return SWTabsSendMsgToAssociated( m_hWnd, nIndex, nMsg, wParam, lParam )
					Function: IsAssociatedWithTab
						Description: Indicate wether a child window is associated with a tab
						Returns 
							Boolean: 
						Parameters 
							Number: nIndex
							Window Handle: hWnd
						Static Variables 
						Local variables 
						Actions 
							Return SWTabsIsAssociatedWithTab( m_hWnd, nIndex, hWnd )
			! Functional Class: cTabPageList
.winattr
.end
				Description: Keep track of list of tab pages
				Derived From 
					Class: cFormPageList
				Class Variables 
				Instance Variables 
				Functions 
					Function: CreatePageWindowAsChild
						Description: Override base class function.
								Create a form as a hidden child window. 
						Returns 
							Window Handle: 
						Parameters 
							String: sForm
							Window Handle: hWndParent
							Number: nLeft  ! Form units
							Number: nTop
							Number: nRight
							Number: nBottom
						Static Variables 
						Local variables 
						Actions 
							Return SalCreateWindowEx( sForm, hWndParent,
									nLeft, nTop, nRight - nLeft, nBottom - nTop, 
									CREATE_AsChild | CREATE_Hidden )
			! Functional Class: cFormPageList
.winattr
.end
				Description: Keep track of a list of form windows that can be displayed
						as pages on a form.  This is an abstract class.  The CreateFormAsChild class function must
						be defined in a dervied class. 
				Derived From 
				Class Variables 
				Instance Variables 
					Window Handle: m_hWndParent
					String: m_sCurrent
					Number: m_nPageLeft
					Number: m_nPageTop
					Number: m_nPageBottom
					Number: m_nPageRight
					String: m_sFormPagesData
				Functions 
					Function: AttachFormPagesParent
						Description: Initialization function. 
								Associate a parent window with this class.  
								Pages will be created as children of this form, toolbar, or dialog box window.
								The return value is TRUE or FALSE.
						Returns 
							Boolean: 
						Parameters 
							Window Handle: hWndParent
								! The parent Window Handle
						Static Variables 
						Local variables 
						Actions 
							Set m_hWndParent = hWndParent
							Return TRUE
					Function: InitializeFormPages
						Description: Pass initialization data.
								Call this function to define a string that will be passed to each page using the PAGEM_Initialize message.
								Typically this strings passes information that is used by the page windows to initialize themselves.
								The return value is TRUE or FALSE.
						Returns 
							Boolean: 
						Parameters 
							String: sData
								! The initialization string
						Static Variables 
						Local variables 
							Number: nIndex
							Number: nMax
						Actions 
							Set m_sFormPagesData = sData
							Call SalArrayGetUpperBound( Items, 1, nMax )
							Set nIndex = 0
							While nIndex <= nMax
								Call __SendInitializeMessage( nIndex )
									Return nIndex
								Set nIndex = nIndex + 1
							Return TRUE
					Function: ApplyFormPageChanges
						Description: Apply changes to all pages.
								Call this function to cause the PAGEM_ApplyChanges message to be sent to all form pages.
								Typically this function is called when the "OK" or "Apply Changes" button is selected.
								The return value is TRUE or FALSE.
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nIndex
							Number: nMax
						Actions 
							Call SalArrayGetUpperBound( Items, 1, nMax )
							Set nIndex = 0
							While nIndex <= nMax
								Call __SendApplyMessage( nIndex )
									Return nIndex
								Set nIndex = nIndex + 1
							Return TRUE
					Function: __CheckPageHandles
						Description: Validate the initialization of this class
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
						Actions 
							If m_hWndParent = hWndNULL
								Call SalMessageBox( 'Parent window has not been defined by call to AttachParent', 'cPageList', MB_Ok )
								Return FALSE
							Return TRUE
					Function: SetPageSize
						Description: Define the location of form pages.
								Call this function to define a rectangle within the parent to display pages.
								Pages will not be displayed properly unless this function is called before any pages are shown.
								The return value is TRUE or FALSE.
						Returns 
							Boolean: 
						Parameters 
							Number: nLeft
							Number: nTop
							Number: nRight
							Number: nBottom
							Boolean: bResize
						Static Variables 
						Local variables 
						Actions 
							Set m_nPageLeft = nLeft
							Set m_nPageTop = nTop
							Set m_nPageRight = nRight
							Set m_nPageBottom = nBottom
							If bResize
								Call ResizePages()
							Return TRUE
					Function: ResizePages
						Description: Resize all pages.  
								Call this function to resize all form pages.  
								The active page is resized first.
								The return value is TRUE or FALSE.
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nMax
							Number: nIndexCurrent
							Number: nIndex
							Number: nCurrent
						Actions 
							If __CheckPageHandles( ) = FALSE
								Return FALSE
							Set nCurrent = __FindPageOfTag( m_sCurrent )
							If nCurrent != -1
								Call Items[nCurrent].Resize( m_hWndParent, m_nPageLeft, m_nPageTop, m_nPageRight, m_nPageBottom )
							Call SalArrayGetUpperBound( Items, 1, nMax )
							! Search for an unused item
							Set nIndex = 0
							While nIndex <= nMax
								If nIndex != nCurrent
									Call Items[nIndex].Resize( m_hWndParent, m_nPageLeft, m_nPageTop, m_nPageRight, m_nPageBottom )
										Return nIndex
								Set nIndex = nIndex + 1
							Return TRUE
					Function: AddPage
						Description: Add a page.
								Call this function to add a page to the page list.  
								The page window will not be created until the page is activated.
								The return value is TRUE or FALSE.
						Returns 
							Boolean: 
						Parameters 
							String: sTag
								! A unique identifier for the form page
							String: sForm
								! The name of the form page
							Window Handle: hWnd  
								! The Window Handle of the page.  Typically this is hWndNULL. 
						Static Variables 
						Local variables 
							Number: nIndex
						Actions 
							Set nIndex = __NewPageItem()
							Set Items[nIndex].m_sForm = sForm
							Set Items[nIndex].m_sTag = sTag
							Set Items[nIndex].m_hWndPage = hWnd
							Return TRUE
					Function: CreatePage
						Description: Create a page window. 
								Call this function to cause the page window to be created.
								Typically it is not necessary to call this function because SetCurrentPage will take care of creating the page window.
								The page window will not be shown until SetCurrentPage is called.
								The return value is TRUE or FALSE.
						Returns 
							Boolean: 
						Parameters 
							String: sTag
						Static Variables 
						Local variables 
							Number: nIndex
							Window Handle: hWnd
						Actions 
							If __CheckPageHandles() = FALSE
								Return FALSE
							Set nIndex = __FindPageOfTag( sTag )
							If nIndex >= 0
								Set hWnd =  __CreatePageWindow( nIndex )
							Return ( hWnd != hWndNULL )
					Function: DestroyPage
						Description: Destroy a page window.
								Call this function to destroy a page window.
								The page is not removed from the list.  The page window can be recreated..
								The return value is TRUE or FALSE.  
						Returns 
							Boolean: 
						Parameters 
							String: sTag
								! Page identifier
						Static Variables 
						Local variables 
							Number: nIndex
							Window Handle: hWnd
						Actions 
							If __CheckPageHandles() = FALSE
								Return FALSE
							Set nIndex = __FindPageOfTag( sTag )
							If nIndex >= 0
								Call __DestroyPageWindow( nIndex )
								If m_sCurrent = sTag
									Set m_sCurrent = ''
							Return ( hWnd = hWndNULL )
					Function: CreatePageWindowAsChild
						Description: Create a form as a hidden child window.  
								This function must be implemented by the derived class.
								The return value is the Window Handle of the created window or hWndNULL.
						Returns 
							Window Handle: 
						Parameters 
							String: sForm
							Window Handle: hWndParent
							Number: nLeft  ! Form units
							Number: nTop
							Number: nRight
							Number: nBottom
						Static Variables 
						Local variables 
						Actions 
							! This function must be implemented by the derived class
							Call SalMessageBox( 'CreatePageWindowAsChild must be implemented by the derived class', 'CPageList', MB_Ok )
							Return hWndNULL
					Function: ClearPages
						Description: Clear all pages.  
								Call this function to remove all entries from the page list and destroy any existing windows.
								The return value is TRUE of FALSE.
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nIndex
							Number: nMax
						Actions 
							Call SalArrayGetUpperBound( Items, 1, nMax )
							Set nIndex = 0
							While nIndex <= nMax
								Call DestroyPage( Items[nIndex].m_sTag )
									Return nIndex
								Set nIndex = nIndex + 1
							Call SalArraySetUpperBound( Items, 1, -1 )
							Return TRUE
					Function: SetCurrentPage
						Description: Activate a page.
								Call this function to cause a page to be created and/or shown.
								All other pages will be hidden.
								The return value is TRUE or FALSE.
						Returns 
							Boolean: 
						Parameters 
							String: sTag
						Static Variables 
						Local variables 
							String: sLast
						Actions 
							If sTag != '' AND __FindPageOfTag( sTag ) < 0
								Set sTag = ''
							Set sLast = m_sCurrent
							Set m_sCurrent = sTag
							If sLast != sTag
								If sTag != ''
									Call CreatePage( sTag )
									Call __ShowPage( sTag )
								If sLast != ''
									Call __HidePage( sLast )
							Return TRUE
					Function: GetPageWindow
						Description: Get the window of a page. 
								Call this function to get the Window Handle of a page.
								The return value is the Window Handle of the page.  hWndNULL is returned if the page window has not been created. 
						Returns 
							Window Handle: 
						Parameters 
							String: sTag
						Static Variables 
						Local variables 
							Number: nIndex
						Actions 
							Set nIndex = __FindPageOfTag( sTag )
							If nIndex != -1
								Return Items[nIndex].m_hWndPage
							Else 
								Return hWndNULL
					Function: __ShowPage
						Description: Show a page
						Returns 
							Boolean: 
						Parameters 
							String: sTag
						Static Variables 
						Local variables 
							Number: nIndex
						Actions 
							Set nIndex = __FindPageOfTag( sTag )
							If nIndex != -1
								If Items[nIndex].m_hWndPage
									Call __SendActivateMessage( nIndex )
								Return Items[nIndex].Show()
							Return FALSE
					Function: __HidePage
						Description: Hide a page
						Returns 
							Boolean: 
						Parameters 
							String: sTag
						Static Variables 
						Local variables 
							Number: nIndex
						Actions 
							Set nIndex = __FindPageOfTag( sTag )
							If nIndex != -1
								If Items[nIndex].Hide()
									If Items[nIndex].m_hWndPage
										Call __SendDeactivateMessage( nIndex )
									Return TRUE
								Else 
									Return FALSE
							Return FALSE
					Function: __NewPageItem
						Description: Return the index of an unused element
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nMax
							Number: nIndex
						Actions 
							Call SalArrayGetUpperBound( Items, 1, nMax )
							! Search for an unused item
							Set nIndex = 0
							While nIndex <= nMax
								If Items[nIndex].m_sTag = ''
									Return nIndex
								Set nIndex = nIndex + 1
							! Return the next item in the array
							Return nMax + 1
					Function: __FindPageOfForm
						Description: Locate a page with a give window name
						Returns 
							Number: INT
						Parameters 
							String: sForm
						Static Variables 
						Local variables 
							Number: nMax
							Number: nIndex
						Actions 
							Call SalArrayGetUpperBound( Items, 1, nMax )
							Set nIndex = 0
							While nIndex <= nMax
								If Items[nIndex].m_sForm = sForm
									Return nIndex
								Set nIndex = nIndex + 1
							Return -1
					Function: __FindPageOfTag
						Description: Locate a page with a give tag
						Returns 
							Number: 
						Parameters 
							String: sTag
						Static Variables 
						Local variables 
							Number: nMax
							Number: nIndex
						Actions 
							Call SalArrayGetUpperBound( Items, 1, nMax )
							Set nIndex = 0
							While nIndex <= nMax
								If Items[nIndex].m_sTag = sTag
									Return nIndex
								Set nIndex = nIndex + 1
							Return -1
					Function: __CreatePageWindow
						Description: Create as a window or return existing window handle
						Returns 
							Window Handle: 
						Parameters 
							Number: nIndex
						Static Variables 
						Local variables 
						Actions 
							If Items[nIndex].m_hWndPage != hWndNULL
								Return Items[nIndex].m_hWndPage
							Else 
								Set Items[nIndex].m_hWndPage = ..CreatePageWindowAsChild( Items[nIndex].m_sForm, 
										 m_hWndParent, m_nPageLeft, m_nPageTop, m_nPageRight, m_nPageBottom )
								If Items[nIndex].m_hWndPage
									Call __SendInitializeMessage( nIndex )
								Return Items[nIndex].m_hWndPage
					Function: __DestroyPageWindow
						Description: Destroy a window
						Returns 
							Boolean: 
						Parameters 
							Number: nIndex
						Static Variables 
						Local variables 
						Actions 
							If Items[nIndex].m_hWndPage != hWndNULL
								Call SalDestroyWindow( Items[nIndex].m_hWndPage )
								Set Items[nIndex].m_hWndPage = hWndNULL
							Return TRUE
					Function: __SendInitializeMessage
						Description: Let a page form initialize itself
						Returns 
							Boolean: 
						Parameters 
							Number: nIndex
						Static Variables 
						Local variables 
						Actions 
							If Items[nIndex].m_hWndPage != hWndNULL
								Call SalSendMsg( Items[nIndex].m_hWndPage, PAGEM_Initialize, 0, SalHStringToNumber( m_sFormPagesData ) )
							Return TRUE
					Function: __SendApplyMessage
						Description: Let a page form apply its changes
						Returns 
							Boolean: 
						Parameters 
							Number: nIndex
						Static Variables 
						Local variables 
						Actions 
							If Items[nIndex].m_hWndPage != hWndNULL
								Call SalSendMsg( Items[nIndex].m_hWndPage, PAGEM_Apply, 0, 0 )
							Return TRUE
					Function: __SendActivateMessage
						Description: Let a page form know that it is being show
						Returns 
							Boolean: 
						Parameters 
							Number: nIndex
						Static Variables 
						Local variables 
						Actions 
							If Items[nIndex].m_hWndPage != hWndNULL
								Call SalSendMsg( Items[nIndex].m_hWndPage, PAGEM_Activate, 0, 0 )
							Return TRUE
					Function: __SendDeactivateMessage
						Description: Let a page form know that it has been hidden
						Returns 
							Boolean: 
						Parameters 
							Number: nIndex
						Static Variables 
						Local variables 
						Actions 
							If Items[nIndex].m_hWndPage != hWndNULL
								Call SalSendMsg( Items[nIndex].m_hWndPage, PAGEM_Deactivate, 0, 0 )
							Return TRUE
			! Functional Class: cFormPageItem
.winattr
.end
				Description: Store information about a page in CPageList
				Derived From 
				Class Variables 
				Instance Variables 
					String: m_sTag
					String: m_sForm
					Window Handle: m_hWndPage
				Functions 
					Function: Show
						Description: 
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
						Actions 
							If m_hWndPage
								Call SalShowWindow( m_hWndPage )
							Return TRUE
					Function: Hide
						Description: 
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
						Actions 
							If m_hWndPage
								Call SalHideWindow( m_hWndPage )
							Return TRUE
					Function: Resize
						Description: Resize the window
						Returns 
							Boolean: 
						Parameters 
							Window Handle: hWndParent
							Number: nLeft
							Number: nTop
							Number: nRight
							Number: nBottom
						Static Variables 
						Local variables 
						Actions 
							If m_hWndPage
								Set nLeft = SalFormUnitsToPixels( hWndParent, nLeft, FALSE )
								Set nRight = SalFormUnitsToPixels( hWndParent, nRight, FALSE )
								Set nBottom = SalFormUnitsToPixels( hWndParent, nBottom, TRUE )
								Set nTop = SalFormUnitsToPixels( hWndParent, nTop, TRUE )
								Call SetWindowPos( m_hWndPage,hWndNULL, nLeft, nTop, nRight - nLeft, nBottom - nTop, SWP_NOZORDER_PageList )
								! The following Sal functions can be used instead of the preceding lines.  Painting is slower
										however.
									! Call SalSetWindowLoc( m_hWndPage, nLeft, nTop )
									! Call SalSetWindowSize( m_hWndPage, nRight - nLeft, nBottom - nTop )
							Return TRUE
			!
			! *** Visual Toolchest - VTCAL.APL
			!
			Custom Control Class: cCalendar
				DLL Name: vti21.dll
				Display Settings
					DLL Name: vti21.dll
					MS Windows Class Name: VT:cCalendar:10
					Style:  Class Default
					ExStyle:  Class Default
					Title:
					Window Location and Size
						Left: Default
						Top: Default
						Width:  3.163"
						Width Editable? Class Default
						Height: 1.792"
						Height Editable? Class Default
					Visible? Class Default
					Border? Yes
					Etched Border? Yes
					Hollow? Class Default
					Vertical Scroll? Class Default
					Horizontal Scroll? Class Default
					Tab Stop? Tab
					Tile To Parent? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: System Window Color
					DLL Settings
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll
				Description: Stand-alone Calendar
				Derived From
				Class Variables
				Instance Variables
					Number: m_lpControl
				Functions
					! *** Configuration functions
					Function: GetColor
						Description: Gets the color assigned to specified role.
						Returns
							Number:
						Parameters
							Number: nColorRole
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisCalGetColor(m_lpControl, nColorRole)
							Return nReturnValue
					! Function: GetStartWD
						Description: Retrieves weekday for first column of calendar.
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisCalGetStartWD(m_lpControl)
							!
							Return nReturnValue
					Function: GetStyle
						Description: Retrieves window style of control.
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisCalGetStyle(m_lpControl)
							Return nReturnValue
					Function: SetColor
						Description: Assignes a color to a specified role.
						Returns
							Number:
						Parameters
							Number: nColorRole
							Number: nNewColor
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisCalSetColor(m_lpControl, nColorRole, nNewColor)
							Return nReturnValue
					! Function: SetStartWD
						Description: Assigns weekday for first column of calendar.
						Returns 
							Number: 
						Parameters 
							Number: nWeekday
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisCalSetStartWD(m_lpControl, nWeekday)
							!
							Return nReturnValue
					Function: SetStyle
						Description: Sets window style of control and returns original style.
						Returns
							Number:
						Parameters
							Number: nStyle
							Boolean: fOn
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisCalSetStyle(m_lpControl, nStyle, fOn)
							Return nReturnValue
					Function: SetMonthText
						Description: Sets the text used to display month names.
						Returns
							Boolean:
						Parameters
							String: lpszMonthNames[*]
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalSetMonths(m_lpControl, lpszMonthNames)
							Return fReturnValue
					Function: SetWeekDayText
						Description: Sets the text used to display weekday names.
						Returns
							Boolean:
						Parameters
							String: lpszWeekDayNames[*]
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalSetWeekDays(m_lpControl, lpszWeekDayNames)
							Return fReturnValue
					Function: WeekStartSet
						Description: Sets the starting weekday for the calendar
						Returns
							Boolean: bOk
						Parameters
							Number: nWeekday
						Static Variables
						Local variables
						Actions
							Return VisCalWeekStartSet(m_lpControl, nWeekday)
					Function: WeekStartGet
						Description: Gets the starting weekday for the calendar
						Returns
							Number: INT
						Parameters
						Static Variables
						Local variables
						Actions
							Return VisCalWeekStartGet(m_lpControl)
					!
					! *** Date Functions
					Function: ClearSelections
						Description: Clears all date selections from internal list.
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalClearMarked(m_lpControl)
							Return fReturnValue
					Function: ClearSpecials
						Description: Clears all special rules from internal list.
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalClearSpecials(m_lpControl)
							Return fReturnValue
					Function: GetFocusDate
						Description: Retrieves the currently highlighted date of control.
						Returns
							Boolean:
						Parameters
							Receive Date/Time: lpdtDateTime
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalGetFocusDate(m_lpControl, lpdtDateTime)
							Return fReturnValue
					Function: GetSelectedDates
						Description: Returns all selected dates for a calendar.
						Returns
							Number:
						Parameters
							Receive Date/Time: lpdtDates[*]
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisCalGetMarked(m_lpControl, lpdtDates)
							Return nReturnValue
					Function: GetSpecialDates
						Description: Returns all special date rules for a calendar.
						Returns
							Number:
						Parameters
							Receive Number: lpnRuleTypes[*]
							Receive Date/Time: lpdtDates[*]
							Receive Number: lpnWeekdays[*]
							Receive Number: lpnSequences[*]
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisCalGetSpecials(m_lpControl, lpnRuleTypes, lpdtDates, lpnWeekdays, lpnSequences)
							Return nReturnValue
					Function: IsSelectedDate
						Description: Determines whether specified date is selected.
						Returns
							Boolean:
						Parameters
							Date/Time: dtSearch
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalIsDateMarked(m_lpControl, dtSearch)
							Return fReturnValue
					Function: IsSpecialDate
						Description: Determines whether specified special rule is in list.
						Returns
							Boolean:
						Parameters
							Number: nRuleType
							Date/Time: dtSearch
							Number: nWeekday
							Number: nSequence
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalIsDateSpecial(m_lpControl, nRuleType, dtSearch, nWeekday, nSequence)
							Return fReturnValue
					Function: SetFocusDate
						Description: Assigns the currently highlighted date for control.
						Returns
							Boolean:
						Parameters
							Date/Time: dtNewFocus
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalSetFocusDate(m_lpControl, dtNewFocus)
							Return fReturnValue
					Function: SelectDate
						Description: Selects/deselects specified date for control.
						Returns
							Boolean:
						Parameters
							Date/Time: dtSearch
							Boolean: fSelect
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalMarkDate(m_lpControl, dtSearch, fSelect)
							Return fReturnValue
					Function: SelectDates
						Description: Selects/deselects multiple dates for control.
						Returns
							Number:
						Parameters
							Date/Time: lpdtSearchList[*]
							Boolean: fSelect
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisCalMarkDates(m_lpControl, lpdtSearchList, fSelect)
							Return nReturnValue
					Function: SpecialDate
						Description: Selects/deselects specified special rule for control.
						Returns
							Boolean:
						Parameters
							Number: nRuleType
							Date/Time: dtSearch
							Number: nWeekday
							Number: nSequence
							Number: nForegroundColor
							Number: nBackgroundColor
							Boolean: fSelect
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalSpecialDate(m_lpControl, nRuleType, dtSearch, nWeekday, nSequence, nForegroundColor, nBackgroundColor, fSelect)
							Return fReturnValue
				Message Actions
					On VTM_ControlCreate
						Set m_lpControl = lParam
			Custom Control Class: cCalendarDropDown
				DLL Name: vti21.dll
				Display Settings
					DLL Name: vti21.dll
					MS Windows Class Name: VT:cComboCal:10
					Style:  Class Default
					ExStyle:  Class Default
					Title:
					Window Location and Size
						Left: Default
						Top: Default
						Width:  1.4"
						Width Editable? Class Default
						Height: 0.24"
						Height Editable? Class Default
					Visible? Class Default
					Border? Class Default
					Etched Border? Yes
					Hollow? Class Default
					Vertical Scroll? Class Default
					Horizontal Scroll? Class Default
					Tab Stop? Tab
					Tile To Parent? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: System Window Color
					DLL Settings
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll
				Description: Date/time data field with drop-down Calendar
				Derived From
				Class Variables
				Instance Variables
					Number: m_lpControl
				Functions
					! *** Configuration functions
					Function: GetColor
						Description: Gets the color assigned to specified role.
						Returns
							Number:
						Parameters
							Number: nColorRole
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisCalGetColor(VisCalCmbGetCalendar(m_lpControl), nColorRole)
							Return nReturnValue
					Function: GetEditable
						Description: Retrieves read-only status of control.
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalCmbGetEditable(m_lpControl)
							Return fReturnValue
					Function: GetPicture
						Description: Retrieves edit mask for control.
						Returns
							Boolean:
						Parameters
							Receive String: lpszPicture
							Number: nMaxLength
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							If (FALSE = SalStrSetBufferLength(lpszPicture, nMaxLength))
								Set fReturnValue = FALSE
							Else
								Set fReturnValue = VisCalCmbGetPicture(m_lpControl, lpszPicture, nMaxLength)
							!
							Return fReturnValue
					! Function: GetStartWD
						Description: Retrieves weekday for first column of calendar.
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisCalGetStartWD(VisCalCmbGetCalendar(m_lpControl))
							!
							Return nReturnValue
					Function: GetStyle
						Description: Retrieves window style of control.
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisCalCmbGetStyle(m_lpControl)
							Return nReturnValue
					Function: SetColor
						Description: Assignes a color to a specified role.
						Returns
							Number:
						Parameters
							Number: nColorRole
							Number: nNewColor
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisCalSetColor(VisCalCmbGetCalendar(m_lpControl), nColorRole, nNewColor)
							Return nReturnValue
					Function: SetEditable
						Description: Updates read-only status of control.
						Returns
							Boolean:
						Parameters
							Boolean: fEditable
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalCmbSetEditable(m_lpControl, fEditable)
							Return fReturnValue
					Function: SetMonthText
						Description: Sets the text used to display month names.
						Returns
							Boolean:
						Parameters
							String: lpszMonthNames[*]
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalSetMonths(VisCalCmbGetCalendar(m_lpControl), lpszMonthNames)
							Return fReturnValue
					Function: SetPicture
						Description: Updates edit mask for control.
						Returns
							Boolean:
						Parameters
							String: szPicture
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalCmbSetPicture(m_lpControl, szPicture)
							Return fReturnValue
					! Function: SetStartWD
						Description: Assigns weekday for first column of calendar.
						Returns 
							Number: 
						Parameters 
							Number: nWeekday
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisCalSetStartWD(VisCalCmbGetCalendar(m_lpControl), nWeekday)
							!
							Return nReturnValue
					Function: SetStyle
						Description: Sets window style of control and returns original style.
						Returns
							Number:
						Parameters
							Number: nStyle
							Boolean: fOn
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisCalCmbSetStyle(m_lpControl, nStyle, fOn)
							Return nReturnValue
					Function: SetWeekDayText
						Description: Sets the text used to display weekday names.
						Returns
							Boolean:
						Parameters
							String: lpszWeekDayNames[*]
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalSetWeekDays(VisCalCmbGetCalendar(m_lpControl), lpszWeekDayNames)
							Return fReturnValue
					Function: WeekStartSet
						Description: Sets the starting weekday for the calendar
						Returns
							Boolean: bOk
						Parameters
							Number: nWeekday
						Static Variables
						Local variables
						Actions
							Return VisCalWeekStartSet(VisCalCmbGetCalendar(m_lpControl), nWeekday)
					Function: WeekStartGet
						Description: Gets the starting weekday for the calendar
						Returns
							Number: INT
						Parameters
						Static Variables
						Local variables
						Actions
							Return VisCalWeekStartGet(m_lpControl)
					!
					! *** Date Functions
					Function: ClearSpecials
						Description: Clears all special rules from internal list.
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalClearSpecials(VisCalCmbGetCalendar(m_lpControl))
							Return fReturnValue
					Function: GetSpecialDates
						Description: Returns all special date rules for a calendar.
						Returns
							Number:
						Parameters
							Receive Number: lpnRuleTypes[*]
							Receive Date/Time: lpdtDates[*]
							Receive Number: lpnWeekdays[*]
							Receive Number: lpnSequences[*]
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisCalGetSpecials(VisCalCmbGetCalendar(m_lpControl), lpnRuleTypes, lpdtDates, lpnWeekdays, lpnSequences)
							Return nReturnValue
					Function: IsSpecialDate
						Description: Determines whether specified special rule is in list.
						Returns
							Boolean:
						Parameters
							Number: nRuleType
							Date/Time: dtSearch
							Number: nWeekday
							Number: nSequence
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalIsDateSpecial(VisCalCmbGetCalendar(m_lpControl), nRuleType, dtSearch, nWeekday, nSequence)
							Return fReturnValue
					Function: SpecialDate
						Description: Selects/deselects specified special rule for control.
						Returns
							Boolean:
						Parameters
							Number: nRuleType
							Date/Time: dtSearch
							Number: nWeekday
							Number: nSequence
							Number: nForegroundColor
							Number: nBackgroundColor
							Boolean: fSelect
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisCalSpecialDate(VisCalCmbGetCalendar(m_lpControl), nRuleType, dtSearch, nWeekday, nSequence, nForegroundColor, nBackgroundColor, fSelect)
							Return fReturnValue
					!
					! *** Misc. functions
					Function: IsValid
						Description: Verifies that contents of calendar are legal.
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Boolean: fReturnValue
							!
							String: szValue
						Actions
							Set fReturnValue = TRUE
							!
							Call SalGetWindowText(hWndItem, szValue, MAX_DefaultDataField)
							If (SalStrLength(szValue) > 0) AND (FALSE = SalStrIsValidDateTime(szValue))
								Set fReturnValue = FALSE
							!
							Return fReturnValue
				Message Actions
					On VTM_ControlCreate
						Set m_lpControl = lParam
					!
					On SAM_Validate
						If (TRUE = cCalendarDropDown.GetEditable())
							If (FALSE = cCalendarDropDown.IsValid())
								Call SalMessageBox('Please enter a valid date/time.', 'cCalendarDropDown', MB_IconExclamation)
								Return VALIDATE_Cancel
						Return VALIDATE_Ok
			!
			! *** Visual Toolchest - VTCOMDLG.APL
			!
			Combo Box Class: cDriveComboBox
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Editable? No
				String Type: Class Default
				Maximum Data Length: Class Default
				Sorted? Class Default
				Always Show List? Class Default
				Vertical Scroll? Class Default
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: Bold
				Text Color: Class Default
				Background Color: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll;32;512;;;
				Description: Displays list of available drives in a combobox.
				Derived From
				Class Variables
				Instance Variables
					Number: nStyle
				Functions
					Function: Populate
						Description: Populates list.
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
							Number: nNumDrives
						Actions
							!
							! ***** Populate window with drive list
							Loop
								Set nNumDrives = VisPopulateDrives( hWndItem )
								If nNumDrives > 0
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Return nNumDrives
					Function: GetDrive
						Description: Retrieves the drive letter at a specified index.
						Returns
							String:
						Parameters
							Number: nIndex
						Static Variables
						Local variables
							Number: nPos
							Number: nDriveType
							String: sItemText
						Actions
							!
							! ***** Get text of item specified
							Set sItemText = VisListGetText( hWndItem, nIndex )
							Set nDriveType = VisListGetValue( hWndItem, nIndex )
							!
							! ***** Parse drive from item text
							Select Case nDriveType
								Case DRIVE_CDROM
								Case DRIVE_Floppy
									Return sItemText
								!
								Case DRIVE_Network
								Case DRIVE_RAM
								Case DRIVE_Fixed
									Set nPos = SalStrScan( sItemText, ' ' )
									Return SalStrLeftX( sItemText, nPos )
								!
								Default
									Return ''
					Function: GetSelectedDrive
						Description: Retrieves the currently selected drive letter.
						Returns
							String:
						Parameters
						Static Variables
						Local variables
							Number: nIndex
						Actions
							!
							! ***** Get text of selected item
							Set nIndex = SalListQuerySelection( hWndItem )
							If nIndex >= 0
								!
								! ***** Return drive letter of selected drive
								Return GetDrive( nIndex )
					Function: GetDriveType
						Description: Retrieves the drive type at a specified index.
						Returns
							Number:
						Parameters
							Number: nIndex
						Static Variables
						Local variables
						Actions
							!
							! ***** Get drive type from item value
							Return VisListGetValue( hWndItem, nIndex )
				List Initialization
				Message Actions
					On SAM_Create
						Call Populate()
			!
			List Box Class: cDesktopListBox
				Window Location and Size
					Left: Default
					Top: Default
					Width:  1.2"
					Width Editable? Class Default
					Height: 0.717"
					Height Editable? Class Default
				Visible? Class Default
				Multiple selection? Class Default
				Sorted? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: None
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description: Displays directory tree in a listbox similar to Win95
				Derived From
					Class: cOutline
					Class: cListBoxExtension
				Class Variables
					Number: nLoadCount
					Number: hPicDrvCD
					Number: hPicDrvFloppy
					Number: hPicDrvFixed
					Number: hPicDrvNet
					Number: hPicDrvRAM
					Number: hPicFldrOpen
					Number: hPicFldr
					Number: hPicDesktop
					Number: hPicMyComputer
					Number: hPicNetNeighborhood
				Instance Variables
					Number: hItemRoot
					Number: hItemDesktop
					Number: hItemNetNeighborhood
					Number: hItemMyComputer
					Number: hItemParent
					Number: nIndex
					Number: nDriveType
					Number: nNumDrives
					Number: nNumItems
					Number: nItemFlags
					Number: nDirIndex
					Number: nPos
					Number: nLength
					Number: nCount
					Number: nValues[*]
					Number: nFlags[*]
					Number: hItems[*]
					String: sDirs[*]
					String: sDrives[*]
					String: sText
					String: sChildDir
					String: sNetName
					String: sShareName
					String: sServerName
				Functions
					Function: GetSelectedDir
						Description: Retrieves currently selected directory.
						Returns
							String:
						Parameters
						Static Variables
						Local variables
							Number: nLevel
							Number: nIndex
							Number: hItem
							Number: nValue
							String: sText
							String: sCurDir
						Actions
							!
							! ***** Get text of selected item
							Set nIndex = SalListQuerySelection( hWndItem )
							If nIndex >= 0
								!
								! ***** Get item handle and build path
								Set nValue = VisListGetValue( hWndItem, nIndex )
								Select Case nValue
									Case DESKTOP_Root
									Case DESKTOP_MyComputer
									Case DESKTOP_NetworkNeighborhood
										Return STRING_Null
									Default
										Set hItem = VisListGetItemHandle( hWndItem, nIndex )
										Return GetItemDir( hItem )
							Else
								Return STRING_Null
					Function: GetItemDir
						Description: Retrieves directory for specified item handle.
						Returns
							String:
						Parameters
							Number: hItem
						Static Variables
						Local variables
							Number: nLevel
							Number: nIndex
							String: sText
							String: sCurDir
						Actions
							!
							! ***** Get text of item selected
							Set sCurDir = ''
							Set nLevel = VisListGetLevel( hItem )
							Set sText = VisListGetItemText( hItem )
							!
							! ***** For all child levels, build path
							While nLevel > 2
								Set sCurDir = sText || '\\' || sCurDir
								Set hItem = VisListGetParent( hItem )
								Set nLevel = VisListGetLevel( hItem )
								Set sText = VisListGetItemText( hItem )
							!
							! ***** Search for parens for drive letter
							Set nPos = SalStrScan( sText, '(' )
							Set sCurDir = SalStrMidX( sText, nPos + 1, 2 ) || '\\' || sCurDir
							Return sCurDir
				List Initialization
				Message Actions
					On SAM_Create
						!
						! ***** Get root item handle
						Loop
							Set hItemRoot = GetRoot( )
							If hItemRoot
								Break
							If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
								Call SalQuit()
						!
						! ***** Load Desktop item
						Loop
							Set hItemDesktop = LoadChild( hItemRoot, hPicDesktop, hPicDesktop, 'Desktop', DESKTOP_Root, 0 )
							If hItemDesktop
								Break
							If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
								Call SalQuit()
						!
						! ***** Load My Computer
						Loop
							Set hItemMyComputer = LoadChild( hItemDesktop, hPicMyComputer, hPicMyComputer, 'My Computer', DESKTOP_MyComputer, 0 )
							If hItemMyComputer
								Break
							If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
								Call SalQuit()
						!
						! ***** Load Network Neighborhood
						Loop
							Set hItemNetNeighborhood = LoadChild( hItemDesktop, hPicNetNeighborhood, hPicNetNeighborhood, 'Network Neighborhood', DESKTOP_NetworkNeighborhood, 0 )
							If hItemNetNeighborhood
								Break
							If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
								Call SalQuit()
						!
						! ***** Enumerate all available drives
						Set nIndex = 0
						Set nNumDrives = VisDosEnumDrives( sDrives )
						While nIndex < nNumDrives
							!
							! ***** Format text based on drive type
							Set nDriveType = VisDosGetDriveType( sDrives[nIndex] )
							Select Case nDriveType
								Case DRIVE_Floppy
									Set sText = 'Floppy (' || sDrives[nIndex] || ')'
									Loop
										Set hItem = LoadChild( hItemMyComputer, hPicDrvFloppy, hPicDrvFloppy, sText, nDriveType, ITEM_CanExpand )
										If hItem
											Break
										If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
											Call SalQuit()
									Break
								Case DRIVE_Fixed
									Set sText =  VisDosGetVolumeLabel( sDrives[nIndex] ) || ' (' || sDrives[nIndex] || ')'
									Loop
										Set hItem = LoadChild( hItemMyComputer, hPicDrvFixed, hPicDrvFixed, sText, nDriveType, ITEM_CanExpand )
										If hItem
											Break
										If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
											Call SalQuit()
									Break
								Case DRIVE_Network
									!
									! ***** Get server name and share name
									Set sNetName = VisDosGetNetName( sDrives[nIndex] )
									Set nPos = VisStrScanReverse( sNetName, -1, '\\' )
									Set nLength = SalStrLength( sNetName )
									Set sShareName = VisStrProper( SalStrRightX( sNetName, nLength - nPos - 1 ) )
									Set sServerName = VisStrProper( SalStrMidX( sNetName, 2, nPos - 2 ) )
									!
									! ***** Format network drive
									Set sText = sShareName || ' on \'' || sServerName || '\' (' || sDrives[nIndex] || ')'
									Loop
										Set hItem = LoadChild( hItemMyComputer, hPicDrvNet, hPicDrvNet, sText, nDriveType, ITEM_CanExpand )
										If hItem
											Break
										If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
											Call SalQuit()
									Break
								Case DRIVE_RAM
									Loop
										If hItem
											Break
										If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
											Call SalQuit()
									Break
								Case DRIVE_CDROM
									Set sText = '(' || sDrives[nIndex] || ')'
									Loop
										Set hItem = LoadChild( hItemMyComputer, hPicDrvCD, hPicDrvCD, sText, nDriveType, ITEM_CanExpand )
										If hItem
											Break
										If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
											Call SalQuit()
									Break
							!
							! ***** Increment to next drive
							Set nIndex = nIndex + 1
						!
						! ***** Show outline
						Call ShowOutline( SHOW_AllLevels )
					On SAM_Destroy
						!
						! ***** Free all pictures loaded
						Set nLoadCount = nLoadCount - 1
						If nLoadCount = 0
							Call VisPicFree( hPicDrvCD )
							Call VisPicFree( hPicDrvFloppy )
							Call VisPicFree( hPicDrvFixed )
							Call VisPicFree( hPicDrvNet )
							Call VisPicFree( hPicDrvRAM )
							Call VisPicFree( hPicFldr )
							Call VisPicFree( hPicFldrOpen )
							Call VisPicFree( hPicDesktop )
							Call VisPicFree( hPicNetNeighborhood )
							Call VisPicFree( hPicMyComputer )
					On SAM_DoubleClick
						!
						! ***** Get item flags for selected item
						Set nIndex = VisListGetFocusIndex( hWndItem )
						Call SalSendMsg( hWndItem, VTM_OutlineCornerClick, nIndex, 0 )
					!
					On VTM_Create
						Call SetStyle( LBS_VisExtensions | LBS_Explorer | LBS_FmtMixedcase )
						!
						! ***** Load bitmaps if not already loaded
						If nLoadCount = 0
							Loop
								Set hPicDrvCD = VisPicLoad( PIC_FormatBitmap, VT_DLLName, VTPIC_DriveCDROM )
								If hPicDrvCD
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicDrvFloppy = VisPicLoad( PIC_FormatBitmap, VT_DLLName, VTPIC_DriveFloppy )
								If hPicDrvFloppy
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicDrvFixed = VisPicLoad( PIC_FormatBitmap, VT_DLLName, VTPIC_DriveFixed )
								If hPicDrvFixed
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicDrvNet = VisPicLoad( PIC_FormatBitmap, VT_DLLName, VTPIC_DriveNetwork )
								If hPicDrvNet
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicDrvRAM = VisPicLoad( PIC_FormatBitmap, VT_DLLName, VTPIC_DriveRAM )
								If hPicDrvRAM
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicFldr = VisPicLoad( PIC_FormatBitmap, VT_DLLName, VTPIC_Folder )
								If hPicFldr
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicFldrOpen = VisPicLoad( PIC_FormatBitmap, VT_DLLName, VTPIC_FolderOpen )
								If hPicFldrOpen
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicDesktop = VisPicLoad( PIC_FormatBitmap, VT_DLLName, VTPIC_Desktop )
								If hPicDesktop
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicNetNeighborhood = VisPicLoad( PIC_FormatBitmap, VT_DLLName, VTPIC_NetworkNeighborhood )
								If hPicNetNeighborhood
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicMyComputer = VisPicLoad( PIC_FormatBitmap, VT_DLLName, VTPIC_MyComputer )
								If hPicMyComputer
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
						Set nLoadCount = nLoadCount + 1
					On VTM_OutlineCornerClick
						!
						! ***** Get item flags for selected item
						Set nIndex = wParam
						Set hItem = VisListGetItemHandle( hWndItem, nIndex )
						Set nLevel = VisListGetLevel( hItem )
						Loop
							Set nItemFlags = VisListGetFlags( hWndItem, nIndex )
							If nItemFlags != LB_Err
								Break
							If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
								Call SalQuit()
						!
						! ***** Expand or collapse based on item flags
						If (nItemFlags & ITEM_IsParent) and (nItemFlags & ITEM_IsExpanded)
							!
							! ***** Collapse item selected
							Loop
								If VisListCollapse( hWndItem, nIndex )
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
						Else If (nItemFlags & ITEM_IsParent) and Not (nItemFlags & ITEM_IsExpanded)
							!
							! ***** Expand item selected
							Loop
								If VisListExpand( hWndItem, nIndex )
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
						Else If nItemFlags & ITEM_CanExpand
							!
							! ***** Wait cursor on
							If nLevel = 2
								Call SalWaitCursor( TRUE )
							!
							! ***** Enumerate all subdirectories and insert as children of selected item
							Set nNumItems = VisDosEnumDirs( GetItemDir(hItem) || '*.*', sDirs )
							If nNumItems > 0
								Call VisArraySort( sDirs, SORT_Ascending, DT_String )
								Call VisArrayFillNumber( nValues, 0, nNumItems )
								Call VisArrayFillNumber( nFlags, 0, nNumItems )
								!
								! ***** Insert all directories as children
								Loop
									If VisListLoadChildren( hWndItem, hItem,  hPicFldr, hPicFldrOpen, sDirs, nValues, nFlags ) = nNumItems
										Break
									If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
										Call SalQuit()
								!
								! ***** Get handles to children just loaded
								Set nNumItems = VisListEnumChildren( hItem, hItems )
								Set nCount = 0
								While nCount < nNumItems
									!
									! ***** If subdirectories exist, set ITEM_CanExpand flag to display corners
									If VisDosIsParent( GetItemDir( hItems[nCount] ) )
										Call VisListSetItemFlags( hItems[nCount], ITEM_CanExpand, TRUE )
									Set nCount = nCount + 1
								!
								! ***** Expand item selected
								Loop
									If VisListExpand( hWndItem, nIndex )
										Break
									If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
										Call SalQuit()
							!
							! ***** Wait cursor off
							If nLevel = 2
								Call SalWaitCursor( FALSE )
			List Box Class: cDirListBox
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Multiple selection? No
				Sorted? No
				Vertical Scroll? Yes
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: Bold
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll;4128;64;;;
				Description: Displays collapsible list of directories in a listbox.
				Derived From
				Class Variables
					Number: hPicFldr
					Number: hPicFldrCur
					Number: hPicFldrOpen
					Number: nLoadCount
				Instance Variables
					Number: nIndex
					String: sPopulateDir
					String: sPropValue
					String: sIniFile
					String: sSection
					String: sEntry
					String: sTempDir
					String: sCurrentDir
				Functions
					Function: Populate
						Description: bOk Populate( sDir )
						Returns
							Boolean: bReturn
						Parameters
							String: sDir
						Static Variables
						Local variables
							String: sDrive
							String: sBase
							String: sExt
							String: sDirs[*]
							Number: nNumDirs
							Number: nCount
							Number: hItemParent
							Number: hPic
						Actions
							!
							! ***** Validate directory argument
							If Not VisDosExist( sDir )
								Return FALSE
							!
							! ***** Populate with common directory listing
							Loop
								If VisPopulateCommonDir( hWndItem, sDir )
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Return TRUE
					Function: GetSelectedDir
						Description: sCurDir GetSelectedDir()
						Returns
							String:
						Parameters
						Static Variables
						Local variables
						Actions
							!
							! ***** BITTS 60517 - Removed commented code; now only returns member variable set during double-click event
							! Set nIndex = SalListQuerySelection( hWndItem )
							! If nIndex >= 0
								Return VisGetCommonDir( hWndItem, nIndex )
							! Else
								Return STRING_Null
							Return sCurrentDir || ''
					Function: SetSelectedDir
						Description: sCurDir SetSelectedDir()
						Returns
							String:
						Parameters
						Static Variables
						Local variables
						Actions
							!
							! ***** Set selected item
							Set nIndex = SalListQuerySelection( hWndItem )
							If nIndex >= 0
								Return VisSetCommonDir( hWndItem, nIndex )
							Else
								Return STRING_Null
				List Initialization
				Message Actions
					On SAM_Create
						!
						! ***** Get current window properties
						Set sPopulateDir = VisDosGetCurDir( SalFileGetDrive() )
						If SalWindowGetProperty( hWndItem, 'VT:DirInitial', sPropValue )
							If sPropValue = 'D'
								!
								! ***** Get INI file properties
								Call SalWindowGetProperty( hWndItem, 'VT:DirIniFile', sIniFile )
								Call SalWindowGetProperty( hWndItem, 'VT:DirSection', sSection )
								Call SalWindowGetProperty( hWndItem, 'VT:DirEntry', sEntry )
								!
								! ***** Get directory from INI file and test for existence
								If SalGetProfileString( sSection, sEntry, '', sTempDir, sIniFile )
									If VisDosExist( sTempDir )
										Set sPopulateDir = sTempDir
							Else If sPropValue = 'S'
								Call SalWindowGetProperty( hWndItem, 'VT:DirSpecificDir', sTempDir )
								If VisDosExist( sTempDir )
									Set sPopulateDir = sTempDir
						!
						! ***** Populate directory list box with hierarchy
						Call Populate( sPopulateDir )
					On SAM_DoubleClick
						Set sCurrentDir = SetSelectedDir()
			List Box Class: cDirTreeListBox
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Multiple selection? No
				Sorted? No
				Vertical Scroll? Yes
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: None
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll;4128;64;;;
				Description: Displays directory tree outline in a listbox.
				Derived From
				Class Variables
					Number: hPicFldr
					Number: hPicFldrCur
					Number: nLoadCount
				Instance Variables
					Number: nIndex
					Number: hItem
					Number: nNumItems
					Number: nItemFlags
					String: sDirs[*]
					Number: nValues[*]
					Number: nFlags[*]
				Functions
					Function: Populate
						Description:
						Returns
							Boolean: bReturn
						Parameters
							String: sDrive
						Static Variables
						Local variables
							String: sDir
							String: sBase
							String: sExt
							String: sDirs[*]
							Number: nNumItems
							Number: hItemParent
							Number: hItemRoot
							Number: nValues[*]
							Number: nItemFlags[*]
						Actions
							!
							! ***** Validate drive letter argument
							If Not VisDosExist( sDrive )
								Return FALSE
							!
							! ***** Populate directory hierarchy
							Loop
								If VisPopulateDirTree( hWndItem, sDrive )
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
					Function: GetSelectedDir
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
							Number: nLevel
							Number: nValue
							Number: nItemFlags
							Number: nIndex
							Number: hItem
							String: sText
							String: sCurDir
						Actions
							!
							! ***** Get text of selected item
							Set nIndex = SalListQuerySelection( hWndItem )
							If nIndex >= 0
								Set sCurDir = ''
								Set hItem = VisListGetItemHandle( hWndItem, nIndex )
								Set nLevel = VisListGetLevel( hItem )
								Call VisListGetItemData( hItem, sText, nValue, nItemFlags )
								While nLevel >= 0
									If SalStrRightX( sText, 1 ) = '\\'
										Set sCurDir = sText || sCurDir
									Else
										Set sCurDir = sText || '\\' || sCurDir
									!
									Set hItem = VisListGetParent( hItem )
									Set nLevel = VisListGetLevel( hItem )
									Call VisListGetItemData( hItem, sText, nValue, nItemFlags )
								Return sCurDir
							Else
								Return STRING_Null
				List Initialization
				Message Actions
					On SAM_Create
						Call Populate( SalFileGetDrive() )
					On SAM_DoubleClick
						!
						! ***** If Control key down, expand all children
						Set nIndex = SalListQuerySelection( hWndItem )
						If VisGetKeyState( VK_Control ) & KS_Down
							!
							! ***** Expand item selected
							Loop
								If VisListExpandDescendents( hWndItem, nIndex )
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
						Else
							!
							! ***** Get item flags for selected item
							Loop
								Set nItemFlags = VisListGetFlags( hWndItem, nIndex )
								If nItemFlags != LB_Err
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							!
							! ***** Expand or collapse based on item flags
							If (nItemFlags & ITEM_IsParent) and (nItemFlags & ITEM_IsExpanded)
								!
								! ***** Collapse item selected
								Loop
									If VisListCollapse( hWndItem, nIndex )
										Break
									If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
										Call SalQuit()
							Else If (nItemFlags & ITEM_IsParent) and Not (nItemFlags & ITEM_IsExpanded)
								!
								! ***** Expand item selected
								Loop
									If VisListExpand( hWndItem, nIndex )
										Break
									If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
										Call SalQuit()
							Else
								!
								! ***** Enumerate all subdirectories and insert as children of selected item
								Set hItem = VisListGetItemHandle( hWndItem, nIndex )
								Set nNumItems = VisDosEnumDirs( GetSelectedDir() || '*.*', sDirs )
								If nNumItems > 0
									Call VisArraySort( sDirs, SORT_Ascending, DT_String )
									Call VisArrayFillNumber( nValues, 0, nNumItems )
									Call VisArrayFillNumber( nFlags, 0, nNumItems )
									!
									! ***** Insert all directories as children
									Loop
										If VisListLoadChildren( hWndItem, hItem,  hPicFldr, hPicFldrCur, sDirs, nValues, nFlags ) = nNumItems
											Break
										If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
											Call SalQuit()
									!
									! ***** Expand item selected
									Loop
										If VisListExpand( hWndItem, nIndex )
											Break
										If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
											Call SalQuit()
					!
					On VTM_Create
						!
						! ***** Load bitmaps if not already loaded
						If nLoadCount = 0
							Loop
								Set hPicFldr = VisPicLoad( PIC_LoadResource | PIC_FormatBitmap, VT_DLLName, VTPIC_Folder )
								If hPicFldr
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicFldrCur = VisPicLoad( PIC_LoadResource | PIC_FormatBitmap, VT_DLLName, VTPIC_FolderCur )
								If hPicFldrCur
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
						Set nLoadCount = nLoadCount + 1
					On VTM_Destroy
						!
						! ***** Free all pictures loaded
						Set nLoadCount = nLoadCount - 1
						If nLoadCount = 0
							Call VisPicFree( hPicFldr )
							Call VisPicFree( hPicFldrCur )
					On VTM_KeyDown
						!
						! ***** Get selected item
						Set nIndex = SalListQuerySelection( hWndItem )
						If nIndex >= 0
							Select Case wParam
								Case VK_Add
									!
									! ***** Get item flags for selected item
									Loop
										Set nItemFlags = VisListGetFlags( hWndItem, nIndex )
										If nItemFlags != LB_Err
											Break
										If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
											Call SalQuit()
									!
									! ***** If never expanded, get directories and insert as children
									If (nItemFlags & ITEM_IsParent) and Not (nItemFlags & ITEM_IsExpanded)
										!
										! ***** Expand item selected
										Loop
											If VisListExpand( hWndItem, nIndex )
												Break
											If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
												Call SalQuit()
									Else If Not (nItemFlags & ITEM_IsParent)
										!
										! ***** Enumerate all subdirectories and insert as children of selected item
										Set hItem = VisListGetItemHandle( hWndItem, nIndex )
										Set nNumItems = VisDosEnumDirs( GetSelectedDir() || '*.*', sDirs )
										If nNumItems > 0
											Call VisArraySort( sDirs, SORT_Ascending, DT_String )
											Call VisArrayFillNumber( nValues, 0, nNumItems )
											Call VisArrayFillNumber( nFlags, 0, nNumItems )
											!
											! ***** Insert all directories as children
											Loop
												If VisListLoadChildren( hWndItem, hItem,  hPicFldr, hPicFldrCur, sDirs, nValues, nFlags ) = nNumItems
													Break
												If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
													Call SalQuit()
											!
											! ***** Expand item selected
											Loop
												If VisListExpand( hWndItem, nIndex )
													Break
												If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
													Call SalQuit()
									Break
								Case VK_Subtract
									!
									! ***** Collapse item selected
									Loop
										If VisListCollapse( hWndItem, nIndex )
											Break
										If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
											Call SalQuit()
									Break
			List Box Class: cDriveListBox
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Multiple selection? Class Default
				Sorted? Class Default
				Vertical Scroll? Class Default
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: Bold
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll;4128;64;;;
				Description: Displays list of available drives in a listbox.
				Derived From
				Class Variables
				Instance Variables
					Number: nStyle
				Functions
					Function: Populate
						Description:
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
							Number: nNumDrives
						Actions
							!
							! ***** Populate window with drive list
							Loop
								Set nNumDrives = VisPopulateDrives( hWndItem )
								If nNumDrives > 0
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Return nNumDrives
					Function: GetDrive
						Description:
						Returns
							String:
						Parameters
							Number: nIndex
						Static Variables
						Local variables
							Number: nPos
							Number: nDriveType
							String: sItemText
						Actions
							!
							! ***** Get text of item specified
							Set sItemText = VisListGetText( hWndItem, nIndex )
							Set nDriveType = VisListGetValue( hWndItem, nIndex )
							!
							! ***** Parse drive from item text
							Select Case nDriveType
								Case DRIVE_CDROM
								Case DRIVE_Floppy
									Return sItemText
								!
								Case DRIVE_Network
								Case DRIVE_RAM
								Case DRIVE_Fixed
									Set nPos = SalStrScan( sItemText, ' ' )
									Return SalStrLeftX( sItemText, nPos )
								!
								Default
									Return ''
					Function: GetSelectedDrive
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
							Number: nIndex
						Actions
							!
							! ***** Get text of selected item
							Set nIndex = SalListQuerySelection( hWndItem )
							If nIndex >= 0
								!
								! ***** Return drive letter of selected drive
								Return GetDrive( nIndex )
					Function: GetDriveType
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
						Static Variables
						Local variables
						Actions
							!
							! ***** Get drive type from item value
							Return VisListGetValue( hWndItem, nIndex )
				List Initialization
				Message Actions
					On SAM_Create
						Call Populate()
			List Box Class: cFileListBox
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Multiple selection? Class Default
				Sorted? No
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: None
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description: Displays file information for specified directory.
				Derived From
					Class: cListBoxExtension
				Class Variables
					Number: nLoadCount
					Number: hPicFileSystem
					Number: hPicFilePrograms
					Number: hPicFileDocuments
					Number: hPicFileAllOther
					Number: hPicFolder
					Number: hPicPrevDir
				Instance Variables
					Number: nTabStops[*]
				Functions
					Function: Populate
						Description: Fills list box with file information.
						Returns
							Number:
						Parameters
							String: sPath
						Static Variables
						Local variables
							Date/Time: dtDateTimes[*]
							!
							Number: nNumFiles
							Number: nNumDirs
							Number: nIndex
							Number: hPic
							Number: nFileType
							Number: nFileSizes[*]
							Number: nAttribs[*]
							!
							String: sFileList[*]
							String: sDirList[*]
							String: sAttribs
						Actions
							Call SalWaitCursor( TRUE )
							!
							! ***** Clear list box and add previous directory item
							Call SalListClear( hWndItem )
							Call AddPicture( '', hPicPrevDir, hPicPrevDir )
							!
							! ***** Get directory information and loop for each directory
							Set nNumDirs = VisDosEnumDirInfo( sPath || '*.*', sDirList, dtDateTimes, nAttribs )
							Set nIndex = 0
							While (nIndex < nNumDirs)
								!
								! ***** Convert attributes to string
								Set sAttribs = ''
								If nAttribs[nIndex] & FA_ReadOnly
									Set sAttribs = sAttribs || 'r'
								If nAttribs[nIndex] & FA_Hidden
									Set sAttribs = sAttribs || 'h'
								If nAttribs[nIndex] & FA_System
									Set sAttribs = sAttribs || 's'
								If nAttribs[nIndex] & FA_Archive
									Set sAttribs = sAttribs || 'a'
								!
								! ***** Add directory to file list
								Call AddPicture( sDirList[nIndex] || '		' ||
											SalFmtFormatDateTime( dtDateTimes[nIndex], 'M/d/yy' ) || '	' ||
											SalFmtFormatDateTime( dtDateTimes[nIndex], 'hh:mm:ss AMPM' ) || '	' ||
											sAttribs, hPicFolder, hPicFolder )
								Set nIndex = nIndex + 1
							!
							! ***** Get file information and loop for each file
							Set nNumFiles = VisDosEnumFileInfo( sPath || '*.*', FA_Standard, sFileList, nFileSizes, dtDateTimes, nAttribs )
							Set nIndex = 0
							While (nIndex < nNumFiles)
								!
								! ***** Convert attributes to string
								Set sAttribs = ''
								If nAttribs[nIndex] & FA_ReadOnly
									Set sAttribs = sAttribs || 'r'
								If nAttribs[nIndex] & FA_Hidden
									Set sAttribs = sAttribs || 'h'
								If nAttribs[nIndex] & FA_System
									Set sAttribs = sAttribs || 's'
								If nAttribs[nIndex] & FA_Archive
									Set sAttribs = sAttribs || 'a'
								!
								! ***** Get file type and determine picture based on type
								Set nFileType = VisFileGetType( sPath || sFileList[nIndex] )
								If nFileType = FILETYPE_System
									Set hPic = hPicFileSystem
								Else If nFileType = FILETYPE_Program
									Set hPic = hPicFilePrograms
								Else If nFileType = FILETYPE_Document
									Set hPic = hPicFileDocuments
								Else
									Set hPic = hPicFileAllOther
								!
								! ***** Add lines to file list
								Call AddPicture( sFileList[nIndex] || '	' ||
											SalFmtFormatNumber( nFileSizes[nIndex], '#,##0' ) || '	' ||
											SalFmtFormatDateTime( dtDateTimes[nIndex], 'M/d/yy' ) || '	' ||
											SalFmtFormatDateTime( dtDateTimes[nIndex], 'hh:mm:ss AMPM' ) || '	' ||
											sAttribs, hPic, hPic )
								Set nIndex = nIndex + 1
							!
							Call SalWaitCursor(FALSE)
							Return nNumDirs + nNumFiles + 1
				List Initialization
				Message Actions
					On SAM_Create
						!
						! ***** Set default tab stops
						Set nTabStops[0] = 1.1
						Set nTabStops[1] = 1.85
						Set nTabStops[2] = 2.45
						Set nTabStops[3] = 3.25
						Call SalListSetTabs( hWndItem, nTabStops )
					On SAM_Destroy
						!
						! ***** Free all pictures loaded
						Set nLoadCount = nLoadCount - 1
						If nLoadCount = 0
							Call VisPicFree( hPicFileSystem )
							Call VisPicFree( hPicFilePrograms )
							Call VisPicFree( hPicFileDocuments )
							Call VisPicFree( hPicFileAllOther )
							Call VisPicFree( hPicFolder )
							Call VisPicFree( hPicPrevDir )
					!
					On VTM_Create
						Call SalSendClassMessage( VTM_Create, wParam, lParam )
						Call SetStyle( LBS_FmtLowercase )
						!
						! ***** Load bitmaps if not already loaded
						If nLoadCount = 0
							Loop
								Set hPicFileSystem = VisPicLoad( PIC_LoadResource | PIC_FormatBitmap, VT_DLLName, VTPIC_FileSystem )
								If hPicFileSystem
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicFilePrograms = VisPicLoad( PIC_LoadResource | PIC_FormatBitmap, VT_DLLName, VTPIC_FilePrograms )
								If hPicFilePrograms
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicFileDocuments = VisPicLoad( PIC_LoadResource | PIC_FormatBitmap, VT_DLLName, VTPIC_FileDocuments )
								If hPicFileDocuments
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicFileAllOther = VisPicLoad( PIC_LoadResource | PIC_FormatBitmap, VT_DLLName, VTPIC_FileAllOther )
								If hPicFileAllOther
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicFolder = VisPicLoad( PIC_LoadResource | PIC_FormatBitmap, VT_DLLName, VTPIC_Folder )
								If hPicFolder
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicPrevDir = VisPicLoad( PIC_LoadResource | PIC_FormatBitmap, VT_DLLName, VTPIC_PrevDirectory )
								If hPicPrevDir
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
						Set nLoadCount = nLoadCount + 1
			!
			! ***** Visual Toolchest - VTCOMM.APL
			!
			Functional Class: sPoint
				Description: Describes Windows SDK POINT structure.
				Derived From
				Class Variables
				Instance Variables
					Number: m_nX
					Number: m_nY
				Functions
			Functional Class: sRect
				Description: Describes Windows SDK RECT structure.
				Derived From
				Class Variables
				Instance Variables
					Number: m_nLeft
					Number: m_nTop
					Number: m_nRight
					Number: m_nBottom
				Functions
			Functional Class: sSize
				Description: Describes Windows SDK SIZE structure.
				Derived From
				Class Variables
				Instance Variables
					Number: m_nCX
					Number: m_nCY
				Functions
			!
			! *** Visual Toolchest - VTFONTNM.APL
			!
			Combo Box Class: cFontNameComboBox
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Editable? No
				String Type: Class Default
				Maximum Data Length: Class Default
				Sorted? Class Default
				Always Show List? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll;32;512;;;
				Description:
				Derived From
				Class Variables
				Instance Variables
					Number: nFontType
					String: sPropValue
				Functions
					Function: Populate
						Description:
						Returns
							Number:
						Parameters
							Number: nGetFlag
						Static Variables
						Local variables
							Number: nNumFonts
						Actions
							!
							! ***** Populate list with font names
							Loop
								Set nNumFonts = VisPopulateFontNames( hWndItem, nGetFlag )
								If nNumFonts
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Return nNumFonts
					Function: GetSelectedFont
						Description:
						Returns
							Boolean:
						Parameters
							Receive String: sFontName
							Receive Number: nFontType
						Static Variables
						Local variables
							Number: nIndex
						Actions
							!
							! ***** Get selected item
							Set nIndex = SalListQuerySelection( hWndItem )
							If nIndex = LB_Err
								Return FALSE
							!
							! ***** Get selected font name
							Set sFontName = VisListGetText( hWndItem, nIndex )
							If sFontName = STRING_Null
								Return FALSE
							!
							! ***** Get selected font type from list box value
							Set nFontType = VisListGetValue( hWndItem, nIndex )
							If nFontType = LB_Err
								Return FALSE
							!
							Return TRUE
				List Initialization
				Message Actions
					On SAM_Create
						!
						! ***** Get current window properties
						Set nFontType = FONT_GetScreen
						If SalWindowGetProperty( hWndItem, 'VT:FontNamePrinter', sPropValue )
							If sPropValue != 'YES'
								Set nFontType = 0
						If SalWindowGetProperty( hWndItem, 'VT:FontNameScreen', sPropValue )
							If sPropValue = 'YES'
								Set nFontType = nFontType | FONT_GetScreen
						!
						! ***** Populate with font names
						Call Populate( nFontType )
			List Box Class: cFontNameListBox
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Multiple selection? Class Default
				Sorted? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll;4128;64;;;
				Description:
				Derived From
				Class Variables
				Instance Variables
					Number: nFontType
					String: sPropValue
				Functions
					Function: Populate
						Description:
						Returns
							Number:
						Parameters
							Number: nGetFlag
						Static Variables
						Local variables
							Number: nNumFonts
						Actions
							!
							! ***** Populate list with font names
							Loop
								Set nNumFonts = VisPopulateFontNames( hWndItem, nGetFlag )
								If nNumFonts
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Return nNumFonts
					Function: GetSelectedFont
						Description:
						Returns
							Boolean:
						Parameters
							Receive String: sFontName
							Receive Number: nFontType
						Static Variables
						Local variables
							Number: nIndex
						Actions
							!
							! ***** Get selected item
							Set nIndex = SalListQuerySelection( hWndItem )
							If nIndex = LB_Err
								Return FALSE
							!
							! ***** Get selected font name
							Set sFontName = VisListGetText( hWndItem, nIndex )
							If sFontName = STRING_Null
								Return FALSE
							!
							! ***** Get selected font type from list box value
							Set nFontType = VisListGetValue( hWndItem, nIndex )
							If nFontType = LB_Err
								Return FALSE
							!
							Return TRUE
				List Initialization
				Message Actions
					On SAM_Create
						!
						! ***** Get current window properties
						Set nFontType = FONT_GetScreen
						If SalWindowGetProperty( hWndItem, 'VT:FontNamePrinter', sPropValue )
							If sPropValue != 'YES'
								Set nFontType = 0
						If SalWindowGetProperty( hWndItem, 'VT:FontNameScreen', sPropValue )
							If sPropValue = 'YES'
								Set nFontType = nFontType | FONT_GetScreen
						!
						! ***** Populate with font names
						Call Populate( nFontType )
			!
			! ***** Visual Toolchest - VTLBX.APL
			!
			Combo Box Class: cColorComboBox
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Editable? No
				String Type: Class Default
				Maximum Data Length: Class Default
				Sorted? Class Default
				Always Show List? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll;32;512;;;
				Description: Combobox which supports different colors for entries.
				Derived From
					Class: cListBoxExtension
				Class Variables
				Instance Variables
				Functions
				List Initialization
				Message Actions
			Combo Box Class: cFontComboBox
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Editable? No
				String Type: Class Default
				Maximum Data Length: Class Default
				Sorted? Class Default
				Always Show List? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll;32;512;;;
				Description: Combobox which supports different fonts for entries.
				Derived From
					Class: cListBoxExtension
				Class Variables
				Instance Variables
				Functions
				List Initialization
				Message Actions
			Combo Box Class: cOutlineComboBox
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Editable? Class Default
				String Type: Class Default
				Maximum Data Length: Class Default
				Sorted? No
				Always Show List? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll;32;512;;;
				Description: Combobox which supports heirarchical tree outlines.
				Derived From
					Class: cListBoxExtension
					Class: cOutline
				Class Variables
				Instance Variables
				Functions
				List Initialization
				Message Actions
			Combo Box Class: cPictureComboBox
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Editable? Class Default
				String Type: Class Default
				Maximum Data Length: Class Default
				Sorted? Class Default
				Always Show List? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll;32;512;;;
				Description: Combobox which supports pictures in conjunction with text.
						
						TIP: To override the default behavior of loading design-time
						settings, insert an empty SAM_Create handler in your instance
						of this class.
				Derived From
					Class: cListBoxExtension
				Class Variables
				Instance Variables
				Functions
				List Initialization
				Message Actions
					On SAM_Create
						Call VisPopulatePictureFromProperty( hWndItem, hWndItem )
			!
			List Box Class: cColorListBox
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Multiple selection? Class Default
				Sorted? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll;4128;64;;;
				Description: Color List Box
				Derived From
					Class: cListBoxExtension
				Class Variables
				Instance Variables
				Functions
				List Initialization
				Message Actions
			List Box Class: cFontListBox
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Multiple selection? Class Default
				Sorted? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll;4128;64;;;
				Description: Font List Box
				Derived From
					Class: cListBoxExtension
				Class Variables
				Instance Variables
				Functions
				List Initialization
				Message Actions
			List Box Class: cOutlineListBox
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Multiple selection? Class Default
				Sorted? No
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll;4128;64;;;
				Description:
				Derived From
					Class: cListBoxExtension
					Class: cOutline
				Class Variables
				Instance Variables
					Number: nIndexTarget
					Number: nIndexSource
					Number: nXPos
					Number: nYPos
					Window Handle: hWndSource
					Window Handle: hWndTarget
				Functions
				List Initialization
				Message Actions
					On SAM_DragCanAutoStart
						Return TRUE
					On SAM_DragDrop
						!
						! ***** Get source index and item handle
						Call SalDragDropGetSource( hWndSource, nXPos, nYPos )
						Set nIndexSource = VisListGetIndexFromPoint( hWndSource, nXPos, nYPos )
						If nIndexSource = LB_Err
							Return FALSE
						!
						! ***** Get target index and item handle
						Call SalDragDropGetTarget( hWndTarget, nXPos, nYPos )
						Set nIndexTarget = VisListGetIndexFromPoint( hWndTarget, nXPos, nYPos )
						If nIndexTarget = LB_Err
							Return FALSE
						!
						! ***** If dropping into source item, ignore drop
						If hWndSource != hWndTarget or nIndexSource != nIndexTarget
							!
							! ***** If Ctrl key down, drop as sibling, else drop as child
							If VisGetKeyState( VK_Control ) & KS_Down
								Loop
									If VisListDragDrop( hWndSource, nIndexSource, hWndTarget, nIndexTarget, DROP_Sibling )
										Break
									If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
										Call SalQuit()
							Else
								Loop
									If VisListDragDrop( hWndSource, nIndexSource, hWndTarget, nIndexTarget, DROP_Child )
										Break
									If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
										Call SalQuit()
							Loop
								If VisListSetFlags( hWndTarget, nIndexTarget, ITEM_IsFrame, FALSE )
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
					On SAM_DragMove
						!
						! ***** Get target index and item handle
						Call SalDragDropGetTarget( hWndTarget, nXPos, nYPos )
						Set nIndex = VisListGetIndexFromPoint( hWndTarget, nXPos, nYPos )
						Set nItemFlags = VisListGetFlags( hWndTarget, nIndex )
						If nIndex != nIndexTarget
							!
							! ***** Clear frame from previous item and set frame to new item
							Loop
								If VisListSetFlags( hWndTarget, nIndexTarget, ITEM_IsFrame, FALSE )
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							If Not nItemFlags & ITEM_IsSelected
								Loop
									If VisListSetFlags( hWndTarget, nIndex, ITEM_IsFrame, TRUE )
										Break
									If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
										Call SalQuit()
							Set nIndexTarget = nIndex
					On SAM_DragExit
						!
						! ***** Turn off ITEM_IsFrame
						Loop
							If VisListSetFlags( hWndTarget, nIndexTarget, ITEM_IsFrame, FALSE )
								Break
							If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
								Call SalQuit()
						Set nIndexTarget = -1
			List Box Class: cPictureListBox
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Multiple selection? Class Default
				Sorted? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll;4128;64;;;
				Description: Listbox which supports pictures in conjunction with text.
						
						TIP: To override the default behavior of loading design-time
						settings, insert an empty SAM_Create handler in your instance
						of this class.
				Derived From
					Class: cListBoxExtension
				Class Variables
				Instance Variables
				Functions
				List Initialization
				Message Actions
					On SAM_Create
						Call VisPopulatePictureFromProperty( hWndItem, hWndItem )
			List Box Class: cRadioListBox
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Multiple selection? Class Default
				Sorted? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll;4128;64;;;
				Description:
				Derived From
				Class Variables
					Number: hPicRadioOn
					Number: hPicRadioOff
					Number: hPicCheckBoxOn
					Number: hPicCheckBoxOff
					Number: nLoadCount
				Instance Variables
				Functions
					Function: Add
						Description: nIndex Add( sText, bSelect )
						Returns
							Number:
						Parameters
							String: sText
							Boolean: bSelect
						Static Variables
						Local variables
							Number: nIndex
							Number: nTop
							Number: nBottom
						Actions
							!
							! ***** Add text into list box
							If VisListIsMultiSelect( hWndItem )
								Set nIndex = VisListAddPicture( hWndItem, sText, hPicCheckBoxOff, hPicCheckBoxOn )
								If nIndex >= 0 and bSelect
									Call SalListSetMultiSelect( hWndItem, nIndex, TRUE )
							Else
								Set nIndex = VisListAddPicture( hWndItem, sText, hPicRadioOff, hPicRadioOn )
								If nIndex >= 0 and bSelect
									Call SalListSetSelect( hWndItem, nIndex )
							Return nIndex
					Function: Insert
						Description: nIndex Insert( nIndex, sText, bSelect )
						Returns
							Number:
						Parameters
							Number: nIndex
							String: sText
							Boolean: bSelect
						Static Variables
						Local variables
						Actions
							!
							! ***** Insert text into list box
							If VisListIsMultiSelect( hWndItem )
								Set nIndex = VisListInsertPicture( hWndItem, nIndex, sText, hPicCheckBoxOff, hPicCheckBoxOn )
								If nIndex >= 0 and bSelect
									Call SalListSetMultiSelect( hWndItem, nIndex, TRUE )
							Else
								Set nIndex = VisListInsertPicture( hWndItem, nIndex, sText, hPicRadioOff, hPicRadioOn )
								If nIndex >= 0 and bSelect
									Call SalListSetSelect( hWndItem, nIndex )
							Return nIndex
					Function: AddValue
						Description: nIndex AddValue( sText, bSelect, nValue )
						Returns
							Number:
						Parameters
							String: sText
							Boolean: bSelect
							Number: nValue
						Static Variables
						Local variables
							Number: nIndex
						Actions
							!
							! ***** Add text into list box
							If VisListIsMultiSelect( hWndItem )
								Set nIndex = VisListAddPictureValue( hWndItem, sText, hPicCheckBoxOff, hPicCheckBoxOn, nValue )
								If nIndex >= 0 and bSelect
									Call SalListSetMultiSelect( hWndItem, nIndex, TRUE )
							Else
								Set nIndex = VisListAddPictureValue( hWndItem, sText, hPicRadioOff, hPicRadioOn, nValue )
								If nIndex >= 0 and bSelect
									Call SalListSetSelect( hWndItem, nIndex )
							Return nIndex
					Function: InsertValue
						Description: nIndex InsertValue( nIndex, sText, bSelect, nValue )
						Returns
							Number:
						Parameters
							Number: nIndex
							String: sText
							Boolean: bSelect
							Number: nValue
						Static Variables
						Local variables
						Actions
							!
							! ***** Insert text into list box
							If VisListIsMultiSelect( hWndItem )
								Set nIndex = VisListInsertPictureValue( hWndItem, nIndex, sText, hPicCheckBoxOff, hPicCheckBoxOn, nValue )
								If nIndex >= 0 and bSelect
									Call SalListSetMultiSelect( hWndItem, nIndex, TRUE )
							Else
								Set nIndex = VisListInsertPictureValue( hWndItem, nIndex, sText, hPicRadioOff, hPicRadioOn, nValue )
								If nIndex >= 0 and bSelect
									Call SalListSetSelect( hWndItem, nIndex )
							Return nIndex
				List Initialization
				Message Actions
					On VTM_Create
						! ***** Set windows style and indent width
						Loop
							If VisListSetStyle( hWndItem, LBS_VisExtensions | LBS_ShowSelectText | LBS_ShowNoSelect | LBS_DisableNoScroll, lParam )
								Break
							If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
								Call SalQuit()
						!
						! ***** Load bitmaps if not already loaded
						If nLoadCount = 0
							Loop
								Set hPicRadioOn = VisPicLoad( PIC_LoadResource | PIC_FormatBitmap, VT_DLLName, VTPIC_RadioOn )
								If hPicRadioOn
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicRadioOff = VisPicLoad( PIC_LoadResource | PIC_FormatBitmap, VT_DLLName, VTPIC_RadioOff )
								If hPicRadioOff
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicCheckBoxOn = VisPicLoad( PIC_LoadResource | PIC_FormatBitmap, VT_DLLName, VTPIC_CheckBoxOn )
								If hPicCheckBoxOn
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							Loop
								Set hPicCheckBoxOff = VisPicLoad( PIC_LoadResource | PIC_FormatBitmap, VT_DLLName, VTPIC_CheckBoxOff )
								If hPicCheckBoxOff
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
						Set nLoadCount = nLoadCount + 1
					On VTM_Destroy
						! ***** Free all pictures loaded
						Set nLoadCount = nLoadCount - 1
						If nLoadCount = 0
							Call VisPicFree( hPicRadioOn )
							Call VisPicFree( hPicRadioOff )
							Call VisPicFree( hPicCheckBoxOn )
							Call VisPicFree( hPicCheckBoxOff )
			!
			General Window Class: cListBoxExtension
				Description: Common listbox extension class
				Derived From
				Class Variables
				Instance Variables
					Number: nStyle
					Number: nIndex
					Number: nValue
					Number: nItemFlags
					Number: nColor
					Number: hFont
					Number: hPicNormal
					Number: hPicSelect
					Number: hItem
					Number: nLevel
					!
					String: sText
				Functions
					! ***** Common Functions
					Function: DisableItem
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
							Number: nColor
						Static Variables
						Local variables
						Actions
							Return VisListDisableItem( hWndItem, nIndex, nColor )
					Function: EnableItem
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
							Number: nColor
						Static Variables
						Local variables
						Actions
							Return VisListEnableItem( hWndItem, nIndex, nColor )
					Function: GetFlags
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
						Static Variables
						Local variables
						Actions
							Return VisListGetFlags( hWndItem, nIndex )
					Function: SetFlags
						Description:
						Returns
							Boolean:
						Parameters
							Number: nIndex
							Number: nFlags
							Boolean: bState
						Static Variables
						Local variables
						Actions
							Return VisListSetFlags( hWndItem, nIndex, nFlags, bState )
					Function: GetStyle
						Description:
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
						Actions
							Return VisListGetStyle( hWndItem )
					Function: SetStyle
						Description:
						Returns
							Boolean:
						Parameters
							Number: nStyle
						Static Variables
						Local variables
						Actions
							Return VisListSetStyle( hWndItem, nStyle, 0 )
					!
					! ***** Color Functions
					Function: AddColor
						Description:
						Returns
							Number:
						Parameters
							String: sText
							Number: nColor
						Static Variables
						Local variables
						Actions
							Return VisListAddColor( hWndItem, sText, nColor )
					Function: AddColorValue
						Description:
						Returns
							Number:
						Parameters
							String: sText
							Number: nColor
							Number: nValue
						Static Variables
						Local variables
						Actions
							Return VisListAddColorValue( hWndItem, sText, nColor, nValue )
					Function: GetColor
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
						Static Variables
						Local variables
						Actions
							Return VisListGetColor( hWndItem, nIndex )
					Function: InsertColor
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
							String: sText
							Number: nColor
						Static Variables
						Local variables
						Actions
							Return VisListInsertColor( hWndItem, nIndex, sText, nColor )
					Function: InsertColorValue
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
							String: sText
							Number: nColor
							Number: nValue
						Static Variables
						Local variables
						Actions
							Return VisListInsertColorValue( hWndItem, nIndex, sText, nColor, nValue )
					Function: SetColor
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
							Number: nColor
						Static Variables
						Local variables
						Actions
							Return VisListSetColor( hWndItem, nIndex, nColor )
					!
					! ***** Font Functions
					Function: AddFont
						Description:
						Returns
							Number:
						Parameters
							String: sText
							Number: hFont
						Static Variables
						Local variables
						Actions
							Return VisListAddFont( hWndItem, sText, hFont )
					Function: AddFontValue
						Description:
						Returns
							Number:
						Parameters
							String: sText
							Number: hFont
							Number: nValue
						Static Variables
						Local variables
						Actions
							Return VisListAddFontValue( hWndItem, sText, hFont, nValue )
					Function: GetFont
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
						Static Variables
						Local variables
						Actions
							Return VisListGetFont( hWndItem, nIndex )
					Function: InsertFont
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
							String: sText
							Number: hFont
						Static Variables
						Local variables
						Actions
							Return VisListInsertFont( hWndItem, nIndex, sText, hFont )
					Function: InsertFontValue
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
							String: sText
							Number: hFont
							Number: nValue
						Static Variables
						Local variables
						Actions
							Return VisListInsertFontValue( hWndItem, nIndex, sText, hFont, nValue )
					Function: SetFont
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
							Number: hFont
						Static Variables
						Local variables
						Actions
							Return VisListSetFont( hWndItem, nIndex, hFont )
					!
					! ***** Outline Functions
					Function: Collapse
						Description:
						Returns
							Boolean:
						Parameters
							Number: nIndex
						Static Variables
						Local variables
						Actions
							Return VisListCollapse( hWndItem, nIndex )
					Function: DeleteChild
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
						Static Variables
						Local variables
						Actions
							Return VisListDeleteChild( hWndItem, nIndex )
					Function: DeleteDescendents
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
						Static Variables
						Local variables
						Actions
							Return VisListDeleteDescendents( hWndItem, nIndex )
					Function: Demote
						Description:
						Returns
							Boolean:
						Parameters
							Number: nIndex
							Number: hPicNormal
							Number: hPicSelect
						Static Variables
						Local variables
						Actions
							Return VisListDemote( hWndItem, nIndex, hPicNormal, hPicSelect )
					Function: DragDrop
						Description:
						Returns
							Boolean:
						Parameters
							Number: nSourceIndex
							Window Handle: hWndTarget
							Number: nTargetIndex
							Number: nDropMode
						Static Variables
						Local variables
						Actions
							Return VisListDragDrop( hWndItem, nSourceIndex, hWndTarget, nTargetIndex, nDropMode )
					Function: EnumChildren
						Description:
						Returns
							Number:
						Parameters
							Number: hItem
							Number: hItems[*]
						Static Variables
						Local variables
						Actions
							Return VisListEnumChildren( hItem, hItems )
					Function: EnumDescendents
						Description:
						Returns
							Number:
						Parameters
							Number: hItemParent
							Number: hItems[*]
						Static Variables
						Local variables
						Actions
							Return VisListEnumDescendents( hItemParent, hItems )
					Function: Expand
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
						Static Variables
						Local variables
						Actions
							Return VisListExpand( hWndItem, nIndex )
					Function: ExpandDescendents
						Description:
						Returns
							Boolean:
						Parameters
							Number: nIndex
						Static Variables
						Local variables
						Actions
							Return VisListExpandDescendents( hWndItem, nIndex )
					Function: FindItemValue
						Description:
						Returns
							Number:
						Parameters
							Number: hItem
							Number: nValue
						Static Variables
						Local variables
						Actions
							Return VisListFindItemValue( hItem, nValue )
					Function: FreeChild
						Description:
						Returns
							Boolean:
						Parameters
							Number: hItemChild
						Static Variables
						Local variables
						Actions
							Return VisListFreeChild( hItemChild )
					Function: FreeDescendents
						Description:
						Returns
							Boolean:
						Parameters
							Number: hItemParent
						Static Variables
						Local variables
						Actions
							Return VisListFreeDescendents( hItemParent )
					Function: GetIndexFromPoint
						Description:
						Returns
							Number:
						Parameters
							Number: nXPos
							Number: nYPos
						Static Variables
						Local variables
						Actions
							Return VisListGetIndexFromPoint( hWndItem, nXPos, nYPos )
					Function: GetItemData
						Description:
						Returns
							Boolean:
						Parameters
							Number: hItem
							Receive String: sText
							Receive Number: nValue
							Receive Number: nItemFlags
						Static Variables
						Local variables
						Actions
							Return VisListGetItemData( hItem, sText, nValue, nItemFlags )
					Function: GetItemColor
						Description:
						Returns
							Number:
						Parameters
							Number: hItem
						Static Variables
						Local variables
						Actions
							Return VisListGetItemColor( hItem )
					Function: GetItemFlags
						Description:
						Returns
							Number:
						Parameters
							Number: hItem
						Static Variables
						Local variables
						Actions
							Return VisListGetItemFlags( hItem )
					Function: GetItemFont
						Description:
						Returns
							Number:
						Parameters
							Number: hItem
						Static Variables
						Local variables
						Actions
							Return VisListGetItemFont( hItem )
					Function: GetItemHandle
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
						Static Variables
						Local variables
						Actions
							Return VisListGetItemHandle( hWndItem, nIndex )
					Function: GetItemIndex
						Description:
						Returns
							Number:
						Parameters
							Number: hItem
						Static Variables
						Local variables
						Actions
							Return VisListGetItemIndex( hItem )
					Function: GetItemPicture
						Description:
						Returns
							Boolean:
						Parameters
							Number: hItem
							Receive Number: hPicNormal
							Receive Number: hPicSelect
						Static Variables
						Local variables
						Actions
							Return VisListGetItemPicture( hItem, hPicNormal, hPicSelect )
					Function: GetItemText
						Description:
						Returns
							String:
						Parameters
							Number: hItem
						Static Variables
						Local variables
						Actions
							Return VisListGetItemText( hItem )
					Function: GetItemValue
						Description:
						Returns
							Number:
						Parameters
							Number: hItem
						Static Variables
						Local variables
						Actions
							Return VisListGetItemValue( hItem )
					Function: GetLevel
						Description:
						Returns
							Number:
						Parameters
							Number: hItem
						Static Variables
						Local variables
						Actions
							Return VisListGetLevel( hItem )
					Function: GetNextSibling
						Description:
						Returns
							Number:
						Parameters
							Number: hItem
						Static Variables
						Local variables
						Actions
							Return VisListGetNextSibling( hItem )
					Function: GetParent
						Description:
						Returns
							Number:
						Parameters
							Number: hItem
						Static Variables
						Local variables
						Actions
							Return VisListGetParent( hItem )
					Function: GetPrevSibling
						Description:
						Returns
							Number:
						Parameters
							Number: hItem
						Static Variables
						Local variables
						Actions
							Return VisListGetPrevSibling( hItem )
					Function: GetRoot
						Description:
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
						Actions
							Return VisListGetRoot( hWndItem )
					Function: GetTextRectangle
						Description:
						Returns
							Boolean:
						Parameters
							Number: nIndex
							Receive Number: nTop
							Receive Number: nLeft
							Receive Number: nBottom
							Receive Number: nRight
						Static Variables
						Local variables
						Actions
							Return VisListGetTextRectangle( hWndItem, nIndex, nTop, nLeft, nBottom, nRight )
					Function: LoadChild
						Description:
						Returns
							Number:
						Parameters
							Number: hItemParent
							Number: hPicNormal
							Number: hPicSelect
							String: sText
							Number: nValue
							Number: nItemFlags
						Static Variables
						Local variables
						Actions
							Return VisListLoadChild( hWndItem, hItemParent, hPicNormal, hPicSelect, sText, nValue, nItemFlags )
					Function: LoadChildren
						Description:
						Returns
							Number:
						Parameters
							Number: hItemParent
							Number: hPicNormal
							Number: hPicSelect
							String: sText[*]
							Number: nValues[*]
							Number: nItemFlags[*]
						Static Variables
						Local variables
						Actions
							Return VisListLoadChildren( hWndItem, hItemParent, hPicNormal, hPicSelect, sText, nValues, nItemFlags )
					Function: LoadOutline
						Description:
						Returns
							Number:
						Parameters
							String: sBlob
						Static Variables
						Local variables
						Actions
							Return VisListLoadOutline( hWndItem, sBlob )
					Function: LoadOutlineFile
						Description:
						Returns
							Number:
						Parameters
							String: sFileName
							Number: hPicParentNormal
							Number: hPicParentSelect
							Number: hPicChildNormal
							Number: hPicChildSelect
						Static Variables
						Local variables
						Actions
							Return VisListLoadOutlineFile( hWndItem, sFileName, hPicParentNormal, hPicParentSelect, hPicChildNormal, hPicChildSelect )
					Function: LoadSibling
						Description:
						Returns
							Number:
						Parameters
							Number: hItemBefore
							Number: hPicNormal
							Number: hPicSelect
							String: sText
							Number: nValue
							Number: nItemFlags
						Static Variables
						Local variables
						Actions
							Return VisListLoadSibling( hWndItem, hItemBefore, hPicNormal, hPicSelect, sText, nValue, nItemFlags )
					Function: MoveDown
						Description:
						Returns
							Boolean:
						Parameters
							Number: nIndex
						Static Variables
						Local variables
						Actions
							Return VisListMoveDown( hWndItem, nIndex )
					Function: MoveUp
						Description:
						Returns
							Boolean:
						Parameters
							Number: nIndex
						Static Variables
						Local variables
						Actions
							Return VisListMoveUp( hWndItem, nIndex )
					Function: Promote
						Description:
						Returns
							Boolean:
						Parameters
							Number: nIndex
							Number: hPicNormal
							Number: hPicSelect
						Static Variables
						Local variables
						Actions
							Return VisListPromote( hWndItem, nIndex, hPicNormal, hPicSelect )
					Function: SaveOutline
						Description:
						Returns
							Number:
						Parameters
							Receive String: sBlob
						Static Variables
						Local variables
						Actions
							Return VisListSaveOutline( hWndItem, sBlob )
					Function: SetIndent
						Description:
						Returns
							Boolean:
						Parameters
							Number: nWidth
						Static Variables
						Local variables
						Actions
							Return VisListSetIndent( hWndItem, nWidth )
					Function: SetItemColor
						Description:
						Returns
							Boolean:
						Parameters
							Number: hItem
							Number: nColor
						Static Variables
						Local variables
						Actions
							Return VisListSetItemColor( hItem, nColor )
					Function: SetItemData
						Description:
						Returns
							Number:
						Parameters
							Number: hItem
							String: sText
							Number: nValue
							Number: nItemFlags
						Static Variables
						Local variables
						Actions
							Return VisListSetItemData( hWndItem, hItem, sText, nValue, nItemFlags )
					Function: SetItemFlags
						Description:
						Returns
							Boolean:
						Parameters
							Number: hItem
							Number: nFlags
							Boolean: bState
						Static Variables
						Local variables
						Actions
							Return VisListSetItemFlags( hItem, nFlags, bState )
					Function: SetItemFont
						Description:
						Returns
							Boolean:
						Parameters
							Number: hItem
							Number: hFont
						Static Variables
						Local variables
						Actions
							Return VisListSetItemFont( hItem, hFont )
					Function: SetItemPicture
						Description:
						Returns
							Boolean:
						Parameters
							Number: hItem
							Number: hPicNormal
							Number: hPicSelect
						Static Variables
						Local variables
						Actions
							Return VisListSetItemPicture( hItem, hPicNormal, hPicSelect )
					Function: SetItemText
						Description:
						Returns
							Boolean:
						Parameters
							Number: hItem
							String: sText
						Static Variables
						Local variables
						Actions
							Return VisListSetItemText( hItem, sText )
					Function: SetItemValue
						Description:
						Returns
							Boolean:
						Parameters
							Number: hItem
							Number: nValue
						Static Variables
						Local variables
						Actions
							Return VisListSetItemValue( hItem, nValue )
					Function: SetOutlineRedraw
						Description:
						Returns
							Boolean:
						Parameters
							Boolean: bState
						Static Variables
						Local variables
						Actions
							Return VisListSetOutlineRedraw( hWndItem, bState )
					Function: ShowOutline
						Description:
						Returns
							Boolean:
						Parameters
							Number: nLevel
						Static Variables
						Local variables
						Actions
							Return VisListShowOutline( hWndItem, nLevel )
					!
					! ***** Picture Functions
					Function: AddPicture
						Description:
						Returns
							Number:
						Parameters
							String: sText
							Number: hPicNormal
							Number: hPicSelect
						Static Variables
						Local variables
						Actions
							Return VisListAddPicture( hWndItem, sText, hPicNormal, hPicSelect )
					Function: AddPictureValue
						Description:
						Returns
							Number:
						Parameters
							String: sText
							Number: hPicNormal
							Number: hPicSelect
							Number: nValue
						Static Variables
						Local variables
						Actions
							Return VisListAddPictureValue( hWndItem, sText, hPicNormal, hPicSelect, nValue )
					Function: GetPicture
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
							Receive Number: hPicNormal
							Receive Number: hPicSelect
						Static Variables
						Local variables
						Actions
							Return VisListGetPicture( hWndItem, nIndex, hPicNormal, hPicSelect )
					Function: InsertPicture
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
							String: sText
							Number: hPicNormal
							Number: hPicSelect
						Static Variables
						Local variables
						Actions
							Return VisListInsertPicture( hWndItem, nIndex, sText, hPicNormal, hPicSelect )
					Function: InsertPictureValue
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
							String: sText
							Number: hPicNormal
							Number: hPicSelect
							Number: nValue
						Static Variables
						Local variables
						Actions
							Return VisListInsertPictureValue( hWndItem, nIndex, sText, hPicNormal, hPicSelect, nValue )
					Function: SetPicture
						Description:
						Returns
							Number:
						Parameters
							Number: nIndex
							Number: hPicNormal
							Number: hPicSelect
						Static Variables
						Local variables
						Actions
							Return VisListSetPicture( hWndItem, nIndex, hPicNormal, hPicSelect )
				Message Actions
					On VTM_Create
						Loop
							If VisListSetStyle( hWndItem, LBS_VisExtensions, lParam )
								Break
							If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
								Call SalQuit()
					!
					On SAM_Click
						! ***** Get current index
						Set nIndex = VisListGetFocusIndex( hWndItem )
						If (nIndex != LB_Err)
							! ***** Get all instance variables
							Set sText      = VisListGetText( hWndItem, nIndex )
							Set nValue     = VisListGetValue( hWndItem, nIndex )
							Set nStyle     = GetStyle()
							Set nItemFlags = GetFlags( nIndex )
							Set nColor     = GetColor( nIndex )
							Set hFont      = GetFont( nIndex )
							Call GetPicture( nIndex, hPicNormal, hPicSelect )
							Set hItem = GetItemHandle( nIndex )
							If hItem
								Set nLevel = GetLevel( hItem )
			General Window Class: cOutline
				Description: Common outline base class
				Derived From
				Class Variables
				Instance Variables
					Boolean: fMessageReturn
					!
					Number: nFlags
					Number: nIdx
					Number: nTemp
				Functions
				Message Actions
					On VTM_KeyDown
						! ***** Get selected item
						Set nIdx = VisListGetFocusIndex( hWndItem )
						If (nIdx != LB_Err)
							Select Case wParam
								Case VK_Add       ! *** Expand
								Case VK_Subtract  ! *** Collapse
									Call SalSendMsg( hWndItem, SAM_DoubleClick, 0, 0 )
									Break
					On VTM_Char
						! *** Low byte of high word contains keyboard scan code
						Set nTemp = SalNumberHigh(lParam)
						Set nTemp = VisNumberLowByte(nTemp)
						!
						! *** 'Eat' numeric keypad keystrokes
						Select Case (nTemp)
							Case 0x4E  ! *** '+' key on numeric keypad
							Case 0x4A  ! *** '-' key on numeric keypad
								Return FALSE
								Break
					!
					On SAM_DoubleClick
						Set nIdx = VisListGetFocusIndex( hWndItem )
						If (nIdx != LB_Err)
							! ***** Get item flags for selected item
							Loop
								Set nFlags = VisListGetFlags( hWndItem, nIdx )
								If (nFlags != LB_Err)
									Break
								If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
									Call SalQuit()
							!
							! ***** Expand or collapse based on item flags
							If (nFlags & ITEM_IsParent) and (nFlags & ITEM_IsExpanded)
								! ***** Collapse item selected
								Loop
									If VisListCollapse( hWndItem, nIdx )
										Break
									If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
										Call SalQuit()
							Else If (nFlags & ITEM_IsParent) and Not (nFlags & ITEM_IsExpanded)
								! ***** Expand item selected
								Loop
									If VisListExpand( hWndItem, nIdx )
										Break
									If VisErrorRecovery( CAPTION_ErrorHandler ) = ACTION_Abort
										Call SalQuit()
			!
			! *** Visual Toolchest - VTLSTVW.APL
			!
			! Custom Control Class: cListView
.winattr
				DLL Name: vti21.dll
				Display Settings
					DLL Name: vti21.dll
					MS Windows Class Name: VT:cListView:10
					Style:  0x00000000
					ExStyle:  0x00000000
					Title:
					Window Location and Size
						Left: Default
						Top: Default
						Width:  2.0"
						Width Editable? Yes
						Height: 2.0"
						Height Editable? Yes
					Visible? Yes
					Border? Yes
					Etched Border? Yes
					Hollow? No
					Vertical Scroll? No
					Horizontal Scroll? No
					Tab Stop? Tab
					Tile To Parent? No
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: System Window Color
					DLL Settings
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll
.end
				Description: Stand-alone ListView
				Derived From 
				Class Variables 
				Instance Variables 
					! *** Private member variables - do not alter.
					Number: m_lpControl
					Number: m_lpChildControl
				Functions 
					! *** Advanced functions
					Function: Arrange
						Description: Aligns items on a grid.
						Returns 
							Boolean: 
						Parameters 
							Number: nCode
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVArrange(m_lpChildControl, nCode)
							!
							Return fReturnValue
					Function: EnsureVisible
						Description: Ensures that an item is visible
						Returns 
							Boolean: 
						Parameters 
							Number: nItem
							Boolean: fPartialOK
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVEnsureVisible(m_lpChildControl, nItem, fPartialOK)
							!
							Return fReturnValue
					Function: FindItem
						Description: Searches for an item by text or position.
						Returns 
							Number: 
						Parameters 
							Number: nFlags
							String: strItemText
							Number: nItemStart
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVFindItem(m_lpChildControl, nFlags, strItemText, nItemStart)
							!
							Return nReturnValue
					Function: GetCountPerPage
						Description: Calculates the number of items that can fit vertically in control.
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVGetCountPerPage(m_lpChildControl)
							!
							Return nReturnValue
					Function: GetItemPosition
						Description: Retrieves the position of an item.
						Returns 
							Boolean: 
						Parameters 
							Number: nItem
						Static Variables 
						Local variables 
							Boolean: fReturnValue
							Number: nX
							Number: nY
						Actions 
							Set fReturnValue = FALSE
							!
							If (TRUE = VisLVGetItemPosition(m_lpChildControl, nItem, nX, nY))
								Set spointPosition.m_nX = nX
								Set spointPosition.m_nY = nY
								Set fReturnValue = TRUE
							!
							Return fReturnValue
					Function: GetItemRect
						Description: Retrieves the bounding rectangle for an item.
						Returns 
							Boolean: 
						Parameters 
							Number: nItem
							Number: nCode
						Static Variables 
						Local variables 
							Boolean: fReturnValue
							Number: nLeft
							Number: nTop
							Number: nRight
							Number: nBottom
						Actions 
							Set fReturnValue = FALSE
							!
							If (TRUE = VisLVGetItemRect(m_lpChildControl, nItem, nLeft, nTop, nRight, nBottom, nCode))
								Set srectItem.m_nLeft   = nLeft
								Set srectItem.m_nTop    = nTop
								Set srectItem.m_nRight  = nRight
								Set srectItem.m_nBottom = nBottom
								Set fReturnValue        = TRUE
							!
							Return fReturnValue
					Function: GetStringWidth
						Description: Determines the minimum column width necessary to display all of a given string.
						Returns 
							Number: 
						Parameters 
							String: strCompare
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVGetStringWidth(m_lpChildControl, strCompare)
							Set nReturnValue = SalPixelsToFormUnits(hWndItem, nReturnValue, FALSE)
							!
							Return nReturnValue
					Function: GetNextItem
						Description: Searches for an item by sequence, relation or state.
						Returns 
							Number: 
						Parameters 
							Number: nItem
							Number: nFlags
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVGetNextItem(m_lpChildControl, nItem, nFlags)
							!
							Return nReturnValue
					Function: GetOrigin
						Description: Retrieves the current view origin for control.
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
							Boolean: fReturnValue
							Number: nX
							Number: nY
						Actions 
							Set fReturnValue = FALSE
							!
							If (TRUE = VisLVGetOrigin(m_lpChildControl, nX, nY))
								Set spointOrigin.m_nX = nX
								Set spointOrigin.m_nY = nY
								Set fReturnValue = TRUE
							!
							Return fReturnValue
					Function: GetViewRect
						Description: Retrieves the bounding rectangle of all items in the control.
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
							Boolean: fReturnValue
							Number: nLeft
							Number: nTop
							Number: nRight
							Number: nBottom
						Actions 
							Set fReturnValue = FALSE
							!
							If (TRUE = VisLVGetViewRect(m_lpChildControl, nLeft, nTop, nRight, nBottom))
								Set srectView.m_nLeft   = nLeft
								Set srectView.m_nTop    = nTop
								Set srectView.m_nRight  = nRight
								Set srectView.m_nBottom = nBottom
								Set fReturnValue = TRUE
							!
							Return fReturnValue
					Function: HitTest
						Description: Determines which item is at a specified position.
						Returns 
							Number: 
						Parameters 
							Receive Number: nFlags
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVHitTest(m_lpChildControl, spointTest.m_nX, spointTest.m_nY, nFlags)
							!
							Return nReturnValue
					Function: SetItemPosition
						Description: Moves an item to a specified position in control.
						Returns 
							Boolean: 
						Parameters 
							Number: nItem
						Static Variables 
						Local variables 
							Boolean: fReturnValue
							Number: nX
							Number: nY
						Actions 
							Set nX = spointNewPosition.m_nX
							Set nY = spointNewPosition.m_nY
							Set fReturnValue = VisLVSetItemPosition(m_lpChildControl, nItem, nX, nY)
							!
							Return fReturnValue
					Function: Scroll
						Description: Scrolls the contents of control.
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVScroll(m_lpChildControl, ssizeScroll.m_nCX, ssizeScroll.m_nCY)
							!
							Return fReturnValue
					!
					! *** Color functions
					Function: GetBkColor
						Description: Retrieves the color used for the control's overall background.
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVGetBkColor(m_lpChildControl)
							!
							Return nReturnValue
					Function: SetBkColor
						Description: Assigns the color used for the control's overall background.
						Returns 
							Boolean: 
						Parameters 
							Number: nNewColor
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVSetBkColor(m_lpChildControl, nNewColor)
							!
							Return fReturnValue
					Function: GetTextColor
						Description: Retrieves the color used for item and subitem text.
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVGetTextColor(m_lpChildControl)
							!
							Return nReturnValue
					Function: SetTextColor
						Description: Assigns the color used for item and subitem text.
						Returns 
							Boolean: 
						Parameters 
							Number: nNewColor
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVSetTextColor(m_lpChildControl, nNewColor)
							!
							Return fReturnValue
					Function: GetTextBkColor
						Description: Retrieves the color used for item and subitem text background.
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVGetTextBkColor(m_lpChildControl)
							!
							Return nReturnValue
					Function: SetTextBkColor
						Description: Assigns the color used for item and subitem text background.
						Returns 
							Boolean: 
						Parameters 
							Number: nNewColor
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVSetTextBkColor(m_lpChildControl, nNewColor)
							!
							Return fReturnValue
					!
					! *** Column functions
					Function: AssignColumns
						Description: Assigns columns to be used for 'details' view.
								
								TIP: You can reassign columns on the fly without having
								to repopulate the control. For instance, you can use
								SetItemText() to add four subitems to an item, but only
								assign four columns (remember: 1 item + 4 subitems = 5
								columns,) thus giving you a hidden column that you can
								display later by assigning five columns.
						Returns 
							Boolean: 
						Parameters 
							String: saTitles[*]
							Number: naAlignments[*]
							Number: naWidths[*]
							Number: nNumColumns
						Static Variables 
						Local variables 
							Boolean: fReturnValue
							Number: nIndex
							Number: naWidthsTemp[*]
						Actions 
							Set nIndex = 0
							While nIndex < nNumColumns
								Set naWidthsTemp[nIndex] = SalFormUnitsToPixels(hWndItem, naWidths[nIndex], FALSE)
								Set nIndex               = nIndex + 1
							!
							Set fReturnValue = VisLVColumnsAssign(m_lpChildControl, saTitles, naAlignments, naWidthsTemp, nNumColumns)
							!
							Return fReturnValue
					Function: GetColumn
						Description: Retrieves the attributes of a column.
						Returns 
							Boolean: 
						Parameters 
							Number: nColumn
							Receive String: strTitle
							Receive Number: nAlignment
							Receive Number: nWidth
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVGetColumn(m_lpChildControl, nColumn, strTitle, nAlignment, nWidth)
							If (fReturnValue = TRUE)
								Set nWidth = SalPixelsToFormUnits(hWndItem, nWidth, FALSE)
							!
							Return fReturnValue
					Function: GetColumnAlignment
						Description: 
						Returns 
							Number: 
						Parameters 
							Number: nColumn
						Static Variables 
						Local variables 
							Number: nReturnValue
							Number: nAlignment
							Number: nDummy
							String: strDummy
						Actions 
							Set nReturnValue = 0
							!
							If (TRUE = GetColumn(nColumn, strDummy, nAlignment, nDummy))
								Set nReturnValue = nAlignment
							!
							Return nReturnValue
					Function: GetColumnTitle
						Description: Retrieves a column's text.
						Returns 
							String: 
						Parameters 
							Number: nColumn
						Static Variables 
						Local variables 
							String: strReturnValue
							Number: nDummy
							String: strTitle
						Actions 
							Set strReturnValue = ""
							!
							If (TRUE = GetColumn(nColumn, strTitle, nDummy, nDummy))
								Set strReturnValue = strTitle
							!
							Return strReturnValue
					Function: GetColumnWidth
						Description: Retrieves a column's width.
						Returns 
							Number: 
						Parameters 
							Number: nColumn
						Static Variables 
						Local variables 
							Number: nReturnValue
							Number: nDummy
							Number: nWidth
							String: strDummy
						Actions 
							Set nReturnValue = 0
							!
							If (TRUE = GetColumn(nColumn, strDummy, nDummy, nWidth))
								Set nReturnValue = nWidth
							!
							Return nReturnValue
					Function: SetColumn
						Description: Sets the attributes of a column.
						Returns 
							Boolean: 
						Parameters 
							Number: nColumn
							Number: nMask
							String: strTitle
							Number: nAlignment
							Number: nWidth
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set nWidth       = SalFormUnitsToPixels(hWndItem, nWidth, FALSE)
							Set fReturnValue = VisLVSetColumn(m_lpChildControl, nColumn, nMask, strTitle, nAlignment, nWidth)
							!
							Return fReturnValue
					Function: SetColumnAlignment
						Description: 
						Returns 
							Boolean: 
						Parameters 
							Number: nColumn
							Number: nAlignment
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = SetColumn(nColumn, LVCF_Fmt, "", nAlignment, 0)
							!
							Return fReturnValue
					Function: SetColumnTitle
						Description: Sets a column's text.
						Returns 
							Boolean: 
						Parameters 
							Number: nColumn
							String: strTitle
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = SetColumn(nColumn, LVCF_Text, strTitle, 0, 0)
							!
							Return fReturnValue
					Function: SetColumnWidth
						Description: Sets a column's width.
						Returns 
							Boolean: 
						Parameters 
							Number: nColumn
							Number: nWidth
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = SetColumn(nColumn, LVCF_Width, "", 0, nWidth)
							!
							Return fReturnValue
					!
					! *** Configuration functions
					Function: GetStyle
						Description: Retrieves current style bits for control.
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVGetStyle(m_lpChildControl)
							!
							Return nReturnValue
					Function: SetStyle
						Description: Sets style bits for control.
						Returns 
							Number: 
						Parameters 
							Number: nStyle
							Boolean: fOn
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVSetStyle(m_lpChildControl, nStyle, fOn)
							!
							Return nReturnValue
					!
					! *** Information functions
					Function: GetAllSelectedItems
						Description: Retrieves array of all selected items and returns count.
						Returns 
							Number: 
						Parameters 
							Number: naSelections[*]
						Static Variables 
						Local variables 
							Number: nReturnValue
							Number: nIndex
							Number: nItem
						Actions 
							Set nReturnValue = -1
							Set nIndex = 0
							Set nItem  = -1
							!
							! *** Clear out receive parameter
							Call SalArraySetUpperBound(naSelections, 1, -1)
							!
							Loop 
								Set nItem = GetNextItem(nItem, LVNI_Selected)
								If (nItem = -1)
									Break 
								Set naSelections[nIndex] = nItem
								Set nIndex = nIndex + 1
							Set nReturnValue = nIndex
							!
							Return nReturnValue
					Function: GetItemCount
						Description: Retrieves the number of items in control.
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVGetItemCount(m_lpChildControl)
							!
							Return nReturnValue
					Function: GetSelectedCount
						Description: Retrieves the number of selected items in control.
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVGetSelectedCount(m_lpChildControl)
							!
							Return nReturnValue
					Function: GetSelectedItem
						Description: 
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = GetNextItem(-1, LVNI_Selected)
							!
							Return nReturnValue
					Function: GetTopIndex
						Description: Retrieves the index of the topmost visible item.
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVGetTopIndex(m_lpChildControl)
							!
							Return nReturnValue
					!
					! *** Image functions
					Function: AddImage
						Description: Adds an image to control's internal ImageLists at the index specified.
						Returns 
							Number: 
						Parameters 
							Number: hpicLarge
							Number: hpicSmall
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVImageAdd(m_lpChildControl, hpicLarge, hpicSmall)
							!
							Return nReturnValue
					Function: GetImageCount
						Description: Retrieves the number of images in control.
								
								TIP: Remember that a listview defaults to one image
								(Windows logo) unless you remove/replace it.
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVImageCountGet(m_lpChildControl)
							!
							Return nReturnValue
					Function: RemoveAllImages
						Description: Removes all images from control.
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVImageRemoveAll(m_lpChildControl)
							!
							Return fReturnValue
					Function: RemoveImage
						Description: Removes an image from control's internal ImageLists.
								
								TIP: All other images will shift downward when you remove
								an image from the control.  Bear in mind that this will
								affect the images each item displays, since images are
								references by position.
						Returns 
							Boolean: 
						Parameters 
							Number: nIndex
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVImageRemove(m_lpChildControl, nIndex)
							!
							Return fReturnValue
					Function: ReplaceImage
						Description: Replaces an image in control's internal ImageLists.
						Returns 
							Boolean: 
						Parameters 
							Number: nIndex
							Number: hpicLarge
							Number: hpicSmall
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVImageReplace(m_lpChildControl, nIndex, hpicLarge, hpicSmall)
							!
							Return fReturnValue
					!
					! *** Item functions
					Function: DeleteAllItems
						Description: Removes all items from the control.
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVDeleteAllItems(m_lpChildControl)
							!
							Return fReturnValue
					Function: DeleteItem
						Description: Removes an item from control and returns count of
								remaining items.
						Returns 
							Number: 
						Parameters 
							Number: nItem
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVDeleteItem(m_lpChildControl, nItem)
							!
							Return nReturnValue
					Function: InsertDetails
						Description: Inserts a new item into control and supplies subitem text for item.
								
								TIP: Use this instead of the InsertItem*() functions to specify items
								with multiple columns in one function call when you already have your
								data populated in an array.
						Returns 
							Number: 
						Parameters 
							Number: nItem
							String: saText[*]
							Number: nImage
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = InsertDetailsValue(nItem, saText, 0, nImage)
							!
							Return nReturnValue
					Function: InsertDetailsPic
						Description: Inserts a new item in control, copies picture into control and
								uses copy for new item.
								
								TIP: You should use AddImage() & InsertDetails() where possible
								to avoid duplicate images being stored.
						Returns 
							Number: 
						Parameters 
							Number: nItem
							String: saText[*]
							Number: hpicLarge
							Number: hpicSmall
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = InsertDetailsValuePic(nItem, saText, 0, hpicLarge, hpicSmall)
							!
							Return nReturnValue
					Function: InsertDetailsValue
						Description: Inserts a new item into control and supplies subitem text for item;
								also assigns user data for item.
						Returns 
							Number: 
						Parameters 
							Number: nItem
							String: saText[*]
							Number: nItemValue
							Number: nImage
						Static Variables 
						Local variables 
							Number: nReturnValue
							Number: nIndex
							Number: nUpperBound
						Actions 
							! *** Insert item
							Set nReturnValue = InsertItemValue(nItem, saText[0], nItemValue, nImage)
							!
							! *** Set subitem text
							Call SalArrayGetUpperBound(saText, 1, nUpperBound)
							Set nIndex = 1
							Loop 
								If (nIndex > nUpperBound)
									Break 
								Call SetItemText(nReturnValue, nIndex, saText[nIndex])
								Set nIndex = nIndex + 1
							!
							Return nReturnValue
					Function: InsertDetailsValuePic
						Description: Inserts a new item into control and supplies subitem text for item;
								also assigns user data for item.
								
								TIP: You should use AddImage() & InsertDetailsValue() where possible
								to avoid duplicate images being stored.
						Returns 
							Number: 
						Parameters 
							Number: nItem
							String: saText[*]
							Number: nItemValue
							Number: hpicLarge
							Number: hpicSmall
						Static Variables 
						Local variables 
							Number: nReturnValue
							Number: nImage
						Actions 
							Set nReturnValue = -1
							Set nImage = AddImage(hpicLarge, hpicSmall)
							!
							If (nImage >= 0)
								Set nReturnValue = InsertDetailsValue(nItem, saText, nItemValue, nImage)
							!
							Return nReturnValue
					Function: InsertItem
						Description: Inserts an item in control and returns index of new item
								or -1 if unsuccessful.
								
								TIP: Do not assume that the item you add with InsertItem() is
								given the index you requested; InsertItem() returns the actual
								index of the item added.  If you insert past the upper bound
								of the control, your item is added to the end.
						Returns 
							Number: 
						Parameters 
							Number: nItem
							String: strText
							Number: nImage
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = InsertItemValue(nItem, strText, 0, nImage)
							!
							Return nReturnValue
					Function: InsertItemPic
						Description: Inserts a new item in control, copies picture into control and
								uses copy for new item.  Returns index of new item or -1 if
								unsuccessful.
								
								TIP: You should use AddImage() & InsertItem() where possible
								to avoid duplicate images being stored.
						Returns 
							Number: 
						Parameters 
							Number: nItem
							String: strText
							Number: hpicLarge
							Number: hpicSmall
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = InsertItemValuePic(nItem, strText, 0, hpicLarge, hpicSmall)
							!
							Return nReturnValue
					Function: InsertItemValue
						Description: Inserts a new item in control and assigns user data for item.
								Returns index of new item or -1 if unsuccessful.
						Returns 
							Number: 
						Parameters 
							Number: nItem
							String: strText
							Number: nItemValue
							Number: nImage
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVInsertItem(m_lpChildControl, nItem, strText, nItemValue, nImage)
							!
							Return nReturnValue
					Function: InsertItemValuePic
						Description: Inserts a new item in control, copies picture into control and
								uses copy for new item.  Also assigns user data for item. Returns
								index of new item or -1 if unsuccessful.
								
								TIP: You should use AddImage() & InsertItemValue() where possible
								to avoid duplicate images being stored.
						Returns 
							Number: 
						Parameters 
							Number: nItem
							String: strText
							Number: nItemValue
							Number: hpicLarge
							Number: hpicSmall
						Static Variables 
						Local variables 
							Number: nReturnValue
							Number: nImage
						Actions 
							Set nReturnValue = -1
							Set nImage = AddImage(hpicLarge, hpicSmall)
							!
							If (nImage >= 0)
								Set nReturnValue = InsertItemValue(nItem, strText, nItemValue, nImage)
							!
							Return nReturnValue
					Function: GetFocusItem
						Description: Retrieves index of item with input focus.
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = GetNextItem(-1, LVNI_Focused)
							!
							Return nReturnValue
					Function: GetItem
						Description: Retrieves an item's attributes.
						Returns 
							Boolean: 
						Parameters 
							Number: nItem
							Number: nSubItem
							Receive String: strItemText
							Receive Number: nItemValue
							Receive Number: nImage
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVGetItem(m_lpChildControl, nItem, nSubItem, strItemText, nItemValue, nImage)
							!
							Return fReturnValue
					Function: GetItemState
						Description: Retrieves an item's state.
						Returns 
							Number: 
						Parameters 
							Number: nItem
							Number: nMask
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVGetItemState(m_lpChildControl, nItem, nMask)
							!
							Return nReturnValue
					Function: GetItemText
						Description: Retrieves an item's text.
						Returns 
							String: 
						Parameters 
							Number: nItem
							Number: nSubItem
						Static Variables 
						Local variables 
							String: strReturnValue
							String: strItemText
							Number: nDummy
						Actions 
							Set strReturnValue = ""
							!
							If (TRUE = GetItem(nItem, nSubItem, strItemText, nDummy, nDummy))
								Set strReturnValue = strItemText
							!
							Return strReturnValue
					Function: GetItemValue
						Description: Retrieves an item's user data.
						Returns 
							Number: 
						Parameters 
							Number: nItem
						Static Variables 
						Local variables 
							Number: nReturnValue
							Number: nItemValue
							Number: nDummy
							String: strDummy
						Actions 
							Set nReturnValue = 0
							Set nItemValue    = 0
							!
							If (TRUE = GetItem(nItem, 0, strDummy, nItemValue, nDummy))
								Set nReturnValue = nItemValue
							!
							Return nReturnValue
					Function: SetFocusItem
						Description: Assigns focus to the specified item.
						Returns 
							Boolean: 
						Parameters 
							Number: nItem
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = SetItemState(nItem, LVIS_Focused, LVIS_Focused)
							!
							Return fReturnValue
					Function: SetItem
						Description: Sets an item's attributes.
						Returns 
							Boolean: 
						Parameters 
							Number: nItem
							Number: nSubItem
							Number: nMask
							String: strItemText
							Number: nItemValue
							Number: nImage
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVSetItem(m_lpChildControl, nItem, nSubItem, nMask, strItemText, nItemValue, nImage)
							!
							Return fReturnValue
					Function: SetItemState
						Description: Assigns an item's state (LVIS_Focused, LVIS_Selected, etc..)
						Returns 
							Boolean: 
						Parameters 
							Number: nItem
							Number: nNewState
							Number: nStateMask
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVSetItemState(m_lpChildControl, nItem, nNewState, nStateMask)
							!
							Return fReturnValue
					Function: SetItemText
						Description: Sets an item's or subitem's text.
								
								TIP: When using this function to assign subitem text for new items,
								do not assume that the item you just added with InsertItem() was
								given the index you requested; InsertItem() returns the actual
								index of the item, use that value.
						Returns 
							Boolean: 
						Parameters 
							Number: nItem
							Number: nSubItem
							String: strItemText
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = SetItem(nItem, nSubItem, LVIF_Text, strItemText, 0, 0)
							!
							Return fReturnValue
					Function: SetItemValue
						Description: Assigns an item's user data.
						Returns 
							Boolean: 
						Parameters 
							Number: nItem
							Number: nItemValue
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = SetItem(nItem, 0, LVIF_Param, "", nItemValue, 0)
							!
							Return fReturnValue
					!
					! *** Sort functions
					Function: GetSortColumn
						Description: Retrieves default sort column (subitem.)
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVGetSortColumn(m_lpChildControl)
							!
							Return nReturnValue
					Function: GetSortOrder
						Description: Retrieves default sort order (ascending/descending)
						Returns 
							Number: 
						Parameters 
						Static Variables 
						Local variables 
							Number: nReturnValue
						Actions 
							Set nReturnValue = VisLVGetSortOrder(m_lpChildControl)
							!
							Return nReturnValue
					Function: SetSortColumn
						Description: Assigns default column (subitem) to sort on.
						Returns 
							Boolean: 
						Parameters 
							Number: nColumn
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVSetSortColumn(m_lpChildControl, nColumn)
							!
							Return fReturnValue
					Function: SetSortOrder
						Description: Assigns default sort order (LVSORT_Ascending/LVSORT_Descending.)
						Returns 
							Boolean: 
						Parameters 
							Number: nOrder
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVSetSortOrder(m_lpChildControl, nOrder)
							!
							Return fReturnValue
					Function: SortItems
						Description: Sorts the items based on default column (subitem)
								and order settings.
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVSortItems(m_lpChildControl)
							!
							Return fReturnValue
					!
					! *** View functions
					Function: ViewLargeIcons
						Description: Tells control to display 'large icons' view.
								This view is similar to Windows' program manager groups;
								a large icon is displayed with the item text underneath.
						Returns 
						Parameters 
						Static Variables 
						Local variables 
						Actions 
							Call SetStyle(LVS_SmallIcon | LVS_List | LVS_Report, FALSE)
							Call SetStyle(LVS_Icon, TRUE)
					Function: ViewSmallIcons
						Description: Tells control to display 'small icons' view.
								This view is a vertical list of item text with a small
								icon to the left of each item.
						Returns 
						Parameters 
						Static Variables 
						Local variables 
						Actions 
							Call SetStyle(LVS_Icon | LVS_List | LVS_Report, FALSE)
							Call SetStyle(LVS_SmallIcon, TRUE)
					Function: ViewList
						Description: Tells control to display 'list' view.
								This view is similar to the 'small icon' view, with the
								exception that rather than exceed the vertical display
								space, the list is broken into multiple screens, or 'columns.'
						Returns 
						Parameters 
						Static Variables 
						Local variables 
						Actions 
							Call SetStyle(LVS_Icon | LVS_SmallIcon | LVS_Report, FALSE)
							Call SetStyle(LVS_List, TRUE)
					Function: ViewDetails
						Description: Tells control to display 'details' view.'
								This view is similar to the 'small icon' view, with the
								exception that subitem text is also displayed in resizeable,
								sortable columns to the right of the item text.
								
								NOTE: Clicking on subitem text does NOT change focus,
						Returns 
						Parameters 
						Static Variables 
						Local variables 
						Actions 
							Call SetStyle(LVS_Icon | LVS_SmallIcon | LVS_List, FALSE)
							Call SetStyle(LVS_Report, TRUE)
				Message Actions 
					On VTM_ControlCreate
						Set m_lpControl = lParam
					On VTM_CreateComplete
						Set m_lpChildControl = VisLVGetListView(m_lpControl)
					On SAM_CustControlCmd
						Select Case (wParam)
							Case NM_Click
								Call SalPostMsg(hWndItem, SAM_Click, 0, 0)
								Break 
							Case NM_DoubleClick
								Call SalPostMsg(hWndItem, SAM_DoubleClick, 0, 0)
								Break 
							Case NM_RightClick
								Call SalPostMsg(hWndItem, VTM_RightClick, 0, 0)
								Break 
							Case NM_RightDoubleClick
								Call SalPostMsg(hWndItem, VTM_RightDoubleClick, 0, 0)
								Break 
			! Custom Control Class: cListViewDropDown
.winattr
				DLL Name: vti21.dll
				Display Settings
					DLL Name: vti21.dll
					MS Windows Class Name: VT:cListViewDropDown:10
					Style:  0x00000000
					ExStyle:  0x00000000
					Title:
					Window Location and Size
						Left: Default
						Top: Default
						Width:  2.0"
						Width Editable? Yes
						Height: 2.0"
						Height Editable? Yes
					Visible? Yes
					Border? No
					Etched Border? Yes
					Hollow? No
					Vertical Scroll? No
					Horizontal Scroll? No
					Tab Stop? Tab
					Tile To Parent? No
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: System Window Color
					DLL Settings
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll
.end
				Description: Combobox with dropdown cListView
				Derived From 
					Class: cListView
				Class Variables 
				Instance Variables 
				Functions 
					Function: GetEditable
						Description: 
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVCmbGetEditable(m_lpControl)
							Return fReturnValue
					Function: SetEditable
						Description: 
						Returns 
							Boolean: 
						Parameters 
							Boolean: fEditable
						Static Variables 
						Local variables 
							Boolean: fReturnValue
						Actions 
							Set fReturnValue = VisLVCmbSetEditable(m_lpControl, fEditable)
							Return fReturnValue
					Function: SetListSize
						Description: 
						Returns 
							Boolean: 
						Parameters 
							Number: nWidth
							Number: nHeight
						Static Variables 
						Local variables 
						Actions 
							Set nWidth = SalFormUnitsToPixels( hWndItem, nWidth, FALSE )
							Set nHeight = SalFormUnitsToPixels( hWndItem, nHeight, TRUE )
							Return VisLVCmbSetListSize ( m_lpControl, nWidth, nHeight )
				Message Actions 
					On VTM_CreateComplete
						Set m_lpChildControl = VisLVCmbGetListView(m_lpControl)
			!
			! ***** Visual Toolchest - VTMETER.APL
			!
			Custom Control Class: cMeter
				DLL Name: vti21.dll
				Display Settings
					DLL Name: vti21.dll
					MS Windows Class Name: VT:cMeter:10
					Style:  Class Default
					ExStyle:  Class Default
					Title:
					Window Location and Size
						Left: Default
						Top: Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Border? Yes
					Etched Border? Yes
					Hollow? Class Default
					Vertical Scroll? Class Default
					Horizontal Scroll? Class Default
					Tab Stop? Class Default
					Tile To Parent? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Blue
					Background Color: System Window Color
					DLL Settings
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll
				Description: Progress meter control; displays percent complete
						as a bar graph and text display.
				Derived From
				Class Variables
				Instance Variables
				Functions
					Function: SetProgress
						Description:
						Returns
							Number:
						Parameters
							Number: nPercent
						Static Variables
						Local variables
						Actions
							Return VisWinSetMeter( hWndItem, nPercent )
				Message Actions
			!
			! *** Visual Toolchest - VTPAL.APL
			!
			Custom Control Class: cColorPalette
				DLL Name: vti21.dll
				Display Settings
					DLL Name: vti21.dll
					MS Windows Class Name: VT:cPalette:10
					Style:  Class Default
					ExStyle:  Class Default
					Title:
					Window Location and Size
						Left: Default
						Top: Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Border? Class Default
					Etched Border? Class Default
					Hollow? Class Default
					Vertical Scroll? Class Default
					Horizontal Scroll? Class Default
					Tab Stop? Tab
					Tile To Parent? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					DLL Settings
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll
				Description: Stand-alone color palette
				Derived From
				Class Variables
				Instance Variables
					Number: m_lpControl
				Functions
					! *** Configuration functions
					Function: GetColor
						Description: Gets the color assigned to specified role.
						Returns
							Number:
						Parameters
							Number: nColorRole
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalColorGet(m_lpControl, nColorRole)
							Return nReturnValue
					Function: SetColor
						Description: Assignes a color to a specified role.
						Returns
							Number:
						Parameters
							Number: nColorRole
							Number: nNewColor
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalColorSet(m_lpControl, nColorRole, nNewColor)
							Return nReturnValue
					Function: GetFocus
						Description: Retrieves the position of highlight.
						Returns
							Boolean:
						Parameters
							Receive Number: lpnRegion
							Receive Number: lpnEntry
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisPalFocusGet(m_lpControl, lpnRegion, lpnEntry)
							Return fReturnValue
					Function: SetFocus
						Description: Assigns the position of highlight.
						Returns
							Boolean:
						Parameters
							Number: nRegion
							Number: nEntry
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisPalFocusSet(m_lpControl, nRegion, nEntry)
							Return fReturnValue
					Function: GetStyle
						Description: Retrieves window style of control.
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalStyleGet(m_lpControl)
							Return nReturnValue
					Function: SetStyle
						Description: Sets window style of control and returns original style.
						Returns
							Number:
						Parameters
							Number: nStyle
							Boolean: fOn
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalStyleSet(m_lpControl, nStyle, fOn)
							Return nReturnValue
					!
					! *** Palette Functions
					Function: SetMainColor
						Description: Assigns color to main palette region.
						Returns
							Number:
						Parameters
							Number: nEntry
							Number: nColor
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalColorMainSet(m_lpControl, nEntry, nColor)
							Return nReturnValue
					Function: SetMainColorAll
						Description: Assigns all colors to main palette region.
						Returns
							Number:
						Parameters
							Number: lpnColors[*]
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalColorMainSetAll(m_lpControl, lpnColors)
							Return nReturnValue
					Function: GetPaletteColor
						Description: Retrieves color from main palette region.
						Returns
							Number:
						Parameters
							Number: nPalette
							Number: nEntry
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalColorPaletteGet(m_lpControl, nPalette, nEntry)
							Return nReturnValue
					Function: GetPaletteColorAll
						Description: Retrieves all colors from main palette region.
						Returns
							Number:
						Parameters
							Number: nPalette
							Receive Number: lpnColors[*]
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalColorPaletteGetAll(m_lpControl, nPalette, lpnColors)
							Return nReturnValue
					!
					! *** Menu Functions
					Function: AddMenu
						Description: Adds menu to end of list.
						Returns
							Number:
						Parameters
							String: szText
							Number: nID
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalMenuAdd(m_lpControl, szText, nID)
							Return nReturnValue
					Function: ClearMenu
						Description: Clears all menus from list.
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisPalMenuClear(m_lpControl)
							Return fReturnValue
					Function: GetMenu
						Description: Retrieves menu text and ID.
						Returns
						Parameters
							Number: nEntry
							Receive String: lpszText
							Receive Number: lpnID
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisPalMenuGet(m_lpControl, nEntry, lpszText, lpnID)
							Return fReturnValue
					Function: GetMenuAll
						Description: Retrieves all menu entries in list.
						Returns
							Number:
						Parameters
							Receive String: lpszText[*]
							Receive Number: lpnID[*]
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalMenuGetAll(m_lpControl, lpszText, lpnID)
							Return nReturnValue
					Function: InsertMenu
						Description: Inserts menu entry and shifts list.
						Returns
							Boolean:
						Parameters
							Number: nEntry
							String: szText
							Number: nID
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisPalMenuInsert(m_lpControl, nEntry, szText, nID)
							Return fReturnValue
					Function: RemoveMenu
						Description: Removes menu entry from list.
						Returns
							Boolean:
						Parameters
							Number: nEntry
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisPalMenuRemove(m_lpControl, nEntry)
							Return fReturnValue
					Function: SetMenu
						Description: Assigns menu text and ID.
						Returns
							Boolean:
						Parameters
							Number: nEntry
							String: szText
							Number: nID
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisPalMenuSet(m_lpControl, nEntry, szText, nID)
							Return fReturnValue
					Function: SetMenuAll
						Description: Assigns all menu entries in list.
						Returns
							Number:
						Parameters
							String: lpszText[*]
							Number: lpnID[*]
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalMenuSetAll(m_lpControl, lpszText, lpnID)
							Return nReturnValue
					!
					! *** Most Recently Used Palette Functions
					Function: ClearMRU
						Description: Clears all entries from most recently used palette region.
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisPalMRUClear(m_lpControl)
							Return fReturnValue
					Function: GetMRUMax
						Description: Retrieves maximum number of colors allowed in MRU region.
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalMRUMaxGet(m_lpControl)
							Return nReturnValue
					Function: SetMRUMax
						Description: Assigns maximum number of colors allowed in MRU region.
						Returns
							Number:
						Parameters
							Number: nNewMax
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalMRUMaxSet(m_lpControl, nNewMax)
							Return nReturnValue
				Message Actions
					On VTM_ControlCreate
						Set m_lpControl = lParam
			Custom Control Class: cColorPaletteDropDown
				DLL Name: vti21.dll
				Display Settings
					DLL Name: vti21.dll
					MS Windows Class Name: VT:cComboPal:10
					Style:  Class Default
					ExStyle:  Class Default
					Title:
					Window Location and Size
						Left: Default
						Top: Default
						Width:  1.4"
						Width Editable? Class Default
						Height: 0.24"
						Height Editable? Class Default
					Visible? Class Default
					Border? Class Default
					Etched Border? Yes
					Hollow? Class Default
					Vertical Scroll? Class Default
					Horizontal Scroll? Class Default
					Tab Stop? Tab
					Tile To Parent? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: System Window Color
					DLL Settings
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll
				Description: Non-editable combo-box with drop-down color palette
				Derived From
				Class Variables
				Instance Variables
					Number: m_lpControl
				Functions
					! *** Configuration functions
					Function: GetColor
						Description: Gets the color assigned to specified role.
						Returns
							Number:
						Parameters
							Number: nColorRole
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalColorGet(VisPalCmbPaletteGet(m_lpControl), nColorRole)
							Return nReturnValue
					Function: SetColor
						Description: Assignes a color to a specified role.
						Returns
							Number:
						Parameters
							Number: nColorRole
							Number: nNewColor
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalColorSet(VisPalCmbPaletteGet(m_lpControl), nColorRole, nNewColor)
							Return nReturnValue
					Function: GetFocus
						Description: Retrieves the position of highlight.
						Returns
							Boolean:
						Parameters
							Receive Number: lpnRegion
							Receive Number: lpnEntry
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisPalFocusGet(VisPalCmbPaletteGet(m_lpControl), lpnRegion, lpnEntry)
							Return fReturnValue
					Function: SetFocus
						Description: Assigns the position of highlight.
						Returns
							Boolean:
						Parameters
							Number: nRegion
							Number: nEntry
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisPalFocusSet(VisPalCmbPaletteGet(m_lpControl), nRegion, nEntry)
							Return fReturnValue
					Function: GetStyle
						Description: Retrieves window style of control.
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalCmbStyleGet(m_lpControl)
							Return nReturnValue
					Function: SetStyle
						Description: Sets window style of control and returns original style.
						Returns
							Number:
						Parameters
							Number: nStyle
							Boolean: fOn
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalCmbStyleSet(m_lpControl, nStyle, fOn)
							Return nReturnValue
					!
					! *** Palette Functions
					Function: SetMainColor
						Description: Assigns color to main palette region.
						Returns
							Number:
						Parameters
							Number: nEntry
							Number: nColor
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalColorMainSet(VisPalCmbPaletteGet(m_lpControl), nEntry, nColor)
							Return nReturnValue
					Function: SetMainColorAll
						Description: Assigns all colors to main palette region.
						Returns
							Number:
						Parameters
							Number: lpnColors[*]
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalColorMainSetAll(VisPalCmbPaletteGet(m_lpControl), lpnColors)
							Return nReturnValue
					Function: GetPaletteColor
						Description: Retrieves color from main palette region.
						Returns
							Number:
						Parameters
							Number: nPalette
							Number: nEntry
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalColorPaletteGet(VisPalCmbPaletteGet(m_lpControl), nPalette, nEntry)
							Return nReturnValue
					Function: GetPaletteColorAll
						Description: Retrieves all colors from main palette region.
						Returns
							Number:
						Parameters
							Number: nPalette
							Receive Number: lpnColors[*]
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalColorPaletteGetAll(VisPalCmbPaletteGet(m_lpControl), nPalette, lpnColors)
							Return nReturnValue
					!
					! *** Menu Functions
					Function: AddMenu
						Description: Adds menu to end of list.
						Returns
							Number:
						Parameters
							String: szText
							Number: nID
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalMenuAdd(VisPalCmbPaletteGet(m_lpControl), szText, nID)
							Return nReturnValue
					Function: ClearMenu
						Description: Clears all menus from list.
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisPalMenuClear(VisPalCmbPaletteGet(m_lpControl))
							Return fReturnValue
					Function: GetMenu
						Description: Retrieves menu text and ID.
						Returns
						Parameters
							Number: nEntry
							Receive String: lpszText
							Receive Number: lpnID
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisPalMenuGet(VisPalCmbPaletteGet(m_lpControl), nEntry, lpszText, lpnID)
							Return fReturnValue
					Function: GetMenuAll
						Description: Retrieves all menu entries in list.
						Returns
							Number:
						Parameters
							Receive String: lpszText[*]
							Receive Number: lpnID[*]
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalMenuGetAll(VisPalCmbPaletteGet(m_lpControl), lpszText, lpnID)
							Return nReturnValue
					Function: InsertMenu
						Description: Inserts menu entry and shifts list.
						Returns
							Boolean:
						Parameters
							Number: nEntry
							String: szText
							Number: nID
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisPalMenuInsert(VisPalCmbPaletteGet(m_lpControl), nEntry, szText, nID)
							Return fReturnValue
					Function: RemoveMenu
						Description: Removes menu entry from list.
						Returns
							Boolean:
						Parameters
							Number: nEntry
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisPalMenuRemove(VisPalCmbPaletteGet(m_lpControl), nEntry)
							Return fReturnValue
					Function: SetMenu
						Description: Assigns menu text and ID.
						Returns
							Boolean:
						Parameters
							Number: nEntry
							String: szText
							Number: nID
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisPalMenuSet(VisPalCmbPaletteGet(m_lpControl), nEntry, szText, nID)
							Return fReturnValue
					Function: SetMenuAll
						Description: Assigns all menu entries in list.
						Returns
							Number:
						Parameters
							String: lpszText[*]
							Number: lpnID[*]
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalMenuSetAll(VisPalCmbPaletteGet(m_lpControl), lpszText, lpnID)
							Return nReturnValue
					!
					! *** Most Recently Used Palette Functions
					Function: ClearMRU
						Description: Clears all entries from most recently used palette region.
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisPalMRUClear(VisPalCmbPaletteGet(m_lpControl))
							Return fReturnValue
					Function: GetMRUMax
						Description: Retrieves maximum number of colors allowed in MRU region.
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalMRUMaxGet(VisPalCmbPaletteGet(m_lpControl))
							Return nReturnValue
					Function: SetMRUMax
						Description: Assigns maximum number of colors allowed in MRU region.
						Returns
							Number:
						Parameters
							Number: nNewMax
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisPalMRUMaxSet(VisPalCmbPaletteGet(m_lpControl), nNewMax)
							Return nReturnValue
				Message Actions
					On VTM_ControlCreate
						Set m_lpControl = lParam
			!
			! ***** Visual Toolchest - VTSPIN.APL
			!
			Custom Control Class: cSpinField
				DLL Name: vti21.dll
				Display Settings
					DLL Name: vti21.dll
					MS Windows Class Name: VT:cSpinField:10
					Style:  Class Default
					ExStyle:  0x00000000
					Title:
					Window Location and Size
						Left: Default
						Top: Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Border? Yes
					Etched Border? Yes
					Hollow? No
					Vertical Scroll? Class Default
					Horizontal Scroll? Class Default
					Tab Stop? Tab
					Tile To Parent? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					DLL Settings
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll
				Description: Edit field with associated up/down scroll buttons.
				Derived From
				Class Variables
				Instance Variables
					Number: nMinValue
					Number: nMaxValue
					Number: nIncrement
					Number: nAdjust
				Functions
					Function: GetNumber
						Description: Retrieves current value of control.
						Returns
							String:
						Parameters
						Static Variables
						Local variables
						Actions
							Return SalNumberToHString( SalSendMsg( hWndItem, VTM_SpinGetValue, 0, 0 ) )
					Function: IsValidNumber
						Description: Validates current value as a number.
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Boolean: fReturnValue
							String: sValue
							Number: nValue
						Actions
							Set fReturnValue = TRUE
							Set sValue       = GetNumber()
							!
							! ***** Validate for valid number
							If Not SalStrIsValidNumber(sValue)
								Set fReturnValue = FALSE
							Else
								If nAdjust
									Set nValue = SalStrToNumber(sValue) / SalNumberPower(10, nAdjust)
								Else
									Set nValue = SalStrToNumber(sValue)
								!
								! ***** Test if value out of range
								If (nValue < nMinValue) OR (nValue > nMaxValue)
									Set fReturnValue = FALSE
							!
							Return fReturnValue
					Function: SetNumber
						Description: Assigns new value to control.
						Returns
							Boolean:
						Parameters
							Number: nValue
						Static Variables
						Local variables
						Actions
							Return SalSendMsg( hWndItem, VTM_SpinSetValue, 0, nValue )
					Function: SetNumberProperties
						Description: Assigns all properties at once.
						Returns
							Boolean:
						Parameters
							Number: nMinimum
							Number: nMaximum
							Number: nIncrementValue
							Number: nDecimalAdjust
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = TRUE
							!
							! *** Increment must be divisor of maximum minus minimum
							If SalNumberMod(nMaximum - nMinimum, nIncrementValue)
								Set fReturnValue = FALSE
							Else If ( nMaximum < nMinimum )
								Set fReturnValue = FALSE
							Else
								If Not SalSendMsg(hWndItem, VTM_SpinSetMin,       0, nMinimum)
									Set fReturnValue = FALSE
								If Not SalSendMsg(hWndItem, VTM_SpinSetMax,       0, nMaximum)
									Set fReturnValue = FALSE
								If Not SalSendMsg(hWndItem, VTM_SpinSetIncrement, nDecimalAdjust, nIncrementValue)
									Set fReturnValue = FALSE
								!
								! *** Save parameters into instance variables
								If (fReturnValue = TRUE)
									Set nMinValue  = nMinimum
									Set nMaxValue  = nMaximum
									Set nIncrement = nIncrementValue
									Set nAdjust    = nDecimalAdjust
							!
							Return fReturnValue
					Function: SetReadOnly
						Description: Sets/clears read-only status of edit field. Returns FALSE if unsuccessful.
						Returns
							Boolean:
						Parameters
							Boolean: fReadOnly
						Static Variables
						Local variables
						Actions
							Return SalSendMsg(hWndItem, EM_SetReadOnly, fReadOnly, 0)
				Message Actions
			!
			! *** Visual Toolchest - VTSPLIT.APL
			!
			Custom Control Class: cSplitter
				DLL Name: vti21.dll
				Display Settings
					DLL Name: vti21.dll
					MS Windows Class Name: VT:cSplitter:10
					Style:  Class Default
					ExStyle:  Class Default
					Title: cSplitter
					Window Location and Size
						Left: Default
						Top: Default
						Width:  0.075"
						Width Editable? No
						Height: 0.063"
						Height Editable? No
					Visible? Class Default
					Border? Class Default
					Etched Border? Class Default
					Hollow? Class Default
					Vertical Scroll? Class Default
					Horizontal Scroll? Class Default
					Tab Stop? Class Default
					Tile To Parent? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					DLL Settings
				List in Tool Palette? No
				Property Template:
				Class DLL Name: vti21.dll
				Description: Splitter bar custom control.
						
						NOTE: This control is NOT used directly in your application;
						it is a component of the cSplitterWindow class.
				Derived From
				Class Variables
				Instance Variables
					! *** Private member - Do not alter
					Number: m_lpControl
				Functions
					! *** These functions are NOT intended to be called by
							Centura applications directly.  Use member functions of the
							cSplitterWindow class.
					Function: GetOrientation
						Description: Retrieves current type of splitter control.
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisSplitGetOrientation(m_lpControl)
							!
							Return nReturnValue
					Function: MoveSplitterToDragPos
						Description: Move the control to new position.
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = VisSplitMoveToDragPos(m_lpControl)
							!
							Return nReturnValue
					Function: ResizeObjects
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Call VisSplitResizeObjects(m_lpControl)
					Function: SetChild
						Description:
						Returns
							Window Handle:
						Parameters
							Boolean: fPreceeding
							Window Handle: hwndNewChild
						Static Variables
						Local variables
							Window Handle: hwndReturnValue
						Actions
							Set hwndReturnValue = VisSplitSetChild(m_lpControl, fPreceeding, hwndNewChild)
							!
							Return hwndReturnValue
					Function: TileToParent
						Description: Resizes control to fit parent window.
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Boolean: fReturnValue
						Actions
							Set fReturnValue = VisSplitTileToParent(m_lpControl)
							!
							Return fReturnValue
				Message Actions
					On VTM_ControlCreate
						Set m_lpControl = lParam
			Form Window Class: cSplitterWindow
				Title: cSplitterWindow
				Icon File:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Display Style? Class Default
					Visible at Design time? Yes
					Automatically Created at Runtime? Yes
					Initial State: Class Default
					Maximizable? Class Default
					Minimizable? Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left: Default
						Top: Default
						Width:  Default
						Width Editable? Class Default
						Height: Default
						Height Editable? Class Default
					Form Size
						Width:  -1.0"
						Height: -1.0"
						Number of Pages: Dynamic
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
				Next Class Child Key: 3
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name: vti21.dll;0;3145728;;;
				Description: Split window frame.  You drop two child controls onto
						this form and the cSplitter control allows you to resize
						the children dynamically.
						
						NOTE:  If you intercept SAM_CreateComplete, etc. in derived
						classes, be sure to pass the message back up to the base
						class so that proper behavior is preserved.
						
				Derived From
				Menu
				Tool Bar
					Display Settings
						Display Style? Class Default
						Location? Class Default
						Visible? Class Default
						Size: Class Default
						Size Editable? Class Default
						Font Name: Class Default
						Font Size: Class Default
						Font Enhancement: Class Default
						Text Color: Class Default
						Background Color: Class Default
					Contents
				Contents
					Custom Control: ccSplitter
						Class Child Ref Key: 0
						Class ChildKey: 1
						Class: cSplitter
						Property Template:
						Class DLL Name:
						Display Settings
							DLL Name:
							MS Windows Class Name:
							Style:  Class Default
							ExStyle:  Class Default
							Title:
							Window Location and Size
								Left: 0.0"
								Top: 0.0"
								Width:  Class Default
								Width Editable? Class Default
								Height: Class Default
								Height Editable? Class Default
							Visible? Class Default
							Border? Class Default
							Etched Border? Class Default
							Hollow? Class Default
							Vertical Scroll? Class Default
							Horizontal Scroll? Class Default
							Tab Stop? Class Default
							Tile To Parent? Class Default
							Font Name: Class Default
							Font Size: Class Default
							Font Enhancement: Class Default
							Text Color: Class Default
							Background Color: Class Default
							DLL Settings
						Message Actions
				Class Variables
				Instance Variables
					Boolean: m_fCreateComplete
				Functions
					Function: AssociateChildren
						Description: Assigns the default child windows to be used by the control.
								
								TIP: Override this function in your derived class to provide
								custom behavior for initial child assignment.
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							! *** Tell control to simply grab first two child windows it finds
							Call SalSendMsg(ccSplitter, VTM_CreateComplete, 0, 0)
					Function: GetOrientation
						Description: Retrieves current orientation of splitter bar.  Return
								value is one of the ORIENT_SPLIT_... codes.
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
							Number: nReturnValue
						Actions
							Set nReturnValue = ccSplitter.GetOrientation()
							!
							Return nReturnValue
					Function: SetChild
						Description: Allows run-time assignment of new child targets.
						Returns
							Window Handle:
						Parameters
							Boolean: fPreceeding
							Window Handle: hwndNewChild
						Static Variables
						Local variables
							Window Handle: hwndReturnValue
						Actions
							Set hwndReturnValue = ccSplitter.SetChild(fPreceeding, hwndNewChild)
							!
							Return hwndReturnValue
				Message Actions
					On SAM_Create
						! *** Indicate that child windows haven't been created yet
						Set m_fCreateComplete = FALSE
						! *** Make form invisble to eliminate flicker during create
						Call SalHideWindow(hWndForm)
					On SAM_CreateComplete
						! *** Indicate that all child windows are now created
						Set m_fCreateComplete = TRUE
						! *** Invoke function to assign initial child panes
						Call ..AssociateChildren()
						!
						! *** Make form visible and cause it to be drawn
						Call SalShowWindow(hWndForm)
						Call SalUpdateWindow(hWndForm)
					!
					On VTM_Size
						! *** Redraw contents when form is resized
						If (TRUE = m_fCreateComplete)
							Call ccSplitter.ResizeObjects()
		Default Classes
			MDI Window: cBaseMDI
			Form Window:
			Dialog Box:
			Table Window:
			Quest Window:
			Data Field:
			Spin Field:
			Multiline Field:
			Pushbutton:
			Radio Button:
			Option Button:
			Check Box:
			Child Table:
			Quest Child Window: cQuickDatabase
			List Box:
			Combo Box:
			Picture:
			Vertical Scroll Bar:
			Horizontal Scroll Bar:
			Column:
			Background Text:
			Group Box:
			Line:
			Frame:
			Custom Control:
			ActiveX:
		Application Actions
	Dialog Box: dlgGoToLine
		Class:
		Property Template:
		Class DLL Name:
		Title:
		Accessories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Type of Dialog: Modal
			Window Location and Size
				Left: Default
				Top: Default
				Width:  Default
				Width Editable? Yes
				Height: Default
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
		Description:
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Contents
		Contents
			Data Field: dfnLineNumber
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					Data Type: Number
					Editable? Yes
				Display Settings
					Window Location and Size
						Left: Default
						Top: Default
						Width:  Default
						Width Editable? Yes
						Height: Default
						Height Editable? Yes
					Visible? Yes
					Border? Yes
					Justify: Left
					Format: Unformatted
					Country: Default
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
					Input Mask: Unformatted
				Message Actions
					On SAM_Validate
						Call SalPostMsg(pbOk,SAM_Click,wParam,lParam)
			Background Text: Line
				Resource Id: 2849
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Default
					Width Editable? Yes
					Height: Default
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Background Text: Enter Line Number and Tab Out
				Resource Id: 2850
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Default
					Width Editable? Yes
					Height: Default
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Pushbutton: pbOk
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title:
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Default
					Width Editable? Yes
					Height: Default
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						If dfnLineNumber > 0
							Call hWndScintila.ccScintilla.GoToLine(dfnLineNumber-1)
							Call SalEndDialog(hWndForm,1)
		Functions
		Window Parameters
			Window Handle: hWndScintila
		Window Variables
		Message Actions
			On SAM_Create
				Call SalSetFocus(dfnLineNumber)
				Call SalCenterWindow(hWndForm)
	Form Window: frmScintilla
		Class:
		Property Template:
		Class DLL Name:
		Title:
		Icon File:
		Accessories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Automatically Created at Runtime? Yes
			Initial State: Normal
			Maximizable? Yes
			Minimizable? Yes
			System Menu? Yes
			Resizable? Yes
			Window Location and Size
				Left: 2.08"
				Top: 3.067"
				Width:  15.0"
				Width Editable? Yes
				Height: 7.729"
				Height Editable? Yes
			Form Size
				Width:  Default
				Height: Default
				Number of Pages: Dynamic
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
		Description:
		Named Menus
		Menu
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Contents
		Contents
			Custom Control: mlsScintilla
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: ccScintilla
				Property Template:
				Class DLL Name:
				Display Settings
					DLL Name:
					MS Windows Class Name:
					Style:  Class Default
					ExStyle:  Class Default
					Title:
					Window Location and Size
						Left: 0.129"
						Top: 1.177"
						Width:  10.057"
						Width Editable? Class Default
						Height: 5.656"
						Height Editable? Class Default
					Visible? Class Default
					Border? Yes
					Etched Border? Class Default
					Hollow? Class Default
					Vertical Scroll? Class Default
					Horizontal Scroll? Class Default
					Tab Stop? Class Default
					Tile To Parent? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					DLL Settings
				Message Actions
					On SAM_ContextMenu
						Call SalTrackPopupMenu ( hWndForm, 'MultilineMenu',
												TPM_CursorX | TPM_CursorY | TPM_CenterAlign, 0, 0 )
					On VTM_Char
						If (wParam = 10)  AND  (VisGetKeyState (VK_Control) & KS_Down)
							Return FALSE
					On VTM_KeyUp
						Call ProcessEachCharacter()
						Select Case wParam
							Case VK_PageDown
								Call SalSendMsg(hWndItem, WM_VSCROLL, SB_PageDown, 0)
								Break
							Case VK_PageUp
								Call SalSendMsg(hWndItem, WM_VSCROLL, SB_PageUp, 0)
								Break
					On SAM_Create
						Call SetWordWrap(TRUE)
						Call SetWordCharacter("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@:.")
						! Dont use popup
						Call SalSendMsg(hWndItem,SCI_USEPOPUP,FALSE,0)
						! !
						Call VisSendMsgString(hWndItem,SCI_SETWORDCHARS,0,"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@:.")
						! !
						Call SalSendClassMessage(SAM_Create,wParam,lParam)
						Set hWndScintilla =hWndItem
			Pushbutton: pbFind
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Find/Replace
				Window Location and Size
					Left: 10.786"
					Top: 1.906"
					Width:  2.7"
					Width Editable? Yes
					Height: 0.292"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SalCreateWindow(dlgFindandReplace,hWndForm,mlsScintilla,TRUE,FALSE)
			Pushbutton: pbMark
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: &Mark/Unmark
				Window Location and Size
					Left: 10.743"
					Top: 1.427"
					Width:  2.829"
					Width Editable? Yes
					Height: 0.292"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						If ( mlsScintilla.MarkerGet() &  0x0001)= FALSE
							Call mlsScintilla.MarkOrUnMarkCurrentLine(0,TRUE)
						Else
							Call mlsScintilla.MarkOrUnMarkCurrentLine(0,FALSE)
			Pushbutton: pbLineNumbers
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: &Show/Hide Line Numbers
				Window Location and Size
					Left: 10.8"
					Top: 2.448"
					Width:  2.857"
					Width Editable? Yes
					Height: 0.292"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						If mlsScintilla.AreLineNumbersDisplayed(0) =FALSE
							Call mlsScintilla.DisplayLineNumbers(0,TRUE)
						Else
							Call mlsScintilla.DisplayLineNumbers(0,FALSE)
			Background Text: TYPE THE CHARACTER "@" FOR INTELLISENSE
				Resource Id: 2855
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.4"
					Top: 0.24"
					Width:  9.143"
					Width Editable? Yes
					Height: 0.479"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: 11
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Background Text: TYPE THE STRING "MYFUNCTION(" FOR CALLTIPS, TYPE ")" TO CANCEL
				Resource Id: 2856
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.414"
					Top: 0.708"
					Width:  10.143"
					Width Editable? Yes
					Height: 0.479"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: 11
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
		Functions
			Function: ProcessEachCharacter
				Description:
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					Number: nCurrentPosition
					String: szCharacter
					String: szDescription
					String: szBuffer
				Actions
					Set nCurrentPosition =mlsScintilla.GetCurrentPosition()
					Set szCharacter = mlsScintilla.GetCharacterFromPosition(nCurrentPosition-1)
					If szCharacter ='@'
						Call mlsScintilla.AutoCompletion('Christian Jim Joe Karthik Martin Nei Thomas')
					Else If szCharacter ='('
						Set szBuffer = SalStrUpperX(ScanTillGivenCharRev())
						Set szDescription = szBuffer||"(X AS INTEGER)"
						If szDescription != STRING_Null
							Call mlsScintilla.ShowCallTip(nCurrentPosition,szDescription)
					Else If szCharacter =')'
						Call mlsScintilla.CancelCallTip()
			Function: ScanTillGivenCharRev
				Description: From the current position, it scans backward till a break charcter is got and returns the string
						
						For example,       when we type @SCAN(          and the current position is after the bracket "(",  and the function is called
						@SCAN is returned. This is useful to determine the word typed to look up in an array
				Returns
					String:
				Parameters
				Static Variables
				Local variables
					Number: nCurrentPosition
					Number: nCurrentLine
					String: szBuffer
					String: szString
				Actions
					Set nCurrentPosition =mlsScintilla.GetCurrentPosition()
					! !	Loop from the current position and the beginning of the line as long as no break character is found		!!
					Set nCurrentPosition =nCurrentPosition-2
					Set nCurrentLine = mlsScintilla.GetCurrentLineNumber()
					If NOT nCurrentLine >=0
						Return STRING_Null
					While nCurrentPosition >= 0 AND mlsScintilla.GetLineFromPosition(nCurrentPosition) = nCurrentLine
						! !
						Set szBuffer =mlsScintilla.GetCharacterFromPosition(nCurrentPosition)
						! !		A Space character has been encountered, break
						If szBuffer= SH_SPACE OR szBuffer =SH_COMMA OR szBuffer = SH_SEMICOLON
							Break
						! !
						If szString = STRING_Null
							Set szString = szBuffer
						Else
							Set szString =szBuffer||szString
						! !
						Set nCurrentPosition =nCurrentPosition  -1
					! !
					Return szString
		Window Parameters
		Window Variables
			Window Handle: hWndScintilla
		Message Actions
			On SAM_Create
				Call SalSetFocus(mlsScintilla)
	Dialog Box: dlgFindandReplace
		Class: cQuickTabsDialog
		Property Template:
		Class DLL Name:
		Title: Find/Replace
		Accessories Enabled? No
		Visible? Class Default
		Display Settings
			Display Style? Class Default
			Visible at Design time? Yes
			Type of Dialog: Modeless
			Window Location and Size
				Left: 7.77"
				Top: 1.25"
				Width:  8.471"
				Width Editable? Class Default
				Height: 3.0"
				Height Editable? Class Default
			Absolute Screen Location? Class Default
			Font Name: Class Default
			Font Size: Class Default
			Font Enhancement: Class Default
			Text Color: Class Default
			Background Color: Class Default
		Description:
		Tool Bar
			Display Settings
				Display Style? Class Default
				Location? Class Default
				Visible? Class Default
				Size: Class Default
				Size Editable? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
			Contents
		Contents
			Picture: picTabs
.data INHERITPROPS
0000: 0100
.enddata
.data CLASSPROPS
0000: 546162546F704D61 7267696E00020030 0000546162466F72 6D50616765730002
0020: 0009000054616244 7261775374796C65 000B0057696E3935 5374796C65000054
0040: 6162426F74746F6D 4D617267696E0005 00302E3435000054 616250616765436F
0060: 756E740002003100 005461624C616265 6C73001100264669 6E64202009265265
0080: 706C616365000054 61624E616D657300 0C004E616D653009 4E616D6531000054
00A0: 616252696768744D 617267696E000200 3000005461624375 7272656E74000600
00C0: 4E616D6530000054 61624C6566744D61 7267696E00020030 0000000000000000
00E0: 0000000000000000 000000000000
.enddata
.data CLASSPROPSSIZE
0000: EE00
.enddata
				Class Child Ref Key: 1
				Class ChildKey: 0
				Class: cQuickTabsDialog
				Property Template:
				Class DLL Name:
				Window Location and Size
					Left: Class Default
					Top: Class Default
					Width:  8.283"
					Width Editable? Class Default
					Height: 2.595"
					Height Editable? Class Default
				Visible? Class Default
				Editable? Class Default
				File Name:
				Storage: Class Default
				Picture Transparent Color: Class Default
				Fit: Class Default
				Scaling
					Width:  Class Default
					Height:  Class Default
				Corners: Class Default
				Border Style: Class Default
				Border Thickness: Class Default
				Tile To Parent? No
				Border Color: Class Default
				Background Color: Class Default
				Message Actions
			Background Text: Fin&d what
.data INHERITPROPS
0000: 0100
.enddata
.data CLASSPROPS
0000: 5461624368696C64 4E616D6573000C00 4E616D6530094E61 6D653100000000
.enddata
.data CLASSPROPSSIZE
0000: 1F00
.enddata
				Resource Id: 2853
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.15"
					Top: 0.44"
					Width:  1.05"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Background Text: Re&place with
.data INHERITPROPS
0000: 0100
.enddata
.data CLASSPROPS
0000: 5461624368696C64 4E616D6573000600 4E616D6531000000 00
.enddata
.data CLASSPROPSSIZE
0000: 1900
.enddata
				Resource Id: 2854
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.15"
					Top: 0.702"
					Width:  1.3"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? No
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Check Box: cbMatchCase
.data INHERITPROPS
0000: 0100
.enddata
.data CLASSPROPS
0000: 5461624368696C64 4E616D6573000C00 4E616D6530094E61 6D653100000000
.enddata
.data CLASSPROPSSIZE
0000: 1F00
.enddata
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Match &Case
				Window Location and Size
					Left: 0.15"
					Top: 0.976"
					Width:  2.483"
					Width Editable? Yes
					Height: 0.25"
					Height Editable? Yes
				Visible? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				Message Actions
			Pushbutton: pbReplaceAll
.data INHERITPROPS
0000: 0100
.enddata
.data CLASSPROPS
0000: 5461624368696C64 4E616D6573000600 4E616D6531000000 00
.enddata
.data CLASSPROPSSIZE
0000: 1900
.enddata
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Replace &All
				Window Location and Size
					Left: 6.414"
					Top: 1.625"
					Width:  1.867"
					Width Editable? Yes
					Height: 0.357"
					Height Editable? Yes
				Visible? No
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Call hWndMultiline.ccScintilla.ReplaceAllClick(cmbFindString,cmbReplaceString,cbRegularExpression,FnNReturnSearchFlags(),TRUE)
			Pushbutton: pbMarkAll
.data INHERITPROPS
0000: 0100
.enddata
.data CLASSPROPS
0000: 5461624368696C64 4E616D6573000C00 4E616D6530094E61 6D653100000000
.enddata
.data CLASSPROPSSIZE
0000: 1F00
.enddata
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: cpbPushButtonWithMenu
				Property Template:
				Class DLL Name:
				Title: &Mark All
				Window Location and Size
					Left: 6.414"
					Top: 0.771"
					Width:  1.867"
					Width Editable? Class Default
					Height: 0.357"
					Height Editable? Class Default
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Image Style: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Message Actions
					On SAM_Click
						Set m_szMenuEntries[0]= '&Mark All'
						Set m_szMenuEntries[1]= '&Unmark All'
						Call SalSendClassMessage(SAM_Click,wParam,lParam)
					On WM_COMMAND
						Select Case wParam
							Case 0
								Call hWndMultiline.ccScintilla.ReplaceAllClick(cmbFindString,STRING_Null,cbRegularExpression,FnNReturnSearchFlags(),FALSE)
								Break
							Case 1
								Call hWndMultiline.ccScintilla.DeleteAllMarkers()
								Break
			Pushbutton: pbReplace
.data INHERITPROPS
0000: 0100
.enddata
.data CLASSPROPS
0000: 5461624368696C64 4E616D6573000600 4E616D6531000000 00
.enddata
.data CLASSPROPSSIZE
0000: 1900
.enddata
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Re&place
				Window Location and Size
					Left: 3.214"
					Top: 1.823"
					Width:  1.867"
					Width Editable? Yes
					Height: 0.357"
					Height Editable? Yes
				Visible? No
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Call FnBReplaceButtonClick()
			Pushbutton: pbReplaceAndFind
.data INHERITPROPS
0000: 0100
.enddata
.data CLASSPROPS
0000: 5461624368696C64 4E616D6573000600 4E616D6531000000 00
.enddata
.data CLASSPROPSSIZE
0000: 1900
.enddata
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Replace, &Then Find
				Window Location and Size
					Left: 6.414"
					Top: 1.25"
					Width:  1.867"
					Width Editable? Yes
					Height: 0.357"
					Height Editable? Yes
				Visible? No
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SalSendMsg(pbReplace,SAM_Click,wParam,lParam)
						Call SalSendMsg(pbFindNext,SAM_Click,wParam,lParam)
			Pushbutton: pbFindNext
.data INHERITPROPS
0000: 0100
.enddata
.data CLASSPROPS
0000: 5461624368696C64 4E616D6573000C00 4E616D6530094E61 6D653100000000
.enddata
.data CLASSPROPSSIZE
0000: 1F00
.enddata
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Find &Next
				Window Location and Size
					Left: 6.417"
					Top: 0.393"
					Width:  1.867"
					Width Editable? Yes
					Height: 0.357"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Call FnBFindButtonClick()
			Check Box: cbMatchWholeWord
.data INHERITPROPS
0000: 0100
.enddata
.data CLASSPROPS
0000: 5461624368696C64 4E616D6573000C00 4E616D6530094E61 6D653100000000
.enddata
.data CLASSPROPSSIZE
0000: 1F00
.enddata
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Match &Whole Word
				Window Location and Size
					Left: 0.15"
					Top: 1.262"
					Width:  2.483"
					Width Editable? Yes
					Height: 0.25"
					Height Editable? Yes
				Visible? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				Message Actions
			Check Box: cbRegularExpression
.data INHERITPROPS
0000: 0100
.enddata
.data CLASSPROPS
0000: 5461624368696C64 4E616D6573000C00 4E616D6530094E61 6D653100000000
.enddata
.data CLASSPROPSSIZE
0000: 1F00
.enddata
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Regular &Expression
				Window Location and Size
					Left: 0.15"
					Top: 1.548"
					Width:  2.483"
					Width Editable? Yes
					Height: 0.25"
					Height Editable? Yes
				Visible? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				Message Actions
			Check Box: cbwordStart
.data INHERITPROPS
0000: 0100
.enddata
.data CLASSPROPS
0000: 5461624368696C64 4E616D6573000C00 4E616D6530094E61 6D653100000000
.enddata
.data CLASSPROPSSIZE
0000: 1F00
.enddata
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Word &Start
				Window Location and Size
					Left: 0.15"
					Top: 1.833"
					Width:  2.483"
					Width Editable? Yes
					Height: 0.25"
					Height Editable? Yes
				Visible? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				Message Actions
			Combo Box: cmbFindString
.data INHERITPROPS
0000: 0100
.enddata
.data CLASSPROPS
0000: 5461624368696C64 4E616D6573000C00 4E616D6530094E61 6D653100000000
.enddata
.data CLASSPROPSSIZE
0000: 1F00
.enddata
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: ccmbFindReplace
				Property Template:
				Class DLL Name:
				Window Location and Size
					Left: 1.514"
					Top: 0.406"
					Width:  4.857"
					Width Editable? Class Default
					Height: 2.104"
					Height Editable? Class Default
				Visible? Yes
				Editable? Class Default
				String Type: Class Default
				Maximum Data Length: Class Default
				Sorted? Class Default
				Always Show List? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Input Mask: Class Default
				List Initialization
				Message Actions
					On SAM_Create
						Set m_bFind = TRUE
						Call SalSendClassMessage(SAM_Create,wParam,lParam)
			Combo Box: cmbReplaceString
.data INHERITPROPS
0000: 0100
.enddata
.data CLASSPROPS
0000: 5461624368696C64 4E616D6573000600 4E616D65310000
.enddata
.data CLASSPROPSSIZE
0000: 1700
.enddata
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: ccmbFindReplace
				Property Template:
				Class DLL Name:
				Window Location and Size
					Left: 1.514"
					Top: 0.667"
					Width:  4.857"
					Width Editable? Class Default
					Height: 1.771"
					Height Editable? Class Default
				Visible? No
				Editable? Class Default
				String Type: Class Default
				Maximum Data Length: Class Default
				Sorted? Class Default
				Always Show List? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Input Mask: Class Default
				List Initialization
				Message Actions
					On SAM_Create
						Set m_bFind = FALSE
						Call SalSendClassMessage(SAM_Create,wParam,lParam)
		Functions
			Function: FnBProcessSAM_Create
				Description:
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
				Actions
					Call SalSetFocus(cmbFindString)
					Set nStart=NUMBER_Null
					! Set cmbFindString =hWndMultiline.ccScintilla.FnSGetSelectedText()
			! !
			Function: FnNReturnSearchFlags
				Description:
				Returns
					Number:
				Parameters
				Static Variables
				Local variables
					Number: nFlag
				Actions
					If cbMatchCase
						Set nFlag =nFlag | SCFIND_MATCHCASE
					If cbMatchWholeWord
						Set nFlag =nFlag  | SCFIND_WHOLEWORD
					If cbRegularExpression
						Set nFlag =nFlag | SCFIND_REGEXP
					If cbwordStart
						Set nFlag =nFlag | SCFIND_WORDSTART
					Return nFlag
			! !
			Function: FnBFindButtonClick
				Description:
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					Number: ngum1
				Actions
					Set szLastFoundString =STRING_Null
					If nStart != NUMBER_Null
						Set nStart =nStart +1
					Set nStart = hWndMultiline.ccScintilla.FindInMultiline(cmbFindString,nStart,FnNReturnSearchFlags(),1)
					If nStart != -1
						Set szLastFoundString =hWndMultiline.ccScintilla.GetSelectedText()
						Call hWndMultiline.ccScintilla.GetSelection(FALSE,ngum1,nEnd)
			! !
			Function: FnBReplaceButtonClick
				Description:
				Returns
				Parameters
				Static Variables
				Local variables
					Number: nCurrentEnd
					Number: nCurrentStart
				Actions
					Call hWndMultiline.ccScintilla.GetSelection(FALSE,nCurrentStart,nCurrentEnd)
					! ! We make sure that the text being replaced is the same that was found. This is because the user may click on the editor and change the text position
					If hWndMultiline.ccScintilla.GetSelectedText()=szLastFoundString AND nCurrentEnd = nEnd AND  nCurrentStart= nStart
						Call hWndMultiline.ccScintilla.ReplaceClick(cbRegularExpression,cmbReplaceString)
			Function: TabUserRequest
				Description: Indicates that user is attempting to change the current tab by clicking,
						 tabbing or some other user action.
						NOTE: Call CancelMode() to deny the user's request
				Returns
					Boolean:
				Parameters
					Window Handle: hWnd
					Number: nTab
				Static Variables
				Local variables
				Actions
					If nTab=1
						If bEnableReplace =FALSE
							Call picTabs.CancelMode()
							Return FALSE
			Function: TabActivateFinish
				Description: Indicates that a tab has been activated.
						This function is called after the child windows have been shown
				Returns
					Boolean:
				Parameters
					Window Handle: hWnd
					Number: nTab
				Static Variables
				Local variables
				Actions
					Call SalSetFocus(cmbFindString)
					If nTab = 1
						Call SalHideWindow(pbReplace)
		Window Parameters
			Window Handle: hWndMultiline
			Boolean: bEnableReplace       ! This find dialog is also called from dlgDescription. This parameter is false then
			Boolean: bShowReplaceTab
		Window Variables
			Number: nStart
			Boolean: bFirstOccurenceOver
			String: szLastFoundString
			Number: nEnd
		Message Actions
			On SAM_Create
				Call FnBProcessSAM_Create()
			On SAM_Destroy
				Call SalPostMsg(SalParentWindow(hWndForm),PM_ChildClose,1,0)
			On SAM_CreateComplete
				If bShowReplaceTab
					Call picTabs.BringToTop(1,TRUE)
